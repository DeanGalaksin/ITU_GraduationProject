
CAN_Node_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080085d0  080085d0  000095d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800863c  0800863c  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800863c  0800863c  0000963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008644  08008644  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008644  08008644  00009644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0800864c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001244  200001a0  080087ec  0000a1a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  080087ec  0000a3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de7e  00000000  00000000  0000a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d59  00000000  00000000  00018047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  0001b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e1  00000000  00000000  0001c217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e883  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087100  00000000  00000000  0004427b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e24  00000000  00000000  000cb3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ce1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080085b8 	.word	0x080085b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	080085b8 	.word	0x080085b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 faa6 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f85c 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f908 	bl	800037c <MX_GPIO_Init>
  MX_CAN_Init();
 800016c:	f000 f8b2 	bl	80002d4 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000170:	f007 fd52 	bl	8007c18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  TxHeader.DLC=2;
 8000174:	4b23      	ldr	r3, [pc, #140]	@ (8000204 <main+0xa8>)
 8000176:	2202      	movs	r2, #2
 8000178:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800017a:	4b22      	ldr	r3, [pc, #136]	@ (8000204 <main+0xa8>)
 800017c:	2200      	movs	r2, #0
 800017e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000180:	4b20      	ldr	r3, [pc, #128]	@ (8000204 <main+0xa8>)
 8000182:	2200      	movs	r2, #0
 8000184:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 64;
 8000186:	4b1f      	ldr	r3, [pc, #124]	@ (8000204 <main+0xa8>)
 8000188:	2240      	movs	r2, #64	@ 0x40
 800018a:	601a      	str	r2, [r3, #0]

  HAL_CAN_Start(&hcan);
 800018c:	481e      	ldr	r0, [pc, #120]	@ (8000208 <main+0xac>)
 800018e:	f000 fcd9 	bl	8000b44 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000192:	2102      	movs	r1, #2
 8000194:	481c      	ldr	r0, [pc, #112]	@ (8000208 <main+0xac>)
 8000196:	f000 ff3d 	bl	8001014 <HAL_CAN_ActivateNotification>



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a0:	481a      	ldr	r0, [pc, #104]	@ (800020c <main+0xb0>)
 80001a2:	f001 fc11 	bl	80019c8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0)  // Check if mailbox is free
 80001a6:	4818      	ldr	r0, [pc, #96]	@ (8000208 <main+0xac>)
 80001a8:	f000 fddf 	bl	8000d6a <HAL_CAN_GetTxMailboxesFreeLevel>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d005      	beq.n	80001be <main+0x62>
	      {
	          HAL_CAN_AddTxMessage(&hcan, &TxHeader, testData, &TxMailbox);
 80001b2:	4b17      	ldr	r3, [pc, #92]	@ (8000210 <main+0xb4>)
 80001b4:	4a17      	ldr	r2, [pc, #92]	@ (8000214 <main+0xb8>)
 80001b6:	4913      	ldr	r1, [pc, #76]	@ (8000204 <main+0xa8>)
 80001b8:	4813      	ldr	r0, [pc, #76]	@ (8000208 <main+0xac>)
 80001ba:	f000 fd07 	bl	8000bcc <HAL_CAN_AddTxMessage>
	      }

	  // If a message is received (set by callback), turn LED ON
	  if (flag == 1)
 80001be:	4b16      	ldr	r3, [pc, #88]	@ (8000218 <main+0xbc>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d106      	bne.n	80001d4 <main+0x78>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001cc:	480f      	ldr	r0, [pc, #60]	@ (800020c <main+0xb0>)
 80001ce:	f001 fbfb 	bl	80019c8 <HAL_GPIO_WritePin>
 80001d2:	e004      	b.n	80001de <main+0x82>
	  }
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Blink LED until message received
 80001d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d8:	480c      	ldr	r0, [pc, #48]	@ (800020c <main+0xb0>)
 80001da:	f001 fc0d 	bl	80019f8 <HAL_GPIO_TogglePin>
	  }

	  if (CDC_Transmit_FS(usbTransmitBuffer, strlen((char*)usbTransmitBuffer)) == USBD_OK)
 80001de:	480f      	ldr	r0, [pc, #60]	@ (800021c <main+0xc0>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	480c      	ldr	r0, [pc, #48]	@ (800021c <main+0xc0>)
 80001ec:	f007 fdd2 	bl	8007d94 <CDC_Transmit_FS>
	      // Başarılı gönderim
	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  }
	  HAL_Delay(500);
 80001f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f4:	f000 fabe 	bl	8000774 <HAL_Delay>

	  HAL_Delay(500);
 80001f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fc:	f000 faba 	bl	8000774 <HAL_Delay>
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0)  // Check if mailbox is free
 8000200:	e7d1      	b.n	80001a6 <main+0x4a>
 8000202:	bf00      	nop
 8000204:	200001e4 	.word	0x200001e4
 8000208:	200001bc 	.word	0x200001bc
 800020c:	40011000 	.word	0x40011000
 8000210:	20000218 	.word	0x20000218
 8000214:	20000020 	.word	0x20000020
 8000218:	2000021e 	.word	0x2000021e
 800021c:	20000000 	.word	0x20000000

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b094      	sub	sp, #80	@ 0x50
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f008 f996 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000276:	4618      	mov	r0, r3
 8000278:	f003 f938 	bl	80034ec <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000282:	f000 f8f9 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fba4 	bl	80039f0 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ae:	f000 f8e3 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002b2:	2310      	movs	r3, #16
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f003 fcf3 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002c8:	f000 f8d6 	bl	8000478 <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	3750      	adds	r7, #80	@ 0x50
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	@ 0x28
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002da:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002dc:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <MX_CAN_Init+0xa4>)
 80002de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002e0:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002e2:	2210      	movs	r2, #16
 80002e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002e6:	4b23      	ldr	r3, [pc, #140]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002f6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80002fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <MX_CAN_Init+0xa0>)
 80002fe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000302:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_CAN_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_CAN_Init+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_CAN_Init+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_CAN_Init+0xa0>)
 8000318:	2201      	movs	r2, #1
 800031a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_CAN_Init+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000322:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_CAN_Init+0xa0>)
 8000324:	2200      	movs	r2, #0
 8000326:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000328:	4812      	ldr	r0, [pc, #72]	@ (8000374 <MX_CAN_Init+0xa0>)
 800032a:	f000 fa47 	bl	80007bc <HAL_CAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000334:	f000 f8a0 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000340:	2301      	movs	r3, #1
 8000342:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000344:	2300      	movs	r3, #0
 8000346:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800034c:	2300      	movs	r3, #0
 800034e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000358:	2301      	movs	r3, #1
 800035a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800035c:	230e      	movs	r3, #14
 800035e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000360:	463b      	mov	r3, r7
 8000362:	4619      	mov	r1, r3
 8000364:	4803      	ldr	r0, [pc, #12]	@ (8000374 <MX_CAN_Init+0xa0>)
 8000366:	f000 fb24 	bl	80009b2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	@ 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200001bc 	.word	0x200001bc
 8000378:	40006400 	.word	0x40006400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b2a      	ldr	r3, [pc, #168]	@ (800043c <MX_GPIO_Init+0xc0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a29      	ldr	r2, [pc, #164]	@ (800043c <MX_GPIO_Init+0xc0>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b27      	ldr	r3, [pc, #156]	@ (800043c <MX_GPIO_Init+0xc0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b24      	ldr	r3, [pc, #144]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a23      	ldr	r2, [pc, #140]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b21      	ldr	r3, [pc, #132]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0xc0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f6:	4812      	ldr	r0, [pc, #72]	@ (8000440 <MX_GPIO_Init+0xc4>)
 80003f8:	f001 fae6 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	480a      	ldr	r0, [pc, #40]	@ (8000440 <MX_GPIO_Init+0xc4>)
 8000416:	f001 f953 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rs_Pin_Pin */
  GPIO_InitStruct.Pin = Rs_Pin_Pin;
 800041a:	2310      	movs	r3, #16
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Rs_Pin_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_GPIO_Init+0xc8>)
 800042e:	f001 f947 	bl	80016c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000
 8000444:	40010c00 	.word	0x40010c00

08000448 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, testRx);
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000452:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000454:	2100      	movs	r1, #0
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 fcbb 	bl	8000dd2 <HAL_CAN_GetRxMessage>

    //if (testRx[0] == 2 && testRx[1] == 3)
    //{
        flag = 1;
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
    //}
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000021c 	.word	0x2000021c
 8000470:	200001fc 	.word	0x200001fc
 8000474:	2000021e 	.word	0x2000021e

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a2d      	ldr	r2, [pc, #180]	@ (80005b8 <HAL_CAN_MspInit+0xd0>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d153      	bne.n	80005b0 <HAL_CAN_MspInit+0xc8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000508:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4a2b      	ldr	r2, [pc, #172]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 800050e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000512:	61d3      	str	r3, [r2, #28]
 8000514:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a25      	ldr	r2, [pc, #148]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <HAL_CAN_MspInit+0xd4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800053c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	481c      	ldr	r0, [pc, #112]	@ (80005c0 <HAL_CAN_MspInit+0xd8>)
 800054e:	f001 f8b7 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4816      	ldr	r0, [pc, #88]	@ (80005c0 <HAL_CAN_MspInit+0xd8>)
 8000568:	f001 f8aa 	bl	80016c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <HAL_CAN_MspInit+0xdc>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
 8000572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000574:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
 8000582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_CAN_MspInit+0xdc>)
 800058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2100      	movs	r1, #0
 8000594:	2013      	movs	r0, #19
 8000596:	f001 f85c 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800059a:	2013      	movs	r0, #19
 800059c:	f001 f875 	bl	800168a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2100      	movs	r1, #0
 80005a4:	2014      	movs	r0, #20
 80005a6:	f001 f854 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005aa:	2014      	movs	r0, #20
 80005ac:	f001 f86d 	bl	800168a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	@ 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40006400 	.word	0x40006400
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	40010000 	.word	0x40010000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f890 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <USB_HP_CAN1_TX_IRQHandler+0x14>)
 8000626:	f000 fd1a 	bl	800105e <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800062a:	4803      	ldr	r0, [pc, #12]	@ (8000638 <USB_HP_CAN1_TX_IRQHandler+0x18>)
 800062c:	f001 fb19 	bl	8001c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001bc 	.word	0x200001bc
 8000638:	20000eec 	.word	0x20000eec

0800063c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000642:	f000 fd0c 	bl	800105e <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000646:	4803      	ldr	r0, [pc, #12]	@ (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000648:	f001 fb0b 	bl	8001c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001bc 	.word	0x200001bc
 8000654:	20000eec 	.word	0x20000eec

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff fff8 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066a:	490c      	ldr	r1, [pc, #48]	@ (800069c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800066c:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000680:	4c09      	ldr	r4, [pc, #36]	@ (80006a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f007 ff6f 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fd63 	bl	800015c <main>
  bx lr
 8000696:	4770      	bx	lr
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80006a0:	0800864c 	.word	0x0800864c
  ldr r2, =_sbss
 80006a4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80006a8:	200013e4 	.word	0x200013e4

080006ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_2_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <HAL_Init+0x28>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <HAL_Init+0x28>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 ffbb 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f808 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006cc:	f7ff feda 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_InitTick+0x54>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffd3 	bl	80016a6 <HAL_SYSTICK_Config>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e00e      	b.n	8000728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80a      	bhi.n	8000726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000718:	f000 ff9b 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <HAL_InitTick+0x5c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000024 	.word	0x20000024
 8000734:	2000002c 	.word	0x2000002c
 8000738:	20000028 	.word	0x20000028

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	2000002c 	.word	0x2000002c
 800075c:	20000220 	.word	0x20000220

08000760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000220 	.word	0x20000220

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800077c:	f7ff fff0 	bl	8000760 <HAL_GetTick>
 8000780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800078c:	d005      	beq.n	800079a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_Delay+0x44>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079a:	bf00      	nop
 800079c:	f7ff ffe0 	bl	8000760 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f7      	bhi.n	800079c <HAL_Delay+0x28>
  {
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000002c 	.word	0x2000002c

080007bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e0ed      	b.n	80009aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d102      	bne.n	80007e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fe84 	bl	80004e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007f0:	f7ff ffb6 	bl	8000760 <HAL_GetTick>
 80007f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007f6:	e012      	b.n	800081e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f8:	f7ff ffb2 	bl	8000760 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d90b      	bls.n	800081e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2205      	movs	r2, #5
 8000816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e0c5      	b.n	80009aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0e5      	beq.n	80007f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0202 	bic.w	r2, r2, #2
 800083a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800083c:	f7ff ff90 	bl	8000760 <HAL_GetTick>
 8000840:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000842:	e012      	b.n	800086a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000844:	f7ff ff8c 	bl	8000760 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b0a      	cmp	r3, #10
 8000850:	d90b      	bls.n	800086a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000856:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2205      	movs	r2, #5
 8000862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e09f      	b.n	80009aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1e5      	bne.n	8000844 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7e1b      	ldrb	r3, [r3, #24]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d108      	bne.n	8000892 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e007      	b.n	80008a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7e5b      	ldrb	r3, [r3, #25]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d108      	bne.n	80008bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	e007      	b.n	80008cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80008ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7e9b      	ldrb	r3, [r3, #26]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d108      	bne.n	80008e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0220 	orr.w	r2, r2, #32
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e007      	b.n	80008f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 0220 	bic.w	r2, r2, #32
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7edb      	ldrb	r3, [r3, #27]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d108      	bne.n	8000910 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0210 	bic.w	r2, r2, #16
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e007      	b.n	8000920 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f042 0210 	orr.w	r2, r2, #16
 800091e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d108      	bne.n	800093a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f042 0208 	orr.w	r2, r2, #8
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e007      	b.n	800094a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 0208 	bic.w	r2, r2, #8
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7f5b      	ldrb	r3, [r3, #29]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d108      	bne.n	8000964 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0204 	orr.w	r2, r2, #4
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	e007      	b.n	8000974 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0204 	bic.w	r2, r2, #4
 8000972:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	ea42 0103 	orr.w	r1, r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d003      	beq.n	80009d8 <HAL_CAN_ConfigFilter+0x26>
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	f040 80aa 	bne.w	8000b2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009de:	f043 0201 	orr.w	r2, r3, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	2201      	movs	r2, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d123      	bne.n	8000a5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3248      	adds	r2, #72	@ 0x48
 8000a3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	3348      	adds	r3, #72	@ 0x48
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d122      	bne.n	8000aa8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3248      	adds	r2, #72	@ 0x48
 8000a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9e:	6979      	ldr	r1, [r7, #20]
 8000aa0:	3348      	adds	r3, #72	@ 0x48
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ac2:	e007      	b.n	8000ad4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000aee:	e007      	b.n	8000b00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d107      	bne.n	8000b18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b1e:	f023 0201 	bic.w	r2, r3, #1
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e006      	b.n	8000b3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
  }
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d12e      	bne.n	8000bb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b70:	f7ff fdf6 	bl	8000760 <HAL_GetTick>
 8000b74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b76:	e012      	b.n	8000b9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b78:	f7ff fdf2 	bl	8000760 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d90b      	bls.n	8000b9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2205      	movs	r2, #5
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e012      	b.n	8000bc4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e5      	bne.n	8000b78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e006      	b.n	8000bc4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
  }
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d003      	beq.n	8000bf8 <HAL_CAN_AddTxMessage+0x2c>
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	f040 80ad 	bne.w	8000d52 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10a      	bne.n	8000c18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8095 	beq.w	8000d42 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	0e1b      	lsrs	r3, r3, #24
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10d      	bne.n	8000c50 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c3e:	68f9      	ldr	r1, [r7, #12]
 8000c40:	6809      	ldr	r1, [r1, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	440b      	add	r3, r1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e00f      	b.n	8000c70 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	440b      	add	r3, r1
 8000c6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	440b      	add	r3, r1
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	7d1b      	ldrb	r3, [r3, #20]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d111      	bne.n	8000cb0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3318      	adds	r3, #24
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	3304      	adds	r3, #4
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	440b      	add	r3, r1
 8000cac:	3304      	adds	r3, #4
 8000cae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3307      	adds	r3, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	061a      	lsls	r2, r3, #24
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3306      	adds	r3, #6
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	041b      	lsls	r3, r3, #16
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3305      	adds	r3, #5
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	3204      	adds	r2, #4
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	6811      	ldr	r1, [r2, #0]
 8000cd8:	ea43 0200 	orr.w	r2, r3, r0
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ce6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3303      	adds	r3, #3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	061a      	lsls	r2, r3, #24
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	4313      	orrs	r3, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	ea43 0200 	orr.w	r2, r3, r0
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	440b      	add	r3, r1
 8000d18:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3318      	adds	r3, #24
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	f043 0201 	orr.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	440b      	add	r3, r1
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00e      	b.n	8000d60 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e006      	b.n	8000d60 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
  }
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3724      	adds	r7, #36	@ 0x24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d002      	beq.n	8000d8a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d84:	7afb      	ldrb	r3, [r7, #11]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d11d      	bne.n	8000dc6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b087      	sub	sp, #28
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d003      	beq.n	8000df6 <HAL_CAN_GetRxMessage+0x24>
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f040 8103 	bne.w	8000ffc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10e      	bne.n	8000e1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0f7      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0e8      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	331b      	adds	r3, #27
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0204 	and.w	r2, r3, #4
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	331b      	adds	r3, #27
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	331b      	adds	r3, #27
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0202 	and.w	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	331b      	adds	r3, #27
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	331b      	adds	r3, #27
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	3304      	adds	r3, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 020f 	and.w	r2, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	331b      	adds	r3, #27
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	331b      	adds	r3, #27
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0a1a      	lsrs	r2, r3, #8
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0c1a      	lsrs	r2, r3, #16
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e1a      	lsrs	r2, r3, #24
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3303      	adds	r3, #3
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0a1a      	lsrs	r2, r3, #8
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3305      	adds	r3, #5
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1a      	lsrs	r2, r3, #16
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0e1a      	lsrs	r2, r3, #24
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3307      	adds	r3, #7
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0220 	orr.w	r2, r2, #32
 8000ff6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e006      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001024:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d002      	beq.n	8001032 <HAL_CAN_ActivateNotification+0x1e>
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d109      	bne.n	8001046 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6959      	ldr	r1, [r3, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e006      	b.n	8001054 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
  }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b08a      	sub	sp, #40	@ 0x28
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d07c      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d023      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f983 	bl	80013cc <HAL_CAN_TxMailbox0CompleteCallback>
 80010c6:	e016      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010da:	e00c      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ee:	e002      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f986 	bl	8001402 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d024      	beq.n	800114a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f962 	bl	80013de <HAL_CAN_TxMailbox1CompleteCallback>
 800111a:	e016      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
 800112e:	e00c      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
 8001142:	e002      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f965 	bl	8001414 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800115c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f941 	bl	80013f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800116e:	e016      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
 8001182:	e00c      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
 8001196:	e002      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f944 	bl	8001426 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2210      	movs	r2, #16
 80011c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f92a 	bl	8001438 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff f923 	bl	8000448 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f90a 	bl	800145c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f8f2 	bl	800144a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2210      	movs	r2, #16
 8001280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8f3 	bl	800146e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f8eb 	bl	8001480 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d07b      	beq.n	80013ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d072      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001318:	2b00      	cmp	r3, #0
 800131a:	d043      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d03e      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800132c:	2b60      	cmp	r3, #96	@ 0x60
 800132e:	d02b      	beq.n	8001388 <HAL_CAN_IRQHandler+0x32a>
 8001330:	2b60      	cmp	r3, #96	@ 0x60
 8001332:	d82e      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 8001334:	2b50      	cmp	r3, #80	@ 0x50
 8001336:	d022      	beq.n	800137e <HAL_CAN_IRQHandler+0x320>
 8001338:	2b50      	cmp	r3, #80	@ 0x50
 800133a:	d82a      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 800133c:	2b40      	cmp	r3, #64	@ 0x40
 800133e:	d019      	beq.n	8001374 <HAL_CAN_IRQHandler+0x316>
 8001340:	2b40      	cmp	r3, #64	@ 0x40
 8001342:	d826      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 8001344:	2b30      	cmp	r3, #48	@ 0x30
 8001346:	d010      	beq.n	800136a <HAL_CAN_IRQHandler+0x30c>
 8001348:	2b30      	cmp	r3, #48	@ 0x30
 800134a:	d822      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 800134c:	2b10      	cmp	r3, #16
 800134e:	d002      	beq.n	8001356 <HAL_CAN_IRQHandler+0x2f8>
 8001350:	2b20      	cmp	r3, #32
 8001352:	d005      	beq.n	8001360 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001354:	e01d      	b.n	8001392 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800135e:	e019      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001368:	e014      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001372:	e00f      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800137c:	e00a      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001386:	e005      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001390:	e000      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            break;
 8001392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f867 	bl	8001492 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	@ (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800161c:	f7ff ff90 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff2d 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff42 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff35 	bl	8001508 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	@ 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e169      	b.n	80019a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8158 	bne.w	80019a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001960 <HAL_GPIO_Init+0x2a0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a98      	ldr	r2, [pc, #608]	@ (8001960 <HAL_GPIO_Init+0x2a0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a98      	ldr	r2, [pc, #608]	@ (8001964 <HAL_GPIO_Init+0x2a4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a96      	ldr	r2, [pc, #600]	@ (8001964 <HAL_GPIO_Init+0x2a4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a96      	ldr	r2, [pc, #600]	@ (8001968 <HAL_GPIO_Init+0x2a8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <HAL_GPIO_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a94      	ldr	r2, [pc, #592]	@ (800196c <HAL_GPIO_Init+0x2ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a92      	ldr	r2, [pc, #584]	@ (800196c <HAL_GPIO_Init+0x2ac>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a92      	ldr	r2, [pc, #584]	@ (8001970 <HAL_GPIO_Init+0x2b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a90      	ldr	r2, [pc, #576]	@ (8001970 <HAL_GPIO_Init+0x2b0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a79      	ldr	r2, [pc, #484]	@ (8001974 <HAL_GPIO_Init+0x2b4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	@ 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	@ 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80b1 	beq.w	80019a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b4d      	ldr	r3, [pc, #308]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a4c      	ldr	r2, [pc, #304]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a48      	ldr	r2, [pc, #288]	@ (800197c <HAL_GPIO_Init+0x2bc>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a40      	ldr	r2, [pc, #256]	@ (8001980 <HAL_GPIO_Init+0x2c0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3f      	ldr	r2, [pc, #252]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3e      	ldr	r2, [pc, #248]	@ (8001988 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3d      	ldr	r2, [pc, #244]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e0>
 800189c:	2303      	movs	r3, #3
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018be:	492f      	ldr	r1, [pc, #188]	@ (800197c <HAL_GPIO_Init+0x2bc>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	492c      	ldr	r1, [pc, #176]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4928      	ldr	r1, [pc, #160]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4922      	ldr	r1, [pc, #136]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491e      	ldr	r1, [pc, #120]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4918      	ldr	r1, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4914      	ldr	r1, [pc, #80]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d021      	beq.n	8001994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e021      	b.n	80019a2 <HAL_GPIO_Init+0x2e2>
 800195e:	bf00      	nop
 8001960:	10320000 	.word	0x10320000
 8001964:	10310000 	.word	0x10310000
 8001968:	10220000 	.word	0x10220000
 800196c:	10210000 	.word	0x10210000
 8001970:	10120000 	.word	0x10120000
 8001974:	10110000 	.word	0x10110000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	4909      	ldr	r1, [pc, #36]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 800199e:	4013      	ands	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae8e 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	372c      	adds	r7, #44	@ 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43d9      	mvns	r1, r3
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	611a      	str	r2, [r3, #16]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0e8      	b.n	8001c0e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f006 fad3 	bl	8007ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 f9f6 	bl	8003e5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a78:	f002 f9cc 	bl	8003e14 <USB_CoreInit>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0bf      	b.n	8001c0e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 f9fa 	bl	8003e8e <USB_SetCurrentMode>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b0      	b.n	8001c0e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e03e      	b.n	8001b30 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3311      	adds	r3, #17
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3310      	adds	r3, #16
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3313      	adds	r3, #19
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	3320      	adds	r3, #32
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	3324      	adds	r3, #36	@ 0x24
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3bb      	bcc.n	8001ab2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e044      	b.n	8001bca <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3b5      	bcc.n	8001b40 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bde:	f002 f962 	bl	8003ea6 <USB_DevInit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00c      	b.n	8001c0e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fbe1 	bl	80063ce <USB_DevDisconnect>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_Start+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e016      	b.n	8001c5a <HAL_PCD_Start+0x44>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 f8f8 	bl	8003e2e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f006 fc56 	bl	80084f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 fbb5 	bl	80063ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fbb7 	bl	80063e2 <USB_ReadInterrupts>
 8001c74:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fb1a 	bl	80022ba <PCD_EP_ISR_Handler>

    return;
 8001c86:	e119      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d013      	beq.n	8001cba <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 fa29 	bl	8008102 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f905 	bl	8001ec2 <HAL_PCD_SetAddress>

    return;
 8001cb8:	e100      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00c      	beq.n	8001cde <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001cdc:	e0ee      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00c      	beq.n	8001d02 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001d00:	e0dc      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d027      	beq.n	8001d5c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0208 	bic.w	r2, r2, #8
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f006 fa19 	bl	8008174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d54:	b292      	uxth	r2, r2
 8001d56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001d5a:	e0af      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8083 	beq.w	8001e6e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
 8001d6c:	e010      	b.n	8001d90 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	3320      	adds	r3, #32
 8001d84:	443b      	add	r3, r7
 8001d86:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	2b07      	cmp	r3, #7
 8001d94:	d9eb      	bls.n	8001d6e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001dc6:	bf00      	nop
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f6      	beq.n	8001dc8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	77fb      	strb	r3, [r7, #31]
 8001df6:	e00f      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	7ffa      	ldrb	r2, [r7, #31]
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	440a      	add	r2, r1
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	3320      	adds	r3, #32
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e10:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	3301      	adds	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	7ffb      	ldrb	r3, [r7, #31]
 8001e1a:	2b07      	cmp	r3, #7
 8001e1c:	d9ec      	bls.n	8001df8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0208 	orr.w	r2, r2, #8
 8001e30:	b292      	uxth	r2, r2
 8001e32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0204 	orr.w	r2, r2, #4
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f006 f96a 	bl	8008140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e6c:	e026      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00f      	beq.n	8001e98 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f006 f928 	bl	80080e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e96:	e011      	b.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001eba:	bf00      	nop
  }
}
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_SetAddress+0x1a>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e012      	b.n	8001f02 <HAL_PCD_SetAddress+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fa4e 	bl	8006394 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	4608      	mov	r0, r1
 8001f14:	4611      	mov	r1, r2
 8001f16:	461a      	mov	r2, r3
 8001f18:	4603      	mov	r3, r0
 8001f1a:	70fb      	strb	r3, [r7, #3]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	803b      	strh	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0e      	bge.n	8001f4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	3310      	adds	r3, #16
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0207 	and.w	r2, r3, #7
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f78:	883a      	ldrh	r2, [r7, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	78ba      	ldrb	r2, [r7, #2]
 8001f82:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f84:	78bb      	ldrb	r3, [r7, #2]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d102      	bne.n	8001f90 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_PCD_EP_Open+0x94>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e00e      	b.n	8001fbc <HAL_PCD_EP_Open+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 ff97 	bl	8003ee0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001fba:	7afb      	ldrb	r3, [r7, #11]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da0e      	bge.n	8001ff6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0207 	and.w	r2, r3, #7
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
 8001ff4:	e00e      	b.n	8002014 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0207 	and.w	r2, r3, #7
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_EP_Close+0x6a>
 800202a:	2302      	movs	r3, #2
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_Close+0x88>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fb0f 	bl	8004660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	b2da      	uxtb	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6979      	ldr	r1, [r7, #20]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fcc6 	bl	8004a38 <USB_EPStartXfer>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	f003 0207 	and.w	r2, r3, #7
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80020d8:	681b      	ldr	r3, [r3, #0]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	460b      	mov	r3, r1
 80020f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	f003 0207 	and.w	r2, r3, #7
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	3310      	adds	r3, #16
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2201      	movs	r2, #1
 800212e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	b2da      	uxtb	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fc78 	bl	8004a38 <USB_EPStartXfer>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	7912      	ldrb	r2, [r2, #4]
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e04c      	b.n	800220a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002174:	2b00      	cmp	r3, #0
 8002176:	da0e      	bge.n	8002196 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	3310      	adds	r3, #16
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00c      	b.n	80021b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_EP_SetStall+0x7e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e01c      	b.n	800220a <HAL_PCD_EP_SetStall+0xb8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 ffdb 	bl	800619a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f004 f900 	bl	8006400 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	7912      	ldrb	r2, [r2, #4]
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e040      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0e      	bge.n	8002256 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	3310      	adds	r3, #16
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	705a      	strb	r2, [r3, #1]
 8002254:	e00e      	b.n	8002274 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f003 0207 	and.w	r2, r3, #7
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_ClrStall+0x82>
 8002290:	2302      	movs	r3, #2
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0xa0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 ffc9 	bl	800623a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b096      	sub	sp, #88	@ 0x58
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022c2:	e3bb      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80022de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8175 	bne.w	80025d2 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d14e      	bne.n	8002392 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002304:	81fb      	strh	r3, [r7, #14]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3310      	adds	r3, #16
 800231c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	3302      	adds	r3, #2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	441a      	add	r2, r3
 8002354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002356:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f005 fea9 	bl	80080b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7b5b      	ldrb	r3, [r3, #13]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8368 	beq.w	8002a3c <PCD_EP_ISR_Handler+0x782>
 800236c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 8363 	bne.w	8002a3c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7b5b      	ldrb	r3, [r3, #13]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	735a      	strb	r2, [r3, #13]
 8002390:	e354      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002398:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d034      	beq.n	800241a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	3306      	adds	r3, #6
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80023e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f004 f857 	bl	80064a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002400:	4013      	ands	r3, r2
 8002402:	823b      	strh	r3, [r7, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	8a3a      	ldrh	r2, [r7, #16]
 800240a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800240e:	b292      	uxth	r2, r2
 8002410:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fe20 	bl	8008058 <HAL_PCD_SetupStageCallback>
 8002418:	e310      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800241e:	2b00      	cmp	r3, #0
 8002420:	f280 830c 	bge.w	8002a3c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29a      	uxth	r2, r3
 800242c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002430:	4013      	ands	r3, r2
 8002432:	83fb      	strh	r3, [r7, #30]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	8bfa      	ldrh	r2, [r7, #30]
 800243a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800243e:	b292      	uxth	r2, r2
 8002440:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3306      	adds	r3, #6
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800246a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800246e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <PCD_EP_ISR_Handler+0x1f0>
 8002476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002488:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800248a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800248e:	b29b      	uxth	r3, r3
 8002490:	f004 f807 	bl	80064a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	441a      	add	r2, r3
 800249e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f005 fde9 	bl	800807c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80024b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 82bd 	bne.w	8002a3c <PCD_EP_ISR_Handler+0x782>
 80024c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80024ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024ce:	f000 82b5 	beq.w	8002a3c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b3e      	cmp	r3, #62	@ 0x3e
 8002508:	d91d      	bls.n	8002546 <PCD_EP_ISR_Handler+0x28c>
 800250a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
 8002512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <PCD_EP_ISR_Handler+0x26a>
 800251e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002520:	3b01      	subs	r3, #1
 8002522:	647b      	str	r3, [r7, #68]	@ 0x44
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800252c:	b29b      	uxth	r3, r3
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	b29b      	uxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253e:	b29a      	uxth	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e026      	b.n	8002594 <PCD_EP_ISR_Handler+0x2da>
 8002546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <PCD_EP_ISR_Handler+0x2aa>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e017      	b.n	8002594 <PCD_EP_ISR_Handler+0x2da>
 8002564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	647b      	str	r3, [r7, #68]	@ 0x44
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <PCD_EP_ISR_Handler+0x2c4>
 8002578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800257a:	3301      	adds	r3, #1
 800257c:	647b      	str	r3, [r7, #68]	@ 0x44
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002586:	b29b      	uxth	r3, r3
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	b29b      	uxth	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b29a      	uxth	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a4:	827b      	strh	r3, [r7, #18]
 80025a6:	8a7b      	ldrh	r3, [r7, #18]
 80025a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80025ac:	827b      	strh	r3, [r7, #18]
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80025b4:	827b      	strh	r3, [r7, #18]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	8a7b      	ldrh	r3, [r7, #18]
 80025bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	8013      	strh	r3, [r2, #0]
 80025d0:	e234      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f280 80fc 	bge.w	80027e8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29a      	uxth	r2, r3
 8002602:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002606:	4013      	ands	r3, r2
 8002608:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800261e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002622:	b292      	uxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002626:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800263c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263e:	7b1b      	ldrb	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d125      	bne.n	8002690 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	3306      	adds	r3, #6
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002670:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8092 	beq.w	800279e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	6959      	ldr	r1, [r3, #20]
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	88da      	ldrh	r2, [r3, #6]
 8002686:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800268a:	f003 ff0a 	bl	80064a2 <USB_ReadPMA>
 800268e:	e086      	b.n	800279e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10a      	bne.n	80026ae <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002698:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800269c:	461a      	mov	r2, r3
 800269e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f9d9 	bl	8002a58 <HAL_PCD_EP_DB_Receive>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80026ac:	e077      	b.n	800279e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80026de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d024      	beq.n	8002756 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	3302      	adds	r3, #2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002738:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02e      	beq.n	800279e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274a:	891a      	ldrh	r2, [r3, #8]
 800274c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002750:	f003 fea7 	bl	80064a2 <USB_ReadPMA>
 8002754:	e023      	b.n	800279e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	3306      	adds	r3, #6
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002790:	6959      	ldr	r1, [r3, #20]
 8002792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002794:	895a      	ldrh	r2, [r3, #10]
 8002796:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800279a:	f003 fe82 	bl	80064a2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80027a6:	441a      	add	r2, r3
 80027a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80027b4:	441a      	add	r2, r3
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <PCD_EP_ISR_Handler+0x514>
 80027c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d206      	bcs.n	80027dc <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f005 fc51 	bl	800807c <HAL_PCD_DataOutStageCallback>
 80027da:	e005      	b.n	80027e8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f928 	bl	8004a38 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8123 	beq.w	8002a3c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80027f6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	3310      	adds	r3, #16
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002824:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800283a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002842:	b29b      	uxth	r3, r3
 8002844:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002848:	78db      	ldrb	r3, [r3, #3]
 800284a:	2b01      	cmp	r3, #1
 800284c:	f040 80a2 	bne.w	8002994 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002858:	7b1b      	ldrb	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8093 	beq.w	8002986 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002860:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d046      	beq.n	80028fa <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d126      	bne.n	80028c2 <PCD_EP_ISR_Handler+0x608>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002882:	b29b      	uxth	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	4413      	add	r3, r2
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	011a      	lsls	r2, r3, #4
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	4413      	add	r3, r2
 8002896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e061      	b.n	8002986 <PCD_EP_ISR_Handler+0x6cc>
 80028c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d15d      	bne.n	8002986 <PCD_EP_ISR_Handler+0x6cc>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	4413      	add	r3, r2
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	011a      	lsls	r2, r3, #4
 80028e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	2200      	movs	r2, #0
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	e045      	b.n	8002986 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d126      	bne.n	8002956 <PCD_EP_ISR_Handler+0x69c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	4413      	add	r3, r2
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	011a      	lsls	r2, r3, #4
 8002926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002928:	4413      	add	r3, r2
 800292a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	b29a      	uxth	r2, r3
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294e:	b29a      	uxth	r2, r3
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	e017      	b.n	8002986 <PCD_EP_ISR_Handler+0x6cc>
 8002956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d113      	bne.n	8002986 <PCD_EP_ISR_Handler+0x6cc>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800296c:	4413      	add	r3, r2
 800296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002978:	4413      	add	r3, r2
 800297a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800297e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f005 fb90 	bl	80080b2 <HAL_PCD_DataInStageCallback>
 8002992:	e053      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d146      	bne.n	8002a2e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	3302      	adds	r3, #2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80029cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d907      	bls.n	80029e8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80029d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80029e0:	1ad2      	subs	r2, r2, r3
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	e002      	b.n	80029ee <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80029e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80029ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f005 fb58 	bl	80080b2 <HAL_PCD_DataInStageCallback>
 8002a02:	e01b      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002a0c:	441a      	add	r2, r3
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a10:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002a1a:	441a      	add	r2, r3
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f806 	bl	8004a38 <USB_EPStartXfer>
 8002a2c:	e006      	b.n	8002a3c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a32:	461a      	mov	r2, r3
 8002a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f91b 	bl	8002c72 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f6ff ac3b 	blt.w	80022c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3758      	adds	r7, #88	@ 0x58
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d07e      	beq.n	8002b6e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	3302      	adds	r3, #2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d306      	bcc.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	8b7b      	ldrh	r3, [r7, #26]
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	e002      	b.n	8002ab8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d123      	bne.n	8002b08 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ada:	833b      	strh	r3, [r7, #24]
 8002adc:	8b3b      	ldrh	r3, [r7, #24]
 8002ade:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ae2:	833b      	strh	r3, [r7, #24]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	8b3b      	ldrh	r3, [r7, #24]
 8002af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01f      	beq.n	8002b52 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2c:	82fb      	strh	r3, [r7, #22]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b52:	8b7b      	ldrh	r3, [r7, #26]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8087 	beq.w	8002c68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6959      	ldr	r1, [r3, #20]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	891a      	ldrh	r2, [r3, #8]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	f003 fc9b 	bl	80064a2 <USB_ReadPMA>
 8002b6c:	e07c      	b.n	8002c68 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3306      	adds	r3, #6
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d306      	bcc.n	8002bb0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e002      	b.n	8002bb6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d123      	bne.n	8002c06 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd8:	83fb      	strh	r3, [r7, #30]
 8002bda:	8bfb      	ldrh	r3, [r7, #30]
 8002bdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002be0:	83fb      	strh	r3, [r7, #30]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	8bfb      	ldrh	r3, [r7, #30]
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11f      	bne.n	8002c50 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2a:	83bb      	strh	r3, [r7, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	8bbb      	ldrh	r3, [r7, #28]
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	895a      	ldrh	r2, [r3, #10]
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	f003 fc1d 	bl	80064a2 <USB_ReadPMA>
    }
  }

  return count;
 8002c68:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b0a4      	sub	sp, #144	@ 0x90
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 81dd 	beq.w	8003046 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d907      	bls.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	e002      	b.n	8002cda <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 80b9 	bne.w	8002e56 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d126      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d00:	4413      	add	r3, r2
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	011a      	lsls	r2, r3, #4
 8002d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e01a      	b.n	8002d70 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d116      	bne.n	8002d70 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d56:	4413      	add	r3, r2
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	011a      	lsls	r2, r3, #4
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	4413      	add	r3, r2
 8002d64:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d126      	bne.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	011a      	lsls	r2, r3, #4
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	e017      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d113      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	4413      	add	r3, r2
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	011a      	lsls	r2, r3, #4
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	4413      	add	r3, r2
 8002df0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f005 f955 	bl	80080b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 82fc 	beq.w	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	82fb      	strh	r3, [r7, #22]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	8afb      	ldrh	r3, [r7, #22]
 8002e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8013      	strh	r3, [r2, #0]
 8002e54:	e2da      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d021      	beq.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	f040 82ae 	bne.w	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eb8:	441a      	add	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ec6:	441a      	add	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d30b      	bcc.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	621a      	str	r2, [r3, #32]
 8002eee:	e017      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002ef8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f08:	e00a      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d165      	bne.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3c:	4413      	add	r3, r2
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	011a      	lsls	r2, r3, #4
 8002f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f66:	d91d      	bls.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x332>
 8002f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x310>
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e044      	b.n	800302e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x350>
 8002fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	e035      	b.n	800302e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x36a>
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd8:	3301      	adds	r3, #1
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	e01c      	b.n	800302e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d118      	bne.n	800302e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	647b      	str	r3, [r7, #68]	@ 0x44
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003010:	4413      	add	r3, r2
 8003012:	647b      	str	r3, [r7, #68]	@ 0x44
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	011a      	lsls	r2, r3, #4
 800301a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301c:	4413      	add	r3, r2
 800301e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003022:	643b      	str	r3, [r7, #64]	@ 0x40
 8003024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003028:	b29a      	uxth	r2, r3
 800302a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	6959      	ldr	r1, [r3, #20]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	891a      	ldrh	r2, [r3, #8]
 800303a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 f9e9 	bl	8006416 <USB_WritePMA>
 8003044:	e1e2      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	3306      	adds	r3, #6
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800307a:	429a      	cmp	r2, r3
 800307c:	d307      	bcc.n	800308e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	e002      	b.n	8003094 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 80c0 	bne.w	800321e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d126      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x482>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ba:	4413      	add	r3, r2
 80030bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	011a      	lsls	r2, r3, #4
 80030c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030c6:	4413      	add	r3, r2
 80030c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d8:	b29a      	uxth	r2, r3
 80030da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030dc:	801a      	strh	r2, [r3, #0]
 80030de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f0:	801a      	strh	r2, [r3, #0]
 80030f2:	e01a      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d116      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	667b      	str	r3, [r7, #100]	@ 0x64
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003110:	4413      	add	r3, r2
 8003112:	667b      	str	r3, [r7, #100]	@ 0x64
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800311c:	4413      	add	r3, r2
 800311e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003122:	663b      	str	r3, [r7, #96]	@ 0x60
 8003124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003126:	2200      	movs	r2, #0
 8003128:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12b      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800314c:	4413      	add	r3, r2
 800314e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	011a      	lsls	r2, r3, #4
 8003156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003158:	4413      	add	r3, r2
 800315a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800315e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316e:	b29a      	uxth	r2, r3
 8003170:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003186:	b29a      	uxth	r2, r3
 8003188:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e017      	b.n	80031c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d113      	bne.n	80031c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a6:	4413      	add	r3, r2
 80031a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b2:	4413      	add	r3, r2
 80031b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80031ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f004 ff73 	bl	80080b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 811a 	bne.w	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
 800321c:	e0f6      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d121      	bne.n	800326c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800323e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003242:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800325c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003268:	b29b      	uxth	r3, r3
 800326a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	f040 80ca 	bne.w	800340c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003280:	441a      	add	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800328e:	441a      	add	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d30b      	bcc.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	621a      	str	r2, [r3, #32]
 80032b6:	e017      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80032c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80032d0:	e00a      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d165      	bne.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x750>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003304:	b29b      	uxth	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800330a:	4413      	add	r3, r2
 800330c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	011a      	lsls	r2, r3, #4
 8003314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003316:	4413      	add	r3, r2
 8003318:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800331c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800331e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003328:	b29a      	uxth	r2, r3
 800332a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003332:	2b3e      	cmp	r3, #62	@ 0x3e
 8003334:	d91d      	bls.n	8003372 <HAL_PCD_EP_DB_Transmit+0x700>
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <HAL_PCD_EP_DB_Transmit+0x6de>
 800334a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800334c:	3b01      	subs	r3, #1
 800334e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29a      	uxth	r2, r3
 8003356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003358:	b29b      	uxth	r3, r3
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	b29b      	uxth	r3, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336a:	b29a      	uxth	r2, r3
 800336c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	e041      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_PCD_EP_DB_Transmit+0x71e>
 800337a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003388:	b29a      	uxth	r2, r3
 800338a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e032      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_PCD_EP_DB_Transmit+0x738>
 80033a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a6:	3301      	adds	r3, #1
 80033a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e019      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d115      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	4413      	add	r3, r2
 80033da:	657b      	str	r3, [r7, #84]	@ 0x54
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	011a      	lsls	r2, r3, #4
 80033e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	895a      	ldrh	r2, [r3, #10]
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	b29b      	uxth	r3, r3
 8003408:	f003 f805 	bl	8006416 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003426:	82bb      	strh	r3, [r7, #20]
 8003428:	8abb      	ldrh	r3, [r7, #20]
 800342a:	f083 0310 	eor.w	r3, r3, #16
 800342e:	82bb      	strh	r3, [r7, #20]
 8003430:	8abb      	ldrh	r3, [r7, #20]
 8003432:	f083 0320 	eor.w	r3, r3, #32
 8003436:	82bb      	strh	r3, [r7, #20]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	8abb      	ldrh	r3, [r7, #20]
 8003448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800344c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003458:	b29b      	uxth	r3, r3
 800345a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3790      	adds	r7, #144	@ 0x90
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	817b      	strh	r3, [r7, #10]
 8003474:	4613      	mov	r3, r2
 8003476:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	897b      	ldrh	r3, [r7, #10]
 8003486:	f003 0207 	and.w	r2, r3, #7
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	3310      	adds	r3, #16
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e009      	b.n	80034b0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800349c:	897a      	ldrh	r2, [r7, #10]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	80da      	strh	r2, [r3, #6]
 80034c4:	e00b      	b.n	80034de <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2201      	movs	r2, #1
 80034ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b29a      	uxth	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e272      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8087 	beq.w	800361a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800350c:	4b92      	ldr	r3, [pc, #584]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b04      	cmp	r3, #4
 8003516:	d00c      	beq.n	8003532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003518:	4b8f      	ldr	r3, [pc, #572]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d112      	bne.n	800354a <HAL_RCC_OscConfig+0x5e>
 8003524:	4b8c      	ldr	r3, [pc, #560]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003530:	d10b      	bne.n	800354a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003532:	4b89      	ldr	r3, [pc, #548]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d06c      	beq.n	8003618 <HAL_RCC_OscConfig+0x12c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d168      	bne.n	8003618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e24c      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x76>
 8003554:	4b80      	ldr	r3, [pc, #512]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7f      	ldr	r2, [pc, #508]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800355a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e02e      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b7b      	ldr	r3, [pc, #492]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7a      	ldr	r2, [pc, #488]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b78      	ldr	r3, [pc, #480]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a77      	ldr	r2, [pc, #476]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800357c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0xbc>
 800358e:	4b72      	ldr	r3, [pc, #456]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a71      	ldr	r2, [pc, #452]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6f      	ldr	r3, [pc, #444]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6e      	ldr	r2, [pc, #440]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 80035a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a67      	ldr	r2, [pc, #412]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd f8ca 	bl	8000760 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fd f8c6 	bl	8000760 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e200      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe4>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fd f8b6 	bl	8000760 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fd f8b2 	bl	8000760 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1ec      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x10c>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003626:	4b4c      	ldr	r3, [pc, #304]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x18c>
 800363e:	4b46      	ldr	r3, [pc, #280]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b43      	ldr	r3, [pc, #268]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x176>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1c0      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4939      	ldr	r1, [pc, #228]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b36      	ldr	r3, [pc, #216]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd f86b 	bl	8000760 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fd f867 	bl	8000760 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1a1      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4927      	ldr	r1, [pc, #156]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b26      	ldr	r3, [pc, #152]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd f84a 	bl	8000760 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fd f846 	bl	8000760 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e180      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03a      	beq.n	8003770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d019      	beq.n	8003736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <HAL_RCC_OscConfig+0x274>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003708:	f7fd f82a 	bl	8000760 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fd f826 	bl	8000760 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e160      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <HAL_RCC_OscConfig+0x26c>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800372e:	2001      	movs	r0, #1
 8003730:	f000 fa9c 	bl	8003c6c <RCC_Delay>
 8003734:	e01c      	b.n	8003770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <HAL_RCC_OscConfig+0x274>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fd f810 	bl	8000760 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003742:	e00f      	b.n	8003764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd f80c 	bl	8000760 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d908      	bls.n	8003764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e146      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	42420000 	.word	0x42420000
 8003760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b92      	ldr	r3, [pc, #584]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e9      	bne.n	8003744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a6 	beq.w	80038ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b8b      	ldr	r3, [pc, #556]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	4b88      	ldr	r3, [pc, #544]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4a87      	ldr	r2, [pc, #540]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003798:	61d3      	str	r3, [r2, #28]
 800379a:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b82      	ldr	r3, [pc, #520]	@ (80039b4 <HAL_RCC_OscConfig+0x4c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b7f      	ldr	r3, [pc, #508]	@ (80039b4 <HAL_RCC_OscConfig+0x4c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7e      	ldr	r2, [pc, #504]	@ (80039b4 <HAL_RCC_OscConfig+0x4c8>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fc ffcd 	bl	8000760 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7fc ffc9 	bl	8000760 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b64      	cmp	r3, #100	@ 0x64
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e103      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b75      	ldr	r3, [pc, #468]	@ (80039b4 <HAL_RCC_OscConfig+0x4c8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x312>
 80037f0:	4b6f      	ldr	r3, [pc, #444]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a6e      	ldr	r2, [pc, #440]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	e02d      	b.n	800385a <HAL_RCC_OscConfig+0x36e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003806:	4b6a      	ldr	r3, [pc, #424]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a69      	ldr	r2, [pc, #420]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6213      	str	r3, [r2, #32]
 8003812:	4b67      	ldr	r3, [pc, #412]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a66      	ldr	r2, [pc, #408]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
 800381e:	e01c      	b.n	800385a <HAL_RCC_OscConfig+0x36e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d10c      	bne.n	8003842 <HAL_RCC_OscConfig+0x356>
 8003828:	4b61      	ldr	r3, [pc, #388]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4a60      	ldr	r2, [pc, #384]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	6213      	str	r3, [r2, #32]
 8003834:	4b5e      	ldr	r3, [pc, #376]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a5d      	ldr	r2, [pc, #372]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e00b      	b.n	800385a <HAL_RCC_OscConfig+0x36e>
 8003842:	4b5b      	ldr	r3, [pc, #364]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a5a      	ldr	r2, [pc, #360]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	4b58      	ldr	r3, [pc, #352]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a57      	ldr	r2, [pc, #348]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d015      	beq.n	800388e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fc ff7d 	bl	8000760 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fc ff79 	bl	8000760 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e0b1      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	4b4b      	ldr	r3, [pc, #300]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ee      	beq.n	800386a <HAL_RCC_OscConfig+0x37e>
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fc ff67 	bl	8000760 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fc ff63 	bl	8000760 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e09b      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ac:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ee      	bne.n	8003896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b3c      	ldr	r3, [pc, #240]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4a3b      	ldr	r2, [pc, #236]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8087 	beq.w	80039e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d4:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d061      	beq.n	80039a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d146      	bne.n	8003976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b33      	ldr	r3, [pc, #204]	@ (80039b8 <HAL_RCC_OscConfig+0x4cc>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fc ff37 	bl	8000760 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fc ff33 	bl	8000760 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e06d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003908:	4b29      	ldr	r3, [pc, #164]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800391e:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4921      	ldr	r1, [pc, #132]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003930:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a19      	ldr	r1, [r3, #32]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	430b      	orrs	r3, r1
 8003942:	491b      	ldr	r1, [pc, #108]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fc ff07 	bl	8000760 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7fc ff03 	bl	8000760 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x46a>
 8003974:	e035      	b.n	80039e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <HAL_RCC_OscConfig+0x4cc>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fc fef0 	bl	8000760 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fc feec 	bl	8000760 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e026      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x498>
 80039a2:	e01e      	b.n	80039e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e019      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <HAL_RCC_OscConfig+0x500>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0d0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b67      	ldr	r3, [pc, #412]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4965      	ldr	r1, [pc, #404]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0b8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a4c:	4b59      	ldr	r3, [pc, #356]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a58      	ldr	r2, [pc, #352]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a64:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b50      	ldr	r3, [pc, #320]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	494d      	ldr	r1, [pc, #308]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d040      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d115      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b41      	ldr	r3, [pc, #260]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e073      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4936      	ldr	r1, [pc, #216]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7fc fe3e 	bl	8000760 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fc fe3a 	bl	8000760 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e053      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d210      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 0207 	bic.w	r2, r3, #7
 8003b26:	4922      	ldr	r1, [pc, #136]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4916      	ldr	r1, [pc, #88]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b6a:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490e      	ldr	r1, [pc, #56]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b7e:	f000 f821 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	490a      	ldr	r1, [pc, #40]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	5ccb      	ldrb	r3, [r1, r3]
 8003b92:	fa22 f303 	lsr.w	r3, r2, r3
 8003b96:	4a09      	ldr	r2, [pc, #36]	@ (8003bbc <HAL_RCC_ClockConfig+0x1cc>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fd9c 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	08008618 	.word	0x08008618
 8003bbc:	20000024 	.word	0x20000024
 8003bc0:	20000028 	.word	0x20000028

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bde:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x36>
 8003bf2:	e027      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bf6:	613b      	str	r3, [r7, #16]
      break;
 8003bf8:	e027      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
 8003c06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d010      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c12:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	0c5b      	lsrs	r3, r3, #17
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	4a11      	ldr	r2, [pc, #68]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a0d      	ldr	r2, [pc, #52]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c26:	fb03 f202 	mul.w	r2, r3, r2
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e004      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	613b      	str	r3, [r7, #16]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c46:	613b      	str	r3, [r7, #16]
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	693b      	ldr	r3, [r7, #16]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	007a1200 	.word	0x007a1200
 8003c60:	08008628 	.word	0x08008628
 8003c64:	08008638 	.word	0x08008638
 8003c68:	003d0900 	.word	0x003d0900

08003c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <RCC_Delay+0x34>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca4 <RCC_Delay+0x38>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a5b      	lsrs	r3, r3, #9
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c88:	bf00      	nop
  }
  while (Delay --);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e5a      	subs	r2, r3, #1
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f9      	bne.n	8003c88 <RCC_Delay+0x1c>
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	20000024 	.word	0x20000024
 8003ca4:	10624dd3 	.word	0x10624dd3

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d07d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b46      	ldr	r3, [pc, #280]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfc:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a42      	ldr	r2, [pc, #264]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d08:	f7fc fd2a 	bl	8000760 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fc fd26 	bl	8000760 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e06d      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b3a      	ldr	r3, [pc, #232]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d2e:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d02e      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d027      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d56:	4b2e      	ldr	r3, [pc, #184]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d62:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fc fcf5 	bl	8000760 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fc fcf1 	bl	8000760 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e036      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ee      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4917      	ldr	r1, [pc, #92]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b14      	ldr	r3, [pc, #80]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a13      	ldr	r2, [pc, #76]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	490b      	ldr	r1, [pc, #44]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	42420440 	.word	0x42420440

08003e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e3e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003e42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e62:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003e66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	4638      	mov	r0, r7
 8003eb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b09d      	sub	sp, #116	@ 0x74
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	78db      	ldrb	r3, [r3, #3]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d81f      	bhi.n	8003f52 <USB_ActivateEndpoint+0x72>
 8003f12:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <USB_ActivateEndpoint+0x38>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f5b 	.word	0x08003f5b
 8003f24:	08003f37 	.word	0x08003f37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f34:	e012      	b.n	8003f5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f3a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003f3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f42:	e00b      	b.n	8003f5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f50:	e004      	b.n	8003f5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003f58:	e000      	b.n	8003f5c <USB_ActivateEndpoint+0x7c>
      break;
 8003f5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	7b1b      	ldrb	r3, [r3, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 8178 	bne.w	80042bc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8084 	beq.w	80040de <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	011a      	lsls	r2, r3, #4
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	88db      	ldrh	r3, [r3, #6]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	827b      	strh	r3, [r7, #18]
 8004018:	8a7b      	ldrh	r3, [r7, #18]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <USB_ActivateEndpoint+0x17a>
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004038:	823b      	strh	r3, [r7, #16]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	8a3b      	ldrh	r3, [r7, #16]
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	78db      	ldrb	r3, [r3, #3]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d020      	beq.n	80040a4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004078:	81bb      	strh	r3, [r7, #12]
 800407a:	89bb      	ldrh	r3, [r7, #12]
 800407c:	f083 0320 	eor.w	r3, r3, #32
 8004080:	81bb      	strh	r3, [r7, #12]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	89bb      	ldrh	r3, [r7, #12]
 800408e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800409a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800409e:	b29b      	uxth	r3, r3
 80040a0:	8013      	strh	r3, [r2, #0]
 80040a2:	e2d5      	b.n	8004650 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ba:	81fb      	strh	r3, [r7, #14]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	441a      	add	r2, r3
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
 80040dc:	e2b8      	b.n	8004650 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	4413      	add	r3, r2
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	011a      	lsls	r2, r3, #4
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	88db      	ldrh	r3, [r3, #6]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	4413      	add	r3, r2
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	4413      	add	r3, r2
 8004130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	b29a      	uxth	r2, r3
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b3e      	cmp	r3, #62	@ 0x3e
 800414c:	d91d      	bls.n	800418a <USB_ActivateEndpoint+0x2aa>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <USB_ActivateEndpoint+0x288>
 8004162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004164:	3b01      	subs	r3, #1
 8004166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29a      	uxth	r2, r3
 800416e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004170:	b29b      	uxth	r3, r3
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	b29b      	uxth	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b29b      	uxth	r3, r3
 800417a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004182:	b29a      	uxth	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e026      	b.n	80041d8 <USB_ActivateEndpoint+0x2f8>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <USB_ActivateEndpoint+0x2c8>
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	e017      	b.n	80041d8 <USB_ActivateEndpoint+0x2f8>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <USB_ActivateEndpoint+0x2e2>
 80041bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041be:	3301      	adds	r3, #1
 80041c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80041e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <USB_ActivateEndpoint+0x348>
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004206:	843b      	strh	r3, [r7, #32]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	8c3b      	ldrh	r3, [r7, #32]
 8004214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800421c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d124      	bne.n	800427a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	83bb      	strh	r3, [r7, #28]
 8004248:	8bbb      	ldrh	r3, [r7, #28]
 800424a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800424e:	83bb      	strh	r3, [r7, #28]
 8004250:	8bbb      	ldrh	r3, [r7, #28]
 8004252:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004256:	83bb      	strh	r3, [r7, #28]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	8bbb      	ldrh	r3, [r7, #28]
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800426c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]
 8004278:	e1ea      	b.n	8004650 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800428c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004290:	83fb      	strh	r3, [r7, #30]
 8004292:	8bfb      	ldrh	r3, [r7, #30]
 8004294:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004298:	83fb      	strh	r3, [r7, #30]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]
 80042ba:	e1c9      	b.n	8004650 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	78db      	ldrb	r3, [r3, #3]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11e      	bne.n	8004302 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80042ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80042f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8013      	strh	r3, [r2, #0]
 8004300:	e01d      	b.n	800433e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004318:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800432a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800434e:	4413      	add	r3, r2
 8004350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800435a:	4413      	add	r3, r2
 800435c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	891b      	ldrh	r3, [r3, #8]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	b29b      	uxth	r3, r3
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	657b      	str	r3, [r7, #84]	@ 0x54
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004382:	4413      	add	r3, r2
 8004384:	657b      	str	r3, [r7, #84]	@ 0x54
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	011a      	lsls	r2, r3, #4
 800438c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438e:	4413      	add	r3, r2
 8004390:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004394:	653b      	str	r3, [r7, #80]	@ 0x50
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	895b      	ldrh	r3, [r3, #10]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 8093 	bne.w	80044d6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80043c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <USB_ActivateEndpoint+0x524>
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004412:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <USB_ActivateEndpoint+0x574>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800446c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800446e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004472:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004474:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004476:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800447a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
 80044d4:	e0bc      	b.n	8004650 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80044e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80044ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01d      	beq.n	800452e <USB_ActivateEndpoint+0x64e>
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004508:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004522:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800453e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01d      	beq.n	8004586 <USB_ActivateEndpoint+0x6a6>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004560:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004582:	b29b      	uxth	r3, r3
 8004584:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	78db      	ldrb	r3, [r3, #3]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d024      	beq.n	80045d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80045a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80045ac:	f083 0320 	eor.w	r3, r3, #32
 80045b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004650:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004654:	4618      	mov	r0, r3
 8004656:	3774      	adds	r7, #116	@ 0x74
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004660:	b480      	push	{r7}
 8004662:	b08d      	sub	sp, #52	@ 0x34
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	7b1b      	ldrb	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 808e 	bne.w	8004790 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d044      	beq.n	8004706 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	81bb      	strh	r3, [r7, #12]
 800468a:	89bb      	ldrh	r3, [r7, #12]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <USB_DeactivateEndpoint+0x6c>
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	817b      	strh	r3, [r7, #10]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	897b      	ldrh	r3, [r7, #10]
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e2:	813b      	strh	r3, [r7, #8]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
 8004704:	e192      	b.n	8004a2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	827b      	strh	r3, [r7, #18]
 8004714:	8a7b      	ldrh	r3, [r7, #18]
 8004716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01b      	beq.n	8004756 <USB_DeactivateEndpoint+0xf6>
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004734:	823b      	strh	r3, [r7, #16]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	8a3b      	ldrh	r3, [r7, #16]
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800474e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476c:	81fb      	strh	r3, [r7, #14]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]
 800478e:	e14d      	b.n	8004a2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 80a5 	bne.w	80048e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	843b      	strh	r3, [r7, #32]
 80047a8:	8c3b      	ldrh	r3, [r7, #32]
 80047aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01b      	beq.n	80047ea <USB_DeactivateEndpoint+0x18a>
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c8:	83fb      	strh	r3, [r7, #30]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	441a      	add	r2, r3
 80047d4:	8bfb      	ldrh	r3, [r7, #30]
 80047d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	83bb      	strh	r3, [r7, #28]
 80047f8:	8bbb      	ldrh	r3, [r7, #28]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01b      	beq.n	800483a <USB_DeactivateEndpoint+0x1da>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004818:	837b      	strh	r3, [r7, #26]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	8b7b      	ldrh	r3, [r7, #26]
 8004826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004832:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	833b      	strh	r3, [r7, #24]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	8b3b      	ldrh	r3, [r7, #24]
 800485e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	82fb      	strh	r3, [r7, #22]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8afb      	ldrh	r3, [r7, #22]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c0:	82bb      	strh	r3, [r7, #20]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	8abb      	ldrh	r3, [r7, #20]
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
 80048e2:	e0a3      	b.n	8004a2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80048f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80048f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <USB_DeactivateEndpoint+0x2d4>
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800492c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004942:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <USB_DeactivateEndpoint+0x324>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	441a      	add	r2, r3
 8004a16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3734      	adds	r7, #52	@ 0x34
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0c2      	sub	sp, #264	@ 0x108
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a46:	6018      	str	r0, [r3, #0]
 8004a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 86b7 	bne.w	80057d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d908      	bls.n	8004a92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a90:	e007      	b.n	8004aa2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	7b1b      	ldrb	r3, [r3, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d13a      	bne.n	8004b28 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	88da      	ldrh	r2, [r3, #6]
 8004aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ad4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ad8:	6800      	ldr	r0, [r0, #0]
 8004ada:	f001 fc9c 	bl	8006416 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	011a      	lsls	r2, r3, #4
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	f000 be1f 	b.w	8005766 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	78db      	ldrb	r3, [r3, #3]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f040 8462 	bne.w	80053fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	f240 83df 	bls.w	8005316 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc4:	1ad2      	subs	r2, r2, r3
 8004bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 81c7 	beq.w	8004f88 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d177      	bne.n	8004d06 <USB_EPStartXfer+0x2ce>
 8004c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	4413      	add	r3, r2
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	011a      	lsls	r2, r3, #4
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c68:	d921      	bls.n	8004cae <USB_EPStartXfer+0x276>
 8004c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <USB_EPStartXfer+0x252>
 8004c80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e050      	b.n	8004d50 <USB_EPStartXfer+0x318>
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <USB_EPStartXfer+0x294>
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e041      	b.n	8004d50 <USB_EPStartXfer+0x318>
 8004ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <USB_EPStartXfer+0x2b4>
 8004ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	e024      	b.n	8004d50 <USB_EPStartXfer+0x318>
 8004d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d11c      	bne.n	8004d50 <USB_EPStartXfer+0x318>
 8004d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	4413      	add	r3, r2
 8004d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	011a      	lsls	r2, r3, #4
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	4413      	add	r3, r2
 8004d40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	895b      	ldrh	r3, [r3, #10]
 8004d5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6959      	ldr	r1, [r3, #20]
 8004d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d76:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d7a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	f001 fb49 	bl	8006416 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d94:	441a      	add	r2, r3
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d90f      	bls.n	8004dde <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	621a      	str	r2, [r3, #32]
 8004ddc:	e00e      	b.n	8004dfc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d177      	bne.n	8004efc <USB_EPStartXfer+0x4c4>
 8004e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	011a      	lsls	r2, r3, #4
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e5e:	d921      	bls.n	8004ea4 <USB_EPStartXfer+0x46c>
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <USB_EPStartXfer+0x448>
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e056      	b.n	8004f52 <USB_EPStartXfer+0x51a>
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <USB_EPStartXfer+0x48a>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	e047      	b.n	8004f52 <USB_EPStartXfer+0x51a>
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <USB_EPStartXfer+0x4aa>
 8004ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004edc:	3301      	adds	r3, #1
 8004ede:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	029b      	lsls	r3, r3, #10
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e02a      	b.n	8004f52 <USB_EPStartXfer+0x51a>
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d122      	bne.n	8004f52 <USB_EPStartXfer+0x51a>
 8004f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	623b      	str	r3, [r7, #32]
 8004f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	011a      	lsls	r2, r3, #4
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	891b      	ldrh	r3, [r3, #8]
 8004f5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6959      	ldr	r1, [r3, #20]
 8004f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f80:	6800      	ldr	r0, [r0, #0]
 8004f82:	f001 fa48 	bl	8006416 <USB_WritePMA>
 8004f86:	e3ee      	b.n	8005766 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d177      	bne.n	8005088 <USB_EPStartXfer+0x650>
 8004f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb8:	4413      	add	r3, r2
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	011a      	lsls	r2, r3, #4
 8004fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fea:	d921      	bls.n	8005030 <USB_EPStartXfer+0x5f8>
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <USB_EPStartXfer+0x5d4>
 8005002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005006:	3b01      	subs	r3, #1
 8005008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800500c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29a      	uxth	r2, r3
 8005012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005016:	b29b      	uxth	r3, r3
 8005018:	029b      	lsls	r3, r3, #10
 800501a:	b29b      	uxth	r3, r3
 800501c:	4313      	orrs	r3, r2
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005028:	b29a      	uxth	r2, r3
 800502a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e056      	b.n	80050de <USB_EPStartXfer+0x6a6>
 8005030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <USB_EPStartXfer+0x616>
 8005038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005046:	b29a      	uxth	r2, r3
 8005048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e047      	b.n	80050de <USB_EPStartXfer+0x6a6>
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <USB_EPStartXfer+0x636>
 8005064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005068:	3301      	adds	r3, #1
 800506a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800506e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29a      	uxth	r2, r3
 8005074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005078:	b29b      	uxth	r3, r3
 800507a:	029b      	lsls	r3, r3, #10
 800507c:	b29b      	uxth	r3, r3
 800507e:	4313      	orrs	r3, r2
 8005080:	b29a      	uxth	r2, r3
 8005082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e02a      	b.n	80050de <USB_EPStartXfer+0x6a6>
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d122      	bne.n	80050de <USB_EPStartXfer+0x6a6>
 8005098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b8:	4413      	add	r3, r2
 80050ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80050bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	891b      	ldrh	r3, [r3, #8]
 80050ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6959      	ldr	r1, [r3, #20]
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005104:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005108:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f001 f982 	bl	8006416 <USB_WritePMA>
            ep->xfer_buff += len;
 8005112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	441a      	add	r2, r3
 8005124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d90f      	bls.n	800516c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	1ad2      	subs	r2, r2, r3
 800515e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	621a      	str	r2, [r3, #32]
 800516a:	e00e      	b.n	800518a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800518a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	643b      	str	r3, [r7, #64]	@ 0x40
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d177      	bne.n	8005296 <USB_EPStartXfer+0x85e>
 80051a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	4413      	add	r3, r2
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	011a      	lsls	r2, r3, #4
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	4413      	add	r3, r2
 80051dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80051f8:	d921      	bls.n	800523e <USB_EPStartXfer+0x806>
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <USB_EPStartXfer+0x7e2>
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	3b01      	subs	r3, #1
 8005216:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29a      	uxth	r2, r3
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29b      	uxth	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005236:	b29a      	uxth	r2, r3
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	801a      	strh	r2, [r3, #0]
 800523c:	e050      	b.n	80052e0 <USB_EPStartXfer+0x8a8>
 800523e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <USB_EPStartXfer+0x824>
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005254:	b29a      	uxth	r2, r3
 8005256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e041      	b.n	80052e0 <USB_EPStartXfer+0x8a8>
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <USB_EPStartXfer+0x844>
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	3301      	adds	r3, #1
 8005278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800527c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	b29b      	uxth	r3, r3
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	b29b      	uxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e024      	b.n	80052e0 <USB_EPStartXfer+0x8a8>
 8005296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d11c      	bne.n	80052e0 <USB_EPStartXfer+0x8a8>
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ba:	4413      	add	r3, r2
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	011a      	lsls	r2, r3, #4
 80052cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	895b      	ldrh	r3, [r3, #10]
 80052ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6959      	ldr	r1, [r3, #20]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	b29b      	uxth	r3, r3
 8005302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005306:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800530a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	f001 f881 	bl	8006416 <USB_WritePMA>
 8005314:	e227      	b.n	8005766 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800538e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053a2:	4413      	add	r3, r2
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	011a      	lsls	r2, r3, #4
 80053b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053b6:	4413      	add	r3, r2
 80053b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	891b      	ldrh	r3, [r3, #8]
 80053d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6959      	ldr	r1, [r3, #20]
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053f6:	6800      	ldr	r0, [r0, #0]
 80053f8:	f001 f80d 	bl	8006416 <USB_WritePMA>
 80053fc:	e1b3      	b.n	8005766 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80053fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800541c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80c6 	beq.w	80055d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d177      	bne.n	8005550 <USB_EPStartXfer+0xb18>
 8005460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800546c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005480:	4413      	add	r3, r2
 8005482:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	011a      	lsls	r2, r3, #4
 8005492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005494:	4413      	add	r3, r2
 8005496:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800549a:	667b      	str	r3, [r7, #100]	@ 0x64
 800549c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b2:	d921      	bls.n	80054f8 <USB_EPStartXfer+0xac0>
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <USB_EPStartXfer+0xa9c>
 80054ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054de:	b29b      	uxth	r3, r3
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e050      	b.n	800559a <USB_EPStartXfer+0xb62>
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <USB_EPStartXfer+0xade>
 8005500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e041      	b.n	800559a <USB_EPStartXfer+0xb62>
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <USB_EPStartXfer+0xafe>
 800552c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005530:	3301      	adds	r3, #1
 8005532:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e024      	b.n	800559a <USB_EPStartXfer+0xb62>
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d11c      	bne.n	800559a <USB_EPStartXfer+0xb62>
 8005560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005574:	4413      	add	r3, r2
 8005576:	673b      	str	r3, [r7, #112]	@ 0x70
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005588:	4413      	add	r3, r2
 800558a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800558e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005594:	b29a      	uxth	r2, r3
 8005596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005598:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800559a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	895b      	ldrh	r3, [r3, #10]
 80055a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055c8:	6800      	ldr	r0, [r0, #0]
 80055ca:	f000 ff24 	bl	8006416 <USB_WritePMA>
 80055ce:	e0ca      	b.n	8005766 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d177      	bne.n	80056d0 <USB_EPStartXfer+0xc98>
 80055e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005600:	4413      	add	r3, r2
 8005602:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005614:	4413      	add	r3, r2
 8005616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800561a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005626:	b29a      	uxth	r2, r3
 8005628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	2b3e      	cmp	r3, #62	@ 0x3e
 8005632:	d921      	bls.n	8005678 <USB_EPStartXfer+0xc40>
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <USB_EPStartXfer+0xc1c>
 800564a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800564e:	3b01      	subs	r3, #1
 8005650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29a      	uxth	r2, r3
 800565a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800565e:	b29b      	uxth	r3, r3
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	b29b      	uxth	r3, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e05c      	b.n	8005732 <USB_EPStartXfer+0xcfa>
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <USB_EPStartXfer+0xc5e>
 8005680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568e:	b29a      	uxth	r2, r3
 8005690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e04d      	b.n	8005732 <USB_EPStartXfer+0xcfa>
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <USB_EPStartXfer+0xc7e>
 80056ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80056b0:	3301      	adds	r3, #1
 80056b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	029b      	lsls	r3, r3, #10
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	e030      	b.n	8005732 <USB_EPStartXfer+0xcfa>
 80056d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d128      	bne.n	8005732 <USB_EPStartXfer+0xcfa>
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005704:	4413      	add	r3, r2
 8005706:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800570a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005722:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005730:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	891b      	ldrh	r3, [r3, #8]
 800573e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	b29b      	uxth	r3, r3
 8005754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005758:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800575c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005760:	6800      	ldr	r0, [r0, #0]
 8005762:	f000 fe58 	bl	8006416 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578c:	817b      	strh	r3, [r7, #10]
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	f083 0310 	eor.w	r3, r3, #16
 8005794:	817b      	strh	r3, [r7, #10]
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	f083 0320 	eor.w	r3, r3, #32
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
 80057ce:	f000 bcde 	b.w	800618e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	7b1b      	ldrb	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 80bb 	bne.w	800595a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d917      	bls.n	8005830 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	619a      	str	r2, [r3, #24]
 800582e:	e00e      	b.n	800584e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800585c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005872:	4413      	add	r3, r2
 8005874:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	011a      	lsls	r2, r3, #4
 8005886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800588a:	4413      	add	r3, r2
 800588c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80058ae:	d924      	bls.n	80058fa <USB_EPStartXfer+0xec2>
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <USB_EPStartXfer+0xe98>
 80058c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80058dc:	b29b      	uxth	r3, r3
 80058de:	029b      	lsls	r3, r3, #10
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	f000 bc10 	b.w	800611a <USB_EPStartXfer+0x16e2>
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <USB_EPStartXfer+0xee4>
 8005902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	e3fe      	b.n	800611a <USB_EPStartXfer+0x16e2>
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <USB_EPStartXfer+0xf04>
 8005932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29a      	uxth	r2, r3
 8005944:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29b      	uxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b29a      	uxth	r2, r3
 8005952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e3df      	b.n	800611a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b02      	cmp	r3, #2
 8005968:	f040 8218 	bne.w	8005d9c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 809d 	bne.w	8005ab8 <USB_EPStartXfer+0x1080>
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800599a:	b29b      	uxth	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059a2:	4413      	add	r3, r2
 80059a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	011a      	lsls	r2, r3, #4
 80059b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80059e6:	d92b      	bls.n	8005a40 <USB_EPStartXfer+0x1008>
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <USB_EPStartXfer+0xfe0>
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a12:	3b01      	subs	r3, #1
 8005a14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	029b      	lsls	r3, r3, #10
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e070      	b.n	8005b22 <USB_EPStartXfer+0x10ea>
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10c      	bne.n	8005a6a <USB_EPStartXfer+0x1032>
 8005a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e05b      	b.n	8005b22 <USB_EPStartXfer+0x10ea>
 8005a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <USB_EPStartXfer+0x1062>
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a94:	3301      	adds	r3, #1
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e034      	b.n	8005b22 <USB_EPStartXfer+0x10ea>
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d12c      	bne.n	8005b22 <USB_EPStartXfer+0x10ea>
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005aec:	4413      	add	r3, r2
 8005aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	011a      	lsls	r2, r3, #4
 8005b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 809d 	bne.w	8005c7c <USB_EPStartXfer+0x1244>
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b66:	4413      	add	r3, r2
 8005b68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	011a      	lsls	r2, r3, #4
 8005b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005baa:	d92b      	bls.n	8005c04 <USB_EPStartXfer+0x11cc>
 8005bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <USB_EPStartXfer+0x11a4>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	029b      	lsls	r3, r3, #10
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e069      	b.n	8005cd8 <USB_EPStartXfer+0x12a0>
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10c      	bne.n	8005c2e <USB_EPStartXfer+0x11f6>
 8005c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e054      	b.n	8005cd8 <USB_EPStartXfer+0x12a0>
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <USB_EPStartXfer+0x1226>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	4313      	orrs	r3, r2
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	e02d      	b.n	8005cd8 <USB_EPStartXfer+0x12a0>
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d125      	bne.n	8005cd8 <USB_EPStartXfer+0x12a0>
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cd6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8218 	beq.w	800611a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <USB_EPStartXfer+0x12ea>
 8005d16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f040 81f5 	bne.w	800611a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 81ee 	bne.w	800611a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d64:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	8013      	strh	r3, [r2, #0]
 8005d9a:	e1be      	b.n	800611a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	78db      	ldrb	r3, [r3, #3]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	f040 81b4 	bne.w	8006116 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d917      	bls.n	8005dfa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	619a      	str	r2, [r3, #24]
 8005df8:	e00e      	b.n	8005e18 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2200      	movs	r2, #0
 8005e16:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 8085 	bne.w	8005f34 <USB_EPStartXfer+0x14fc>
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e4e:	4413      	add	r3, r2
 8005e50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	011a      	lsls	r2, r3, #4
 8005e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e8a:	d923      	bls.n	8005ed4 <USB_EPStartXfer+0x149c>
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <USB_EPStartXfer+0x1474>
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	029b      	lsls	r3, r3, #10
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	e060      	b.n	8005f96 <USB_EPStartXfer+0x155e>
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <USB_EPStartXfer+0x14be>
 8005edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e04f      	b.n	8005f96 <USB_EPStartXfer+0x155e>
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <USB_EPStartXfer+0x14de>
 8005f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f10:	3301      	adds	r3, #1
 8005f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e030      	b.n	8005f96 <USB_EPStartXfer+0x155e>
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d128      	bne.n	8005f96 <USB_EPStartXfer+0x155e>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f68:	4413      	add	r3, r2
 8005f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 8085 	bne.w	80060c0 <USB_EPStartXfer+0x1688>
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005fda:	4413      	add	r3, r2
 8005fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006008:	b29a      	uxth	r2, r3
 800600a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	2b3e      	cmp	r3, #62	@ 0x3e
 8006016:	d923      	bls.n	8006060 <USB_EPStartXfer+0x1628>
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <USB_EPStartXfer+0x1600>
 800602e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006032:	3b01      	subs	r3, #1
 8006034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29a      	uxth	r2, r3
 8006040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006044:	b29b      	uxth	r3, r3
 8006046:	029b      	lsls	r3, r3, #10
 8006048:	b29b      	uxth	r3, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e05c      	b.n	800611a <USB_EPStartXfer+0x16e2>
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10c      	bne.n	8006082 <USB_EPStartXfer+0x164a>
 8006068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e04b      	b.n	800611a <USB_EPStartXfer+0x16e2>
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <USB_EPStartXfer+0x166a>
 8006098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800609c:	3301      	adds	r3, #1
 800609e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e02c      	b.n	800611a <USB_EPStartXfer+0x16e2>
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d124      	bne.n	800611a <USB_EPStartXfer+0x16e2>
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060e6:	4413      	add	r3, r2
 80060e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060fe:	4413      	add	r3, r2
 8006100:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	b29a      	uxth	r2, r3
 800610e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e001      	b.n	800611a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e03a      	b.n	8006190 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800611a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800613c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006140:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006144:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006148:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800614c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006150:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006154:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006158:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d020      	beq.n	80061ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c2:	81bb      	strh	r3, [r7, #12]
 80061c4:	89bb      	ldrh	r3, [r7, #12]
 80061c6:	f083 0310 	eor.w	r3, r3, #16
 80061ca:	81bb      	strh	r3, [r7, #12]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	89bb      	ldrh	r3, [r7, #12]
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]
 80061ec:	e01f      	b.n	800622e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	81fb      	strh	r3, [r7, #14]
 8006206:	89fb      	ldrh	r3, [r7, #14]
 8006208:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800620c:	81fb      	strh	r3, [r7, #14]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	7b1b      	ldrb	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f040 809d 	bne.w	8006388 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d04c      	beq.n	80062f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	823b      	strh	r3, [r7, #16]
 8006264:	8a3b      	ldrh	r3, [r7, #16]
 8006266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01b      	beq.n	80062a6 <USB_EPClearStall+0x6c>
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006284:	81fb      	strh	r3, [r7, #14]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	441a      	add	r2, r3
 8006290:	89fb      	ldrh	r3, [r7, #14]
 8006292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800629a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800629e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d06c      	beq.n	8006388 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c4:	81bb      	strh	r3, [r7, #12]
 80062c6:	89bb      	ldrh	r3, [r7, #12]
 80062c8:	f083 0320 	eor.w	r3, r3, #32
 80062cc:	81bb      	strh	r3, [r7, #12]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	89bb      	ldrh	r3, [r7, #12]
 80062da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	8013      	strh	r3, [r2, #0]
 80062ee:	e04b      	b.n	8006388 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	82fb      	strh	r3, [r7, #22]
 80062fe:	8afb      	ldrh	r3, [r7, #22]
 8006300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <USB_EPClearStall+0x106>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631e:	82bb      	strh	r3, [r7, #20]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8abb      	ldrh	r3, [r7, #20]
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006334:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006356:	827b      	strh	r3, [r7, #18]
 8006358:	8a7b      	ldrh	r3, [r7, #18]
 800635a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800635e:	827b      	strh	r3, [r7, #18]
 8006360:	8a7b      	ldrh	r3, [r7, #18]
 8006362:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006366:	827b      	strh	r3, [r7, #18]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8a7b      	ldrh	r3, [r7, #18]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2280      	movs	r2, #128	@ 0x80
 80063aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr

080063ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006416:	b480      	push	{r7}
 8006418:	b08b      	sub	sp, #44	@ 0x2c
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	4611      	mov	r1, r2
 8006422:	461a      	mov	r2, r3
 8006424:	460b      	mov	r3, r1
 8006426:	80fb      	strh	r3, [r7, #6]
 8006428:	4613      	mov	r3, r2
 800642a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	3301      	adds	r3, #1
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006448:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
 800644e:	e01f      	b.n	8006490 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3301      	adds	r3, #1
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	b21b      	sxth	r3, r3
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	b21a      	sxth	r2, r3
 8006462:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006466:	4313      	orrs	r3, r2
 8006468:	b21b      	sxth	r3, r3
 800646a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	8a7a      	ldrh	r2, [r7, #18]
 8006470:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	3302      	adds	r3, #2
 8006476:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	3302      	adds	r3, #2
 800647c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	3b01      	subs	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1dc      	bne.n	8006450 <USB_WritePMA+0x3a>
  }
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	372c      	adds	r7, #44	@ 0x2c
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b08b      	sub	sp, #44	@ 0x2c
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	4611      	mov	r1, r2
 80064ae:	461a      	mov	r2, r3
 80064b0:	460b      	mov	r3, r1
 80064b2:	80fb      	strh	r3, [r7, #6]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064b8:	88bb      	ldrh	r3, [r7, #4]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	005a      	lsls	r2, r3, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064da:	e01b      	b.n	8006514 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	3302      	adds	r3, #2
 80064e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	3301      	adds	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3301      	adds	r3, #1
 8006506:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	3302      	adds	r3, #2
 800650c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	3b01      	subs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e0      	bne.n	80064dc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800651a:	88bb      	ldrh	r3, [r7, #4]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	701a      	strb	r2, [r3, #0]
  }
}
 8006536:	bf00      	nop
 8006538:	372c      	adds	r7, #44	@ 0x2c
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7c1b      	ldrb	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d115      	bne.n	8006584 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800655c:	2202      	movs	r2, #2
 800655e:	2181      	movs	r1, #129	@ 0x81
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 fe8a 	bl	800827a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800656c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006570:	2202      	movs	r2, #2
 8006572:	2101      	movs	r1, #1
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fe80 	bl	800827a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006582:	e012      	b.n	80065aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006584:	2340      	movs	r3, #64	@ 0x40
 8006586:	2202      	movs	r2, #2
 8006588:	2181      	movs	r1, #129	@ 0x81
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fe75 	bl	800827a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006596:	2340      	movs	r3, #64	@ 0x40
 8006598:	2202      	movs	r2, #2
 800659a:	2101      	movs	r1, #1
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fe6c 	bl	800827a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065aa:	2308      	movs	r3, #8
 80065ac:	2203      	movs	r2, #3
 80065ae:	2182      	movs	r1, #130	@ 0x82
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fe62 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065bc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065c0:	f001 ff82 	bl	80084c8 <USBD_static_malloc>
 80065c4:	4602      	mov	r2, r0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	e026      	b.n	800662a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7c1b      	ldrb	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800660c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 ff21 	bl	800845a <USBD_LL_PrepareReceive>
 8006618:	e007      	b.n	800662a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006620:	2340      	movs	r3, #64	@ 0x40
 8006622:	2101      	movs	r1, #1
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 ff18 	bl	800845a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006644:	2181      	movs	r1, #129	@ 0x81
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fe3d 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006652:	2101      	movs	r1, #1
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fe36 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006662:	2182      	movs	r1, #130	@ 0x82
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fe2e 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800668a:	4618      	mov	r0, r3
 800668c:	f001 ff28 	bl	80084e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d039      	beq.n	8006740 <USBD_CDC_Setup+0x9e>
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d17f      	bne.n	80067d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d029      	beq.n	800672c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da11      	bge.n	8006706 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80066ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	88d2      	ldrh	r2, [r2, #6]
 80066f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066f6:	6939      	ldr	r1, [r7, #16]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	88db      	ldrh	r3, [r3, #6]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fa06 	bl	8007b10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006704:	e06b      	b.n	80067de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	785a      	ldrb	r2, [r3, #1]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	88db      	ldrh	r3, [r3, #6]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800671c:	6939      	ldr	r1, [r7, #16]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	88db      	ldrh	r3, [r3, #6]
 8006722:	461a      	mov	r2, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fa21 	bl	8007b6c <USBD_CtlPrepareRx>
      break;
 800672a:	e058      	b.n	80067de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	7850      	ldrb	r0, [r2, #1]
 8006738:	2200      	movs	r2, #0
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	4798      	blx	r3
      break;
 800673e:	e04e      	b.n	80067de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b0b      	cmp	r3, #11
 8006746:	d02e      	beq.n	80067a6 <USBD_CDC_Setup+0x104>
 8006748:	2b0b      	cmp	r3, #11
 800674a:	dc38      	bgt.n	80067be <USBD_CDC_Setup+0x11c>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <USBD_CDC_Setup+0xb4>
 8006750:	2b0a      	cmp	r3, #10
 8006752:	d014      	beq.n	800677e <USBD_CDC_Setup+0xdc>
 8006754:	e033      	b.n	80067be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800675c:	2b03      	cmp	r3, #3
 800675e:	d107      	bne.n	8006770 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	2202      	movs	r2, #2
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 f9d1 	bl	8007b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800676e:	e02e      	b.n	80067ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 f962 	bl	8007a3c <USBD_CtlError>
            ret = USBD_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	75fb      	strb	r3, [r7, #23]
          break;
 800677c:	e027      	b.n	80067ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006784:	2b03      	cmp	r3, #3
 8006786:	d107      	bne.n	8006798 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006788:	f107 030f 	add.w	r3, r7, #15
 800678c:	2201      	movs	r2, #1
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f9bd 	bl	8007b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006796:	e01a      	b.n	80067ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f94e 	bl	8007a3c <USBD_CtlError>
            ret = USBD_FAIL;
 80067a0:	2302      	movs	r3, #2
 80067a2:	75fb      	strb	r3, [r7, #23]
          break;
 80067a4:	e013      	b.n	80067ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d00d      	beq.n	80067cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f942 	bl	8007a3c <USBD_CtlError>
            ret = USBD_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067bc:	e006      	b.n	80067cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f93b 	bl	8007a3c <USBD_CtlError>
          ret = USBD_FAIL;
 80067c6:	2302      	movs	r3, #2
 80067c8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ca:	e000      	b.n	80067ce <USBD_CDC_Setup+0x12c>
          break;
 80067cc:	bf00      	nop
      }
      break;
 80067ce:	e006      	b.n	80067de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 f932 	bl	8007a3c <USBD_CtlError>
      ret = USBD_FAIL;
 80067d8:	2302      	movs	r3, #2
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	bf00      	nop
  }

  return ret;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006802:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d03a      	beq.n	8006884 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	331c      	adds	r3, #28
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d029      	beq.n	8006878 <USBD_CDC_DataIn+0x90>
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	331c      	adds	r3, #28
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	78f9      	ldrb	r1, [r7, #3]
 8006838:	68b8      	ldr	r0, [r7, #8]
 800683a:	460b      	mov	r3, r1
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4403      	add	r3, r0
 8006844:	3320      	adds	r3, #32
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	fbb2 f1f3 	udiv	r1, r2, r3
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d110      	bne.n	8006878 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	331c      	adds	r3, #28
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800686a:	78f9      	ldrb	r1, [r7, #3]
 800686c:	2300      	movs	r3, #0
 800686e:	2200      	movs	r2, #0
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fdcf 	bl	8008414 <USBD_LL_Transmit>
 8006876:	e003      	b.n	8006880 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fdfa 	bl	80084a0 <USBD_LL_GetRxDataSize>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80068d2:	4611      	mov	r1, r2
 80068d4:	4798      	blx	r3

    return USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d014      	beq.n	8006928 <USBD_CDC_EP0_RxReady+0x44>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006904:	2bff      	cmp	r3, #255	@ 0xff
 8006906:	d00f      	beq.n	8006928 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006916:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800691e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	22ff      	movs	r2, #255	@ 0xff
 8006924:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2243      	movs	r2, #67	@ 0x43
 8006940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006942:	4b03      	ldr	r3, [pc, #12]	@ (8006950 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	200000b8 	.word	0x200000b8

08006954 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2243      	movs	r2, #67	@ 0x43
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006962:	4b03      	ldr	r3, [pc, #12]	@ (8006970 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000074 	.word	0x20000074

08006974 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2243      	movs	r2, #67	@ 0x43
 8006980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006982:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200000fc 	.word	0x200000fc

08006994 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	220a      	movs	r2, #10
 80069a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069a2:	4b03      	ldr	r3, [pc, #12]	@ (80069b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000030 	.word	0x20000030

080069b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069be:	2302      	movs	r3, #2
 80069c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01c      	beq.n	8006a8c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d115      	bne.n	8006a88 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2181      	movs	r1, #129	@ 0x81
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fcc8 	bl	8008414 <USBD_LL_Transmit>

      return USBD_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e002      	b.n	8006a8e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d017      	beq.n	8006ae0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fcc8 	bl	800845a <USBD_LL_PrepareReceive>
 8006aca:	e007      	b.n	8006adc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ad2:	2340      	movs	r3, #64	@ 0x40
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fcbf 	bl	800845a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	4613      	mov	r3, r2
 8006af6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006afe:	2302      	movs	r3, #2
 8006b00:	e01a      	b.n	8006b38 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	79fa      	ldrb	r2, [r7, #7]
 8006b2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f001 fb2d 	bl	8008190 <USBD_LL_Init>

  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
 8006b60:	e001      	b.n	8006b66 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fb62 	bl	8008244 <USBD_LL_Start>

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00c      	beq.n	8006bd2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fed8 	bl	80079ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d016      	beq.n	8006c6c <USBD_LL_SetupStage+0x6a>
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d81c      	bhi.n	8006c7c <USBD_LL_SetupStage+0x7a>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <USBD_LL_SetupStage+0x4a>
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d008      	beq.n	8006c5c <USBD_LL_SetupStage+0x5a>
 8006c4a:	e017      	b.n	8006c7c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9cb 	bl	8006ff0 <USBD_StdDevReq>
      break;
 8006c5a:	e01a      	b.n	8006c92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa2d 	bl	80070c4 <USBD_StdItfReq>
      break;
 8006c6a:	e012      	b.n	8006c92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa6d 	bl	8007154 <USBD_StdEPReq>
      break;
 8006c7a:	e00a      	b.n	8006c92 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006c82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fb3a 	bl	8008304 <USBD_LL_StallEP>
      break;
 8006c90:	bf00      	nop
  }

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d14b      	bne.n	8006d48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006cb6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d134      	bne.n	8006d2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d919      	bls.n	8006d02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d203      	bcs.n	8006cf0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	e002      	b.n	8006cf6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 ff54 	bl	8007ba8 <USBD_CtlContinueRx>
 8006d00:	e038      	b.n	8006d74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d105      	bne.n	8006d24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 ff51 	bl	8007bcc <USBD_CtlSendStatus>
 8006d2a:	e023      	b.n	8006d74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d11e      	bne.n	8006d74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f001 fadf 	bl	8008304 <USBD_LL_StallEP>
 8006d46:	e015      	b.n	8006d74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d108      	bne.n	8006d70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	7afa      	ldrb	r2, [r7, #11]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3
 8006d6e:	e001      	b.n	8006d74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d70:	2302      	movs	r3, #2
 8006d72:	e000      	b.n	8006d76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	460b      	mov	r3, r1
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d17f      	bne.n	8006e92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3314      	adds	r3, #20
 8006d96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d15c      	bne.n	8006e5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d915      	bls.n	8006dda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 febe 	bl	8007b48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f001 fb41 	bl	800845a <USBD_LL_PrepareReceive>
 8006dd8:	e04e      	b.n	8006e78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6912      	ldr	r2, [r2, #16]
 8006de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de6:	fb01 f202 	mul.w	r2, r1, r2
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11c      	bne.n	8006e2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d316      	bcc.n	8006e2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d20f      	bcs.n	8006e2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fe9a 	bl	8007b48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f001 fb19 	bl	800845a <USBD_LL_PrepareReceive>
 8006e28:	e026      	b.n	8006e78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d105      	bne.n	8006e4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e4c:	2180      	movs	r1, #128	@ 0x80
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f001 fa58 	bl	8008304 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fecc 	bl	8007bf2 <USBD_CtlReceiveStatus>
 8006e5a:	e00d      	b.n	8006e78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d004      	beq.n	8006e70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e70:	2180      	movs	r1, #128	@ 0x80
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 fa46 	bl	8008304 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d11d      	bne.n	8006ebe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fe81 	bl	8006b8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e90:	e015      	b.n	8006ebe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d108      	bne.n	8006eba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	7afa      	ldrb	r2, [r7, #11]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	4798      	blx	r3
 8006eb8:	e001      	b.n	8006ebe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e000      	b.n	8006ec0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ed0:	2340      	movs	r3, #64	@ 0x40
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f9cf 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eec:	2340      	movs	r3, #64	@ 0x40
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f9c1 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2240      	movs	r2, #64	@ 0x40
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6852      	ldr	r2, [r2, #4]
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d105      	bne.n	8006fae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d10b      	bne.n	8006fe4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007006:	2b40      	cmp	r3, #64	@ 0x40
 8007008:	d005      	beq.n	8007016 <USBD_StdDevReq+0x26>
 800700a:	2b40      	cmp	r3, #64	@ 0x40
 800700c:	d84f      	bhi.n	80070ae <USBD_StdDevReq+0xbe>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <USBD_StdDevReq+0x36>
 8007012:	2b20      	cmp	r3, #32
 8007014:	d14b      	bne.n	80070ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
      break;
 8007024:	e048      	b.n	80070b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b09      	cmp	r3, #9
 800702c:	d839      	bhi.n	80070a2 <USBD_StdDevReq+0xb2>
 800702e:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <USBD_StdDevReq+0x44>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007085 	.word	0x08007085
 8007038:	08007099 	.word	0x08007099
 800703c:	080070a3 	.word	0x080070a3
 8007040:	0800708f 	.word	0x0800708f
 8007044:	080070a3 	.word	0x080070a3
 8007048:	08007067 	.word	0x08007067
 800704c:	0800705d 	.word	0x0800705d
 8007050:	080070a3 	.word	0x080070a3
 8007054:	0800707b 	.word	0x0800707b
 8007058:	08007071 	.word	0x08007071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9dc 	bl	800741c <USBD_GetDescriptor>
          break;
 8007064:	e022      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fb3f 	bl	80076ec <USBD_SetAddress>
          break;
 800706e:	e01d      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb7e 	bl	8007774 <USBD_SetConfig>
          break;
 8007078:	e018      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc07 	bl	8007890 <USBD_GetConfig>
          break;
 8007082:	e013      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fc37 	bl	80078fa <USBD_GetStatus>
          break;
 800708c:	e00e      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc65 	bl	8007960 <USBD_SetFeature>
          break;
 8007096:	e009      	b.n	80070ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fc74 	bl	8007988 <USBD_ClrFeature>
          break;
 80070a0:	e004      	b.n	80070ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fcc9 	bl	8007a3c <USBD_CtlError>
          break;
 80070aa:	bf00      	nop
      }
      break;
 80070ac:	e004      	b.n	80070b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fcc3 	bl	8007a3c <USBD_CtlError>
      break;
 80070b6:	bf00      	nop
  }

  return ret;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop

080070c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	d005      	beq.n	80070ea <USBD_StdItfReq+0x26>
 80070de:	2b40      	cmp	r3, #64	@ 0x40
 80070e0:	d82e      	bhi.n	8007140 <USBD_StdItfReq+0x7c>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <USBD_StdItfReq+0x26>
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d12a      	bne.n	8007140 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f0:	3b01      	subs	r3, #1
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d81d      	bhi.n	8007132 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	889b      	ldrh	r3, [r3, #4]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d813      	bhi.n	8007128 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d110      	bne.n	800713c <USBD_StdItfReq+0x78>
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fd53 	bl	8007bcc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007126:	e009      	b.n	800713c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fc86 	bl	8007a3c <USBD_CtlError>
          break;
 8007130:	e004      	b.n	800713c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc81 	bl	8007a3c <USBD_CtlError>
          break;
 800713a:	e000      	b.n	800713e <USBD_StdItfReq+0x7a>
          break;
 800713c:	bf00      	nop
      }
      break;
 800713e:	e004      	b.n	800714a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc7a 	bl	8007a3c <USBD_CtlError>
      break;
 8007148:	bf00      	nop
  }

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	889b      	ldrh	r3, [r3, #4]
 8007166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	d007      	beq.n	8007184 <USBD_StdEPReq+0x30>
 8007174:	2b40      	cmp	r3, #64	@ 0x40
 8007176:	f200 8146 	bhi.w	8007406 <USBD_StdEPReq+0x2b2>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <USBD_StdEPReq+0x40>
 800717e:	2b20      	cmp	r3, #32
 8007180:	f040 8141 	bne.w	8007406 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
      break;
 8007192:	e13d      	b.n	8007410 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800719c:	2b20      	cmp	r3, #32
 800719e:	d10a      	bne.n	80071b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	e12d      	b.n	8007412 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d007      	beq.n	80071ce <USBD_StdEPReq+0x7a>
 80071be:	2b03      	cmp	r3, #3
 80071c0:	f300 811b 	bgt.w	80073fa <USBD_StdEPReq+0x2a6>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d072      	beq.n	80072ae <USBD_StdEPReq+0x15a>
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d03a      	beq.n	8007242 <USBD_StdEPReq+0xee>
 80071cc:	e115      	b.n	80073fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d002      	beq.n	80071de <USBD_StdEPReq+0x8a>
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d015      	beq.n	8007208 <USBD_StdEPReq+0xb4>
 80071dc:	e02b      	b.n	8007236 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <USBD_StdEPReq+0xaa>
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b80      	cmp	r3, #128	@ 0x80
 80071e8:	d009      	beq.n	80071fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f888 	bl	8008304 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071f4:	2180      	movs	r1, #128	@ 0x80
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f884 	bl	8008304 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071fc:	e020      	b.n	8007240 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc1b 	bl	8007a3c <USBD_CtlError>
              break;
 8007206:	e01b      	b.n	8007240 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10e      	bne.n	800722e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <USBD_StdEPReq+0xda>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b80      	cmp	r3, #128	@ 0x80
 800721a:	d008      	beq.n	800722e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f86b 	bl	8008304 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fccc 	bl	8007bcc <USBD_CtlSendStatus>

              break;
 8007234:	e004      	b.n	8007240 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fbff 	bl	8007a3c <USBD_CtlError>
              break;
 800723e:	bf00      	nop
          }
          break;
 8007240:	e0e0      	b.n	8007404 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007248:	2b02      	cmp	r3, #2
 800724a:	d002      	beq.n	8007252 <USBD_StdEPReq+0xfe>
 800724c:	2b03      	cmp	r3, #3
 800724e:	d015      	beq.n	800727c <USBD_StdEPReq+0x128>
 8007250:	e026      	b.n	80072a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00c      	beq.n	8007272 <USBD_StdEPReq+0x11e>
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b80      	cmp	r3, #128	@ 0x80
 800725c:	d009      	beq.n	8007272 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f84e 	bl	8008304 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007268:	2180      	movs	r1, #128	@ 0x80
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 f84a 	bl	8008304 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007270:	e01c      	b.n	80072ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fbe1 	bl	8007a3c <USBD_CtlError>
              break;
 800727a:	e017      	b.n	80072ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	885b      	ldrh	r3, [r3, #2]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d112      	bne.n	80072aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f855 	bl	8008342 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc97 	bl	8007bcc <USBD_CtlSendStatus>
              }
              break;
 800729e:	e004      	b.n	80072aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fbca 	bl	8007a3c <USBD_CtlError>
              break;
 80072a8:	e000      	b.n	80072ac <USBD_StdEPReq+0x158>
              break;
 80072aa:	bf00      	nop
          }
          break;
 80072ac:	e0aa      	b.n	8007404 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d002      	beq.n	80072be <USBD_StdEPReq+0x16a>
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d032      	beq.n	8007322 <USBD_StdEPReq+0x1ce>
 80072bc:	e097      	b.n	80073ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <USBD_StdEPReq+0x180>
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b80      	cmp	r3, #128	@ 0x80
 80072c8:	d004      	beq.n	80072d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fbb5 	bl	8007a3c <USBD_CtlError>
                break;
 80072d2:	e091      	b.n	80073f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	da0b      	bge.n	80072f4 <USBD_StdEPReq+0x1a0>
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	3310      	adds	r3, #16
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	3304      	adds	r3, #4
 80072f2:	e00b      	b.n	800730c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4413      	add	r3, r2
 800730a:	3304      	adds	r3, #4
 800730c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2202      	movs	r2, #2
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fbf8 	bl	8007b10 <USBD_CtlSendData>
              break;
 8007320:	e06a      	b.n	80073f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007326:	2b00      	cmp	r3, #0
 8007328:	da11      	bge.n	800734e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	3318      	adds	r3, #24
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d117      	bne.n	8007374 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb78 	bl	8007a3c <USBD_CtlError>
                  break;
 800734c:	e054      	b.n	80073f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb65 	bl	8007a3c <USBD_CtlError>
                  break;
 8007372:	e041      	b.n	80073f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0b      	bge.n	8007394 <USBD_StdEPReq+0x240>
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	3310      	adds	r3, #16
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	3304      	adds	r3, #4
 8007392:	e00b      	b.n	80073ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	3304      	adds	r3, #4
 80073ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <USBD_StdEPReq+0x266>
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b80      	cmp	r3, #128	@ 0x80
 80073b8:	d103      	bne.n	80073c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	e00e      	b.n	80073e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 ffda 	bl	8008380 <USBD_LL_IsStallEP>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e002      	b.n	80073e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2202      	movs	r2, #2
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb92 	bl	8007b10 <USBD_CtlSendData>
              break;
 80073ec:	e004      	b.n	80073f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb23 	bl	8007a3c <USBD_CtlError>
              break;
 80073f6:	bf00      	nop
          }
          break;
 80073f8:	e004      	b.n	8007404 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb1d 	bl	8007a3c <USBD_CtlError>
          break;
 8007402:	bf00      	nop
      }
      break;
 8007404:	e004      	b.n	8007410 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb17 	bl	8007a3c <USBD_CtlError>
      break;
 800740e:	bf00      	nop
  }

  return ret;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	885b      	ldrh	r3, [r3, #2]
 8007436:	0a1b      	lsrs	r3, r3, #8
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	2b06      	cmp	r3, #6
 800743e:	f200 8128 	bhi.w	8007692 <USBD_GetDescriptor+0x276>
 8007442:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <USBD_GetDescriptor+0x2c>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007465 	.word	0x08007465
 800744c:	0800747d 	.word	0x0800747d
 8007450:	080074bd 	.word	0x080074bd
 8007454:	08007693 	.word	0x08007693
 8007458:	08007693 	.word	0x08007693
 800745c:	08007633 	.word	0x08007633
 8007460:	0800765f 	.word	0x0800765f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7c12      	ldrb	r2, [r2, #16]
 8007470:	f107 0108 	add.w	r1, r7, #8
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
 8007478:	60f8      	str	r0, [r7, #12]
      break;
 800747a:	e112      	b.n	80076a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7c1b      	ldrb	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10d      	bne.n	80074a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	f107 0208 	add.w	r2, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	2202      	movs	r2, #2
 800749c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800749e:	e100      	b.n	80076a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	f107 0208 	add.w	r2, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e0f2      	b.n	80076a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	f200 80ac 	bhi.w	8007620 <USBD_GetDescriptor+0x204>
 80074c8:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <USBD_GetDescriptor+0xb4>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e9 	.word	0x080074e9
 80074d4:	0800751d 	.word	0x0800751d
 80074d8:	08007551 	.word	0x08007551
 80074dc:	08007585 	.word	0x08007585
 80074e0:	080075b9 	.word	0x080075b9
 80074e4:	080075ed 	.word	0x080075ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	7c12      	ldrb	r2, [r2, #16]
 8007500:	f107 0108 	add.w	r1, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800750a:	e091      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa94 	bl	8007a3c <USBD_CtlError>
            err++;
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	3301      	adds	r3, #1
 8007518:	72fb      	strb	r3, [r7, #11]
          break;
 800751a:	e089      	b.n	8007630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e077      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa7a 	bl	8007a3c <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e06f      	b.n	8007630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e05d      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa60 	bl	8007a3c <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e055      	b.n	8007630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e043      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa46 	bl	8007a3c <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e03b      	b.n	8007630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e029      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa2c 	bl	8007a3c <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e021      	b.n	8007630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e00f      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa12 	bl	8007a3c <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e007      	b.n	8007630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa0a 	bl	8007a3c <USBD_CtlError>
          err++;
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	3301      	adds	r3, #1
 800762c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800762e:	e038      	b.n	80076a2 <USBD_GetDescriptor+0x286>
 8007630:	e037      	b.n	80076a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7c1b      	ldrb	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	f107 0208 	add.w	r2, r7, #8
 8007646:	4610      	mov	r0, r2
 8007648:	4798      	blx	r3
 800764a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800764c:	e029      	b.n	80076a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9f3 	bl	8007a3c <USBD_CtlError>
        err++;
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	3301      	adds	r3, #1
 800765a:	72fb      	strb	r3, [r7, #11]
      break;
 800765c:	e021      	b.n	80076a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	7c1b      	ldrb	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	f107 0208 	add.w	r2, r7, #8
 8007672:	4610      	mov	r0, r2
 8007674:	4798      	blx	r3
 8007676:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	2207      	movs	r2, #7
 800767e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007680:	e00f      	b.n	80076a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9d9 	bl	8007a3c <USBD_CtlError>
        err++;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	3301      	adds	r3, #1
 800768e:	72fb      	strb	r3, [r7, #11]
      break;
 8007690:	e007      	b.n	80076a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9d1 	bl	8007a3c <USBD_CtlError>
      err++;
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	3301      	adds	r3, #1
 800769e:	72fb      	strb	r3, [r7, #11]
      break;
 80076a0:	bf00      	nop
  }

  if (err != 0U)
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d11c      	bne.n	80076e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d011      	beq.n	80076d2 <USBD_GetDescriptor+0x2b6>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	88da      	ldrh	r2, [r3, #6]
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	4293      	cmp	r3, r2
 80076be:	bf28      	it	cs
 80076c0:	4613      	movcs	r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076c6:	893b      	ldrh	r3, [r7, #8]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa1f 	bl	8007b10 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88db      	ldrh	r3, [r3, #6]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa76 	bl	8007bcc <USBD_CtlSendStatus>
 80076e0:	e000      	b.n	80076e4 <USBD_GetDescriptor+0x2c8>
    return;
 80076e2:	bf00      	nop
    }
  }
}
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d130      	bne.n	8007760 <USBD_SetAddress+0x74>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d12c      	bne.n	8007760 <USBD_SetAddress+0x74>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	2b7f      	cmp	r3, #127	@ 0x7f
 800770c:	d828      	bhi.n	8007760 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007720:	2b03      	cmp	r3, #3
 8007722:	d104      	bne.n	800772e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f988 	bl	8007a3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772c:	e01d      	b.n	800776a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7bfa      	ldrb	r2, [r7, #15]
 8007732:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fe4b 	bl	80083d6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa43 	bl	8007bcc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	e009      	b.n	800776a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	e004      	b.n	800776a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f96a 	bl	8007a3c <USBD_CtlError>
  }
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b41      	ldr	r3, [pc, #260]	@ (800788c <USBD_SetConfig+0x118>)
 8007786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007788:	4b40      	ldr	r3, [pc, #256]	@ (800788c <USBD_SetConfig+0x118>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d904      	bls.n	800779a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f952 	bl	8007a3c <USBD_CtlError>
 8007798:	e075      	b.n	8007886 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d002      	beq.n	80077aa <USBD_SetConfig+0x36>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d023      	beq.n	80077f0 <USBD_SetConfig+0x7c>
 80077a8:	e062      	b.n	8007870 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077aa:	4b38      	ldr	r3, [pc, #224]	@ (800788c <USBD_SetConfig+0x118>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01a      	beq.n	80077e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077b2:	4b36      	ldr	r3, [pc, #216]	@ (800788c <USBD_SetConfig+0x118>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2203      	movs	r2, #3
 80077c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077c4:	4b31      	ldr	r3, [pc, #196]	@ (800788c <USBD_SetConfig+0x118>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff f9e7 	bl	8006b9e <USBD_SetClassConfig>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d104      	bne.n	80077e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f92f 	bl	8007a3c <USBD_CtlError>
            return;
 80077de:	e052      	b.n	8007886 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9f3 	bl	8007bcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077e6:	e04e      	b.n	8007886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9ef 	bl	8007bcc <USBD_CtlSendStatus>
        break;
 80077ee:	e04a      	b.n	8007886 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077f0:	4b26      	ldr	r3, [pc, #152]	@ (800788c <USBD_SetConfig+0x118>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d112      	bne.n	800781e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007800:	4b22      	ldr	r3, [pc, #136]	@ (800788c <USBD_SetConfig+0x118>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800780a:	4b20      	ldr	r3, [pc, #128]	@ (800788c <USBD_SetConfig+0x118>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff f9e3 	bl	8006bdc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f9d8 	bl	8007bcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800781c:	e033      	b.n	8007886 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800781e:	4b1b      	ldr	r3, [pc, #108]	@ (800788c <USBD_SetConfig+0x118>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	429a      	cmp	r2, r3
 800782a:	d01d      	beq.n	8007868 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff f9d1 	bl	8006bdc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800783a:	4b14      	ldr	r3, [pc, #80]	@ (800788c <USBD_SetConfig+0x118>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007844:	4b11      	ldr	r3, [pc, #68]	@ (800788c <USBD_SetConfig+0x118>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff f9a7 	bl	8006b9e <USBD_SetClassConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b02      	cmp	r3, #2
 8007854:	d104      	bne.n	8007860 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f8ef 	bl	8007a3c <USBD_CtlError>
            return;
 800785e:	e012      	b.n	8007886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9b3 	bl	8007bcc <USBD_CtlSendStatus>
        break;
 8007866:	e00e      	b.n	8007886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9af 	bl	8007bcc <USBD_CtlSendStatus>
        break;
 800786e:	e00a      	b.n	8007886 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8e2 	bl	8007a3c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <USBD_SetConfig+0x118>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff f9ac 	bl	8006bdc <USBD_ClrClassConfig>
        break;
 8007884:	bf00      	nop
    }
  }
}
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000224 	.word	0x20000224

08007890 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d004      	beq.n	80078ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f8c9 	bl	8007a3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078aa:	e022      	b.n	80078f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	dc02      	bgt.n	80078bc <USBD_GetConfig+0x2c>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dc03      	bgt.n	80078c2 <USBD_GetConfig+0x32>
 80078ba:	e015      	b.n	80078e8 <USBD_GetConfig+0x58>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d00b      	beq.n	80078d8 <USBD_GetConfig+0x48>
 80078c0:	e012      	b.n	80078e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3308      	adds	r3, #8
 80078cc:	2201      	movs	r2, #1
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f91d 	bl	8007b10 <USBD_CtlSendData>
        break;
 80078d6:	e00c      	b.n	80078f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	2201      	movs	r2, #1
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f915 	bl	8007b10 <USBD_CtlSendData>
        break;
 80078e6:	e004      	b.n	80078f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8a6 	bl	8007a3c <USBD_CtlError>
        break;
 80078f0:	bf00      	nop
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790a:	3b01      	subs	r3, #1
 800790c:	2b02      	cmp	r3, #2
 800790e:	d81e      	bhi.n	800794e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d004      	beq.n	8007922 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f88e 	bl	8007a3c <USBD_CtlError>
        break;
 8007920:	e01a      	b.n	8007958 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f043 0202 	orr.w	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	330c      	adds	r3, #12
 8007942:	2202      	movs	r2, #2
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8e2 	bl	8007b10 <USBD_CtlSendData>
      break;
 800794c:	e004      	b.n	8007958 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f873 	bl	8007a3c <USBD_CtlError>
      break;
 8007956:	bf00      	nop
  }
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d106      	bne.n	8007980 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f926 	bl	8007bcc <USBD_CtlSendStatus>
  }
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007998:	3b01      	subs	r3, #1
 800799a:	2b02      	cmp	r3, #2
 800799c:	d80b      	bhi.n	80079b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d10c      	bne.n	80079c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f90c 	bl	8007bcc <USBD_CtlSendStatus>
      }
      break;
 80079b4:	e004      	b.n	80079c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f83f 	bl	8007a3c <USBD_CtlError>
      break;
 80079be:	e000      	b.n	80079c2 <USBD_ClrFeature+0x3a>
      break;
 80079c0:	bf00      	nop
  }
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785a      	ldrb	r2, [r3, #1]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	3302      	adds	r3, #2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	3303      	adds	r3, #3
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4413      	add	r3, r2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	3304      	adds	r3, #4
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3305      	adds	r3, #5
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4413      	add	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	3306      	adds	r3, #6
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	3307      	adds	r3, #7
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	80da      	strh	r2, [r3, #6]

}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a46:	2180      	movs	r1, #128	@ 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fc5b 	bl	8008304 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc57 	bl	8008304 <USBD_LL_StallEP>
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d032      	beq.n	8007ada <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f834 	bl	8007ae2 <USBD_GetLen>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	75fa      	strb	r2, [r7, #23]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4413      	add	r3, r2
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	75fa      	strb	r2, [r7, #23]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	2203      	movs	r2, #3
 8007aa8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007aaa:	e012      	b.n	8007ad2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	60fa      	str	r2, [r7, #12]
 8007ab2:	7dfa      	ldrb	r2, [r7, #23]
 8007ab4:	1c51      	adds	r1, r2, #1
 8007ab6:	75f9      	strb	r1, [r7, #23]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	440a      	add	r2, r1
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	75fa      	strb	r2, [r7, #23]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e8      	bne.n	8007aac <USBD_GetString+0x4e>
    }
  }
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007aee:	e005      	b.n	8007afc <USBD_GetLen+0x1a>
  {
    len++;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	3301      	adds	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3301      	adds	r3, #1
 8007afa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f5      	bne.n	8007af0 <USBD_GetLen+0xe>
  }

  return len;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	2100      	movs	r1, #0
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fc6b 	bl	8008414 <USBD_LL_Transmit>

  return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fc59 	bl	8008414 <USBD_LL_Transmit>

  return USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fc5e 	bl	800845a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fc4c 	bl	800845a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2200      	movs	r2, #0
 8007be0:	2100      	movs	r1, #0
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fc16 	bl	8008414 <USBD_LL_Transmit>

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c02:	2300      	movs	r3, #0
 8007c04:	2200      	movs	r2, #0
 8007c06:	2100      	movs	r1, #0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fc26 	bl	800845a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4912      	ldr	r1, [pc, #72]	@ (8007c68 <MX_USB_DEVICE_Init+0x50>)
 8007c20:	4812      	ldr	r0, [pc, #72]	@ (8007c6c <MX_USB_DEVICE_Init+0x54>)
 8007c22:	f7fe ff62 	bl	8006aea <USBD_Init>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c2c:	f7f8 fc24 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c30:	490f      	ldr	r1, [pc, #60]	@ (8007c70 <MX_USB_DEVICE_Init+0x58>)
 8007c32:	480e      	ldr	r0, [pc, #56]	@ (8007c6c <MX_USB_DEVICE_Init+0x54>)
 8007c34:	f7fe ff84 	bl	8006b40 <USBD_RegisterClass>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c3e:	f7f8 fc1b 	bl	8000478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c42:	490c      	ldr	r1, [pc, #48]	@ (8007c74 <MX_USB_DEVICE_Init+0x5c>)
 8007c44:	4809      	ldr	r0, [pc, #36]	@ (8007c6c <MX_USB_DEVICE_Init+0x54>)
 8007c46:	f7fe feb5 	bl	80069b4 <USBD_CDC_RegisterInterface>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c50:	f7f8 fc12 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c54:	4805      	ldr	r0, [pc, #20]	@ (8007c6c <MX_USB_DEVICE_Init+0x54>)
 8007c56:	f7fe ff8c 	bl	8006b72 <USBD_Start>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c60:	f7f8 fc0a 	bl	8000478 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c64:	bf00      	nop
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000150 	.word	0x20000150
 8007c6c:	20000228 	.word	0x20000228
 8007c70:	2000003c 	.word	0x2000003c
 8007c74:	20000140 	.word	0x20000140

08007c78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4905      	ldr	r1, [pc, #20]	@ (8007c94 <CDC_Init_FS+0x1c>)
 8007c80:	4805      	ldr	r0, [pc, #20]	@ (8007c98 <CDC_Init_FS+0x20>)
 8007c82:	f7fe fead 	bl	80069e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c86:	4905      	ldr	r1, [pc, #20]	@ (8007c9c <CDC_Init_FS+0x24>)
 8007c88:	4803      	ldr	r0, [pc, #12]	@ (8007c98 <CDC_Init_FS+0x20>)
 8007c8a:	f7fe fec2 	bl	8006a12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	200008ec 	.word	0x200008ec
 8007c98:	20000228 	.word	0x20000228
 8007c9c:	200004ec 	.word	0x200004ec

08007ca0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ca4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr
	...

08007cb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	71fb      	strb	r3, [r7, #7]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b23      	cmp	r3, #35	@ 0x23
 8007cc4:	d84a      	bhi.n	8007d5c <CDC_Control_FS+0xac>
 8007cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <CDC_Control_FS+0x1c>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d5d 	.word	0x08007d5d
 8007cd0:	08007d5d 	.word	0x08007d5d
 8007cd4:	08007d5d 	.word	0x08007d5d
 8007cd8:	08007d5d 	.word	0x08007d5d
 8007cdc:	08007d5d 	.word	0x08007d5d
 8007ce0:	08007d5d 	.word	0x08007d5d
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d5d 	.word	0x08007d5d
 8007cec:	08007d5d 	.word	0x08007d5d
 8007cf0:	08007d5d 	.word	0x08007d5d
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007d5d 	.word	0x08007d5d
 8007d00:	08007d5d 	.word	0x08007d5d
 8007d04:	08007d5d 	.word	0x08007d5d
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007d5d 	.word	0x08007d5d
 8007d10:	08007d5d 	.word	0x08007d5d
 8007d14:	08007d5d 	.word	0x08007d5d
 8007d18:	08007d5d 	.word	0x08007d5d
 8007d1c:	08007d5d 	.word	0x08007d5d
 8007d20:	08007d5d 	.word	0x08007d5d
 8007d24:	08007d5d 	.word	0x08007d5d
 8007d28:	08007d5d 	.word	0x08007d5d
 8007d2c:	08007d5d 	.word	0x08007d5d
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d5d 	.word	0x08007d5d
 8007d40:	08007d5d 	.word	0x08007d5d
 8007d44:	08007d5d 	.word	0x08007d5d
 8007d48:	08007d5d 	.word	0x08007d5d
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d5d 	.word	0x08007d5d
 8007d54:	08007d5d 	.word	0x08007d5d
 8007d58:	08007d5d 	.word	0x08007d5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d5c:	bf00      	nop
  }

  return (USBD_OK);
 8007d5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop

08007d6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4805      	ldr	r0, [pc, #20]	@ (8007d90 <CDC_Receive_FS+0x24>)
 8007d7a:	f7fe fe4a 	bl	8006a12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d7e:	4804      	ldr	r0, [pc, #16]	@ (8007d90 <CDC_Receive_FS+0x24>)
 8007d80:	f7fe fe89 	bl	8006a96 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000228 	.word	0x20000228

08007d94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007da4:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <CDC_Transmit_FS+0x48>)
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007daa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e00b      	b.n	8007dd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4806      	ldr	r0, [pc, #24]	@ (8007ddc <CDC_Transmit_FS+0x48>)
 8007dc2:	f7fe fe0d 	bl	80069e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007dc6:	4805      	ldr	r0, [pc, #20]	@ (8007ddc <CDC_Transmit_FS+0x48>)
 8007dc8:	f7fe fe36 	bl	8006a38 <USBD_CDC_TransmitPacket>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000228 	.word	0x20000228

08007de0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2212      	movs	r2, #18
 8007df0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007df2:	4b03      	ldr	r3, [pc, #12]	@ (8007e00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	2000016c 	.word	0x2000016c

08007e04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2204      	movs	r2, #4
 8007e14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e16:	4b03      	ldr	r3, [pc, #12]	@ (8007e24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20000180 	.word	0x20000180

08007e28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	6039      	str	r1, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4907      	ldr	r1, [pc, #28]	@ (8007e5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007e3e:	4808      	ldr	r0, [pc, #32]	@ (8007e60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e40:	f7ff fe0d 	bl	8007a5e <USBD_GetString>
 8007e44:	e004      	b.n	8007e50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4904      	ldr	r1, [pc, #16]	@ (8007e5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007e4a:	4805      	ldr	r0, [pc, #20]	@ (8007e60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e4c:	f7ff fe07 	bl	8007a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e50:	4b02      	ldr	r3, [pc, #8]	@ (8007e5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000cec 	.word	0x20000cec
 8007e60:	080085d0 	.word	0x080085d0

08007e64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	4904      	ldr	r1, [pc, #16]	@ (8007e84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e74:	4804      	ldr	r0, [pc, #16]	@ (8007e88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e76:	f7ff fdf2 	bl	8007a5e <USBD_GetString>
  return USBD_StrDesc;
 8007e7a:	4b02      	ldr	r3, [pc, #8]	@ (8007e84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000cec 	.word	0x20000cec
 8007e88:	080085e8 	.word	0x080085e8

08007e8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	221a      	movs	r2, #26
 8007e9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e9e:	f000 f843 	bl	8007f28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ea2:	4b02      	ldr	r3, [pc, #8]	@ (8007eac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000184 	.word	0x20000184

08007eb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4907      	ldr	r1, [pc, #28]	@ (8007ee4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ec6:	4808      	ldr	r0, [pc, #32]	@ (8007ee8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec8:	f7ff fdc9 	bl	8007a5e <USBD_GetString>
 8007ecc:	e004      	b.n	8007ed8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	4904      	ldr	r1, [pc, #16]	@ (8007ee4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ed2:	4805      	ldr	r0, [pc, #20]	@ (8007ee8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ed4:	f7ff fdc3 	bl	8007a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed8:	4b02      	ldr	r3, [pc, #8]	@ (8007ee4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000cec 	.word	0x20000cec
 8007ee8:	080085fc 	.word	0x080085fc

08007eec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4907      	ldr	r1, [pc, #28]	@ (8007f20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f02:	4808      	ldr	r0, [pc, #32]	@ (8007f24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f04:	f7ff fdab 	bl	8007a5e <USBD_GetString>
 8007f08:	e004      	b.n	8007f14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4904      	ldr	r1, [pc, #16]	@ (8007f20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f0e:	4805      	ldr	r0, [pc, #20]	@ (8007f24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f10:	f7ff fda5 	bl	8007a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f14:	4b02      	ldr	r3, [pc, #8]	@ (8007f20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000cec 	.word	0x20000cec
 8007f24:	08008608 	.word	0x08008608

08007f28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007f6c <Get_SerialNum+0x44>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	@ (8007f70 <Get_SerialNum+0x48>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f74 <Get_SerialNum+0x4c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f4e:	2208      	movs	r2, #8
 8007f50:	4909      	ldr	r1, [pc, #36]	@ (8007f78 <Get_SerialNum+0x50>)
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f814 	bl	8007f80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f58:	2204      	movs	r2, #4
 8007f5a:	4908      	ldr	r1, [pc, #32]	@ (8007f7c <Get_SerialNum+0x54>)
 8007f5c:	68b8      	ldr	r0, [r7, #8]
 8007f5e:	f000 f80f 	bl	8007f80 <IntToUnicode>
  }
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	1ffff7e8 	.word	0x1ffff7e8
 8007f70:	1ffff7ec 	.word	0x1ffff7ec
 8007f74:	1ffff7f0 	.word	0x1ffff7f0
 8007f78:	20000186 	.word	0x20000186
 8007f7c:	20000196 	.word	0x20000196

08007f80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
 8007f96:	e027      	b.n	8007fe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	2b09      	cmp	r3, #9
 8007f9e:	d80b      	bhi.n	8007fb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	0f1b      	lsrs	r3, r3, #28
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4619      	mov	r1, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	440b      	add	r3, r1
 8007fb0:	3230      	adds	r2, #48	@ 0x30
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	e00a      	b.n	8007fce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	0f1b      	lsrs	r3, r3, #28
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3237      	adds	r2, #55	@ 0x37
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	3301      	adds	r3, #1
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4413      	add	r3, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
 8007fe8:	7dfa      	ldrb	r2, [r7, #23]
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d3d3      	bcc.n	8007f98 <IntToUnicode+0x18>
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a11      	ldr	r2, [pc, #68]	@ (8008050 <HAL_PCD_MspInit+0x54>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d11b      	bne.n	8008046 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800800e:	4b11      	ldr	r3, [pc, #68]	@ (8008054 <HAL_PCD_MspInit+0x58>)
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	4a10      	ldr	r2, [pc, #64]	@ (8008054 <HAL_PCD_MspInit+0x58>)
 8008014:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008018:	61d3      	str	r3, [r2, #28]
 800801a:	4b0e      	ldr	r3, [pc, #56]	@ (8008054 <HAL_PCD_MspInit+0x58>)
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008026:	2200      	movs	r2, #0
 8008028:	2100      	movs	r1, #0
 800802a:	2013      	movs	r0, #19
 800802c:	f7f9 fb11 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008030:	2013      	movs	r0, #19
 8008032:	f7f9 fb2a 	bl	800168a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	2014      	movs	r0, #20
 800803c:	f7f9 fb09 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008040:	2014      	movs	r0, #20
 8008042:	f7f9 fb22 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008046:	bf00      	nop
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40005c00 	.word	0x40005c00
 8008054:	40021000 	.word	0x40021000

08008058 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fdc7 	bl	8006c02 <USBD_LL_SetupStage>
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	440b      	add	r3, r1
 800809c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7fe fdf9 	bl	8006c9c <USBD_LL_DataOutStage>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	440b      	add	r3, r1
 80080d2:	3324      	adds	r3, #36	@ 0x24
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	4619      	mov	r1, r3
 80080da:	f7fe fe50 	bl	8006d7e <USBD_LL_DataInStage>
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe ff60 	bl	8006fba <USBD_LL_SOF>
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800810a:	2301      	movs	r3, #1
 800810c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	799b      	ldrb	r3, [r3, #6]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d001      	beq.n	800811a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008116:	f7f8 f9af 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008120:	7bfa      	ldrb	r2, [r7, #15]
 8008122:	4611      	mov	r1, r2
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe ff10 	bl	8006f4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fec9 	bl	8006ec8 <USBD_LL_Reset>
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe ff0a 	bl	8006f68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7a9b      	ldrb	r3, [r3, #10]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800815c:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <HAL_PCD_SuspendCallback+0x30>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a03      	ldr	r2, [pc, #12]	@ (8008170 <HAL_PCD_SuspendCallback+0x30>)
 8008162:	f043 0306 	orr.w	r3, r3, #6
 8008166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed00 	.word	0xe000ed00

08008174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe ff04 	bl	8006f90 <USBD_LL_Resume>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008198:	4a28      	ldr	r2, [pc, #160]	@ (800823c <USBD_LL_Init+0xac>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a26      	ldr	r2, [pc, #152]	@ (800823c <USBD_LL_Init+0xac>)
 80081a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80081a8:	4b24      	ldr	r3, [pc, #144]	@ (800823c <USBD_LL_Init+0xac>)
 80081aa:	4a25      	ldr	r2, [pc, #148]	@ (8008240 <USBD_LL_Init+0xb0>)
 80081ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081ae:	4b23      	ldr	r3, [pc, #140]	@ (800823c <USBD_LL_Init+0xac>)
 80081b0:	2208      	movs	r2, #8
 80081b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081b4:	4b21      	ldr	r3, [pc, #132]	@ (800823c <USBD_LL_Init+0xac>)
 80081b6:	2202      	movs	r2, #2
 80081b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081ba:	4b20      	ldr	r3, [pc, #128]	@ (800823c <USBD_LL_Init+0xac>)
 80081bc:	2200      	movs	r2, #0
 80081be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081c0:	4b1e      	ldr	r3, [pc, #120]	@ (800823c <USBD_LL_Init+0xac>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081c6:	4b1d      	ldr	r3, [pc, #116]	@ (800823c <USBD_LL_Init+0xac>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081cc:	481b      	ldr	r0, [pc, #108]	@ (800823c <USBD_LL_Init+0xac>)
 80081ce:	f7f9 fc2c 	bl	8001a2a <HAL_PCD_Init>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80081d8:	f7f8 f94e 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081e2:	2318      	movs	r3, #24
 80081e4:	2200      	movs	r2, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	f7fb f93d 	bl	8003466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081f2:	2358      	movs	r3, #88	@ 0x58
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	@ 0x80
 80081f8:	f7fb f935 	bl	8003466 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008202:	23c0      	movs	r3, #192	@ 0xc0
 8008204:	2200      	movs	r2, #0
 8008206:	2181      	movs	r1, #129	@ 0x81
 8008208:	f7fb f92d 	bl	8003466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008212:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008216:	2200      	movs	r2, #0
 8008218:	2101      	movs	r1, #1
 800821a:	f7fb f924 	bl	8003466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008228:	2200      	movs	r2, #0
 800822a:	2182      	movs	r1, #130	@ 0x82
 800822c:	f7fb f91b 	bl	8003466 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000eec 	.word	0x20000eec
 8008240:	40005c00 	.word	0x40005c00

08008244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800825a:	4618      	mov	r0, r3
 800825c:	f7f9 fcdb 	bl	8001c16 <HAL_PCD_Start>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f94e 	bl	8008508 <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	4603      	mov	r3, r0
 800828a:	70fb      	strb	r3, [r7, #3]
 800828c:	460b      	mov	r3, r1
 800828e:	70bb      	strb	r3, [r7, #2]
 8008290:	4613      	mov	r3, r2
 8008292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082a2:	78bb      	ldrb	r3, [r7, #2]
 80082a4:	883a      	ldrh	r2, [r7, #0]
 80082a6:	78f9      	ldrb	r1, [r7, #3]
 80082a8:	f7f9 fe2f 	bl	8001f0a <HAL_PCD_EP_Open>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f928 	bl	8008508 <USBD_Get_USB_Status>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7f9 fe6d 	bl	8001fc4 <HAL_PCD_EP_Close>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f909 	bl	8008508 <USBD_Get_USB_Status>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f7f9 ff15 	bl	8002152 <HAL_PCD_EP_SetStall>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f8ea 	bl	8008508 <USBD_Get_USB_Status>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7f9 ff56 	bl	8002212 <HAL_PCD_EP_ClrStall>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f8cb 	bl	8008508 <USBD_Get_USB_Status>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008376:	7bbb      	ldrb	r3, [r7, #14]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	da0b      	bge.n	80083b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	440b      	add	r3, r1
 80083ae:	3312      	adds	r3, #18
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	e00b      	b.n	80083cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	440b      	add	r3, r1
 80083c6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80083ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7f9 fd64 	bl	8001ec2 <HAL_PCD_SetAddress>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f881 	bl	8008508 <USBD_Get_USB_Status>
 8008406:	4603      	mov	r3, r0
 8008408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840a:	7bbb      	ldrb	r3, [r7, #14]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	461a      	mov	r2, r3
 8008420:	460b      	mov	r3, r1
 8008422:	72fb      	strb	r3, [r7, #11]
 8008424:	4613      	mov	r3, r2
 8008426:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008436:	893b      	ldrh	r3, [r7, #8]
 8008438:	7af9      	ldrb	r1, [r7, #11]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	f7f9 fe52 	bl	80020e4 <HAL_PCD_EP_Transmit>
 8008440:	4603      	mov	r3, r0
 8008442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f85e 	bl	8008508 <USBD_Get_USB_Status>
 800844c:	4603      	mov	r3, r0
 800844e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008450:	7dbb      	ldrb	r3, [r7, #22]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	461a      	mov	r2, r3
 8008466:	460b      	mov	r3, r1
 8008468:	72fb      	strb	r3, [r7, #11]
 800846a:	4613      	mov	r3, r2
 800846c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800847c:	893b      	ldrh	r3, [r7, #8]
 800847e:	7af9      	ldrb	r1, [r7, #11]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	f7f9 fde7 	bl	8002054 <HAL_PCD_EP_Receive>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f83b 	bl	8008508 <USBD_Get_USB_Status>
 8008492:	4603      	mov	r3, r0
 8008494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008496:	7dbb      	ldrb	r3, [r7, #22]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f9 fdfd 	bl	80020b6 <HAL_PCD_EP_GetRxCount>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084d0:	4b02      	ldr	r3, [pc, #8]	@ (80084dc <USBD_static_malloc+0x14>)
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	200011c4 	.word	0x200011c4

080084e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d817      	bhi.n	800854c <USBD_Get_USB_Status+0x44>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <USBD_Get_USB_Status+0x1c>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008535 	.word	0x08008535
 8008528:	0800853b 	.word	0x0800853b
 800852c:	08008541 	.word	0x08008541
 8008530:	08008547 	.word	0x08008547
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	e00b      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800853a:	2302      	movs	r3, #2
 800853c:	73fb      	strb	r3, [r7, #15]
    break;
 800853e:	e008      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	e005      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008546:	2302      	movs	r3, #2
 8008548:	73fb      	strb	r3, [r7, #15]
    break;
 800854a:	e002      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800854c:	2302      	movs	r3, #2
 800854e:	73fb      	strb	r3, [r7, #15]
    break;
 8008550:	bf00      	nop
  }
  return usb_status;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop

08008560 <memset>:
 8008560:	4603      	mov	r3, r0
 8008562:	4402      	add	r2, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	2600      	movs	r6, #0
 8008574:	4d0c      	ldr	r5, [pc, #48]	@ (80085a8 <__libc_init_array+0x38>)
 8008576:	4c0d      	ldr	r4, [pc, #52]	@ (80085ac <__libc_init_array+0x3c>)
 8008578:	1b64      	subs	r4, r4, r5
 800857a:	10a4      	asrs	r4, r4, #2
 800857c:	42a6      	cmp	r6, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	f000 f81a 	bl	80085b8 <_init>
 8008584:	2600      	movs	r6, #0
 8008586:	4d0a      	ldr	r5, [pc, #40]	@ (80085b0 <__libc_init_array+0x40>)
 8008588:	4c0a      	ldr	r4, [pc, #40]	@ (80085b4 <__libc_init_array+0x44>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	42a6      	cmp	r6, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f855 3b04 	ldr.w	r3, [r5], #4
 8008598:	4798      	blx	r3
 800859a:	3601      	adds	r6, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a2:	4798      	blx	r3
 80085a4:	3601      	adds	r6, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	08008644 	.word	0x08008644
 80085ac:	08008644 	.word	0x08008644
 80085b0:	08008644 	.word	0x08008644
 80085b4:	08008648 	.word	0x08008648

080085b8 <_init>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr

080085c4 <_fini>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr
