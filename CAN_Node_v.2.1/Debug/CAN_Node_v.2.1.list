
CAN_Node_v.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf4  08007cf4  00009120  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cf4  08007cf4  00008cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cfc  08007cfc  00009120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cfc  08007cfc  00008cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08007d04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009120  2**0
                  CONTENTS
 10 .bss          00001c68  20000120  20000120  00009120  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d88  20001d88  00009120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f757  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d75  00000000  00000000  000188a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0001b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000963  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022de9  00000000  00000000  0001cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9cd  00000000  00000000  0003fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a98  00000000  00000000  0004f3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115e81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003318  00000000  00000000  00115ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001191dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c84 	.word	0x08007c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	08007c84 	.word	0x08007c84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa86 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f854 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f916 	bl	8000730 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000504:	f006 fe78 	bl	80071f8 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 8000508:	f000 f8ba 	bl	8000680 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  TxHeader.DLC=2;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <main+0x98>)
 800050e:	2202      	movs	r2, #2
 8000510:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000512:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <main+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000518:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <main+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 64;
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <main+0x98>)
 8000520:	2240      	movs	r2, #64	@ 0x40
 8000522:	601a      	str	r2, [r3, #0]

  HAL_CAN_Start(&hcan1);
 8000524:	481a      	ldr	r0, [pc, #104]	@ (8000590 <main+0x9c>)
 8000526:	f000 fcdf 	bl	8000ee8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800052a:	2102      	movs	r1, #2
 800052c:	4818      	ldr	r0, [pc, #96]	@ (8000590 <main+0x9c>)
 800052e:	f000 ff46 	bl	80013be <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)  // Check if mailbox is free
 8000532:	4817      	ldr	r0, [pc, #92]	@ (8000590 <main+0x9c>)
 8000534:	f000 fdec 	bl	8001110 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d005      	beq.n	800054a <main+0x56>
	  {
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, testData, &TxMailbox);
 800053e:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <main+0xa0>)
 8000540:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <main+0xa4>)
 8000542:	4912      	ldr	r1, [pc, #72]	@ (800058c <main+0x98>)
 8000544:	4812      	ldr	r0, [pc, #72]	@ (8000590 <main+0x9c>)
 8000546:	f000 fd13 	bl	8000f70 <HAL_CAN_AddTxMessage>
	  }
	  // If a message is received (set by callback), turn LED ON
	  //HAL_GPIO_WritePin(GPIOA, led2_Pin, 1);
	  HAL_GPIO_WritePin(GPIOA, led3_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	4813      	ldr	r0, [pc, #76]	@ (800059c <main+0xa8>)
 8000550:	f001 fc38 	bl	8001dc4 <HAL_GPIO_WritePin>
	  if (flag == 1)
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <main+0xac>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10c      	bne.n	8000576 <main+0x82>
	  {
		  HAL_GPIO_WritePin(GPIOA, led2_Pin, 0); // LED ON
 800055c:	2200      	movs	r2, #0
 800055e:	2140      	movs	r1, #64	@ 0x40
 8000560:	480e      	ldr	r0, [pc, #56]	@ (800059c <main+0xa8>)
 8000562:	f001 fc2f 	bl	8001dc4 <HAL_GPIO_WritePin>
		  CDC_Transmit_FS(myBuf, 32);
 8000566:	2120      	movs	r1, #32
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <main+0xb0>)
 800056a:	f006 ff03 	bl	8007374 <CDC_Transmit_FS>
		  flag = 0;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <main+0xac>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e004      	b.n	8000580 <main+0x8c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, led2_Pin, 1); // Blink LED until message received
 8000576:	2201      	movs	r2, #1
 8000578:	2140      	movs	r1, #64	@ 0x40
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <main+0xa8>)
 800057c:	f001 fc22 	bl	8001dc4 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000584:	f000 fab2 	bl	8000aec <HAL_Delay>
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)  // Check if mailbox is free
 8000588:	e7d3      	b.n	8000532 <main+0x3e>
 800058a:	bf00      	nop
 800058c:	20000164 	.word	0x20000164
 8000590:	2000013c 	.word	0x2000013c
 8000594:	20000198 	.word	0x20000198
 8000598:	20000000 	.word	0x20000000
 800059c:	40020000 	.word	0x40020000
 80005a0:	2000019e 	.word	0x2000019e
 80005a4:	20000004 	.word	0x20000004

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fb38 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a28      	ldr	r2, [pc, #160]	@ (8000678 <SystemClock_Config+0xd0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <SystemClock_Config+0xd4>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <SystemClock_Config+0xd4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000604:	2303      	movs	r3, #3
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000624:	2348      	movs	r3, #72	@ 0x48
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800062c:	2303      	movs	r3, #3
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fe31 	bl	800329c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f8e4 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f893 	bl	800378c <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800066c:	f000 f8ce 	bl	800080c <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	@ 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_CAN1_Init+0xa8>)
 8000688:	4a28      	ldr	r2, [pc, #160]	@ (800072c <MX_CAN1_Init+0xac>)
 800068a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_CAN1_Init+0xa8>)
 800068e:	2210      	movs	r2, #16
 8000690:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <MX_CAN1_Init+0xa8>)
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_CAN1_Init+0xa8>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006a2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80006a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006aa:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80006ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d4:	4814      	ldr	r0, [pc, #80]	@ (8000728 <MX_CAN1_Init+0xa8>)
 80006d6:	f000 fa2d 	bl	8000b34 <HAL_CAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80006e0:	f000 f894 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;

  canFilterConfig.FilterActivation = ENABLE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterBank = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterIdHigh = 0x0000;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIdLow = 0x0000;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  canFilterConfig.SlaveStartFilterBank = 14; // F4 için önemli
 8000708:	230e      	movs	r3, #14
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_CAN1_Init+0xa8>)
 8000712:	f000 fb0b 	bl	8000d2c <HAL_CAN_ConfigFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CAN1_Init+0xa0>
  {
      Error_Handler();
 800071c:	f000 f876 	bl	800080c <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000013c 	.word	0x2000013c
 800072c:	40006400 	.word	0x40006400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_GPIO_Init+0x98>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a1e      	ldr	r2, [pc, #120]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <MX_GPIO_Init+0x98>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	21c0      	movs	r1, #192	@ 0xc0
 800079e:	480b      	ldr	r0, [pc, #44]	@ (80007cc <MX_GPIO_Init+0x9c>)
 80007a0:	f001 fb10 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led2_Pin led3_Pin */
  GPIO_InitStruct.Pin = led2_Pin|led3_Pin;
 80007a4:	23c0      	movs	r3, #192	@ 0xc0
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_GPIO_Init+0x9c>)
 80007bc:	f001 f966 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000

080007d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, testRx);
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007da:	4a09      	ldr	r2, [pc, #36]	@ (8000800 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007dc:	2100      	movs	r1, #0
 80007de:	4809      	ldr	r0, [pc, #36]	@ (8000804 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007e0:	f000 fccb 	bl	800117a <HAL_CAN_GetRxMessage>
    CDC_Transmit_FS(testRx, 2);
 80007e4:	2102      	movs	r1, #2
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007e8:	f006 fdc4 	bl	8007374 <CDC_Transmit_FS>
    //if (testRx[0] == 2 && testRx[1] == 3)
    //{
        flag = 1;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
    //}

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000019c 	.word	0x2000019c
 8000800:	2000017c 	.word	0x2000017c
 8000804:	2000013c 	.word	0x2000013c
 8000808:	2000019e 	.word	0x2000019e

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <HAL_CAN_MspInit+0x94>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d133      	bne.n	80008f2 <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 8000894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_CAN_MspInit+0x98>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c2:	2303      	movs	r3, #3
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008d2:	2309      	movs	r3, #9
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <HAL_CAN_MspInit+0x9c>)
 80008de:	f001 f8d5 	bl	8001a8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2014      	movs	r0, #20
 80008e8:	f001 f899 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008ec:	2014      	movs	r0, #20
 80008ee:	f001 f8b2 	bl	8001a56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	@ 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40006400 	.word	0x40006400
 8000900:	40023800 	.word	0x40023800
 8000904:	40020c00 	.word	0x40020c00

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <NMI_Handler+0x4>

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095e:	f000 f8a5 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <CAN1_RX0_IRQHandler+0x10>)
 800096e:	f000 fd4c 	bl	800140a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000013c 	.word	0x2000013c

0800097c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <OTG_FS_IRQHandler+0x10>)
 8000982:	f001 fb7c 	bl	800207e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20001684 	.word	0x20001684

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f007 f92b 	bl	8007c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd85 	bl	80004f4 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80009f8:	08007d04 	.word	0x08007d04
  ldr r2, =_sbss
 80009fc:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000a00:	20001d88 	.word	0x20001d88

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 ffe9 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff feec 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f801 	bl	8001a72 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a88:	f000 ffc9 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000024 	.word	0x20000024
 8000aa4:	2000002c 	.word	0x2000002c
 8000aa8:	20000028 	.word	0x20000028

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000002c 	.word	0x2000002c
 8000ad0:	200001a0 	.word	0x200001a0

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200001a0 	.word	0x200001a0

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000002c 	.word	0x2000002c

08000b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0ed      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fe88 	bl	8000868 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b68:	f7ff ffb4 	bl	8000ad4 <HAL_GetTick>
 8000b6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b6e:	e012      	b.n	8000b96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b70:	f7ff ffb0 	bl	8000ad4 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b0a      	cmp	r3, #10
 8000b7c:	d90b      	bls.n	8000b96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0c5      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0e5      	beq.n	8000b70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0202 	bic.w	r2, r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb4:	f7ff ff8e 	bl	8000ad4 <HAL_GetTick>
 8000bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bba:	e012      	b.n	8000be2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bbc:	f7ff ff8a 	bl	8000ad4 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d90b      	bls.n	8000be2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2205      	movs	r2, #5
 8000bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e09f      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7e5b      	ldrb	r3, [r3, #25]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e9b      	ldrb	r3, [r3, #26]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0220 	orr.w	r2, r2, #32
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0220 	bic.w	r2, r2, #32
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7edb      	ldrb	r3, [r3, #27]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0210 	bic.w	r2, r2, #16
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0210 	orr.w	r2, r2, #16
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7f1b      	ldrb	r3, [r3, #28]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0208 	orr.w	r2, r2, #8
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0208 	bic.w	r2, r2, #8
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7f5b      	ldrb	r3, [r3, #29]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d108      	bne.n	8000cdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f042 0204 	orr.w	r2, r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	ea42 0103 	orr.w	r1, r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d003      	beq.n	8000d4c <HAL_CAN_ConfigFilter+0x20>
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	f040 80be 	bne.w	8000ec8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000d4c:	4b65      	ldr	r3, [pc, #404]	@ (8000ee4 <HAL_CAN_ConfigFilter+0x1b8>)
 8000d4e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d66:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f003 031f 	and.w	r3, r3, #31
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d123      	bne.n	8000df6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	3248      	adds	r2, #72	@ 0x48
 8000dd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	3348      	adds	r3, #72	@ 0x48
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d122      	bne.n	8000e44 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	3248      	adds	r2, #72	@ 0x48
 8000e24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e3a:	6939      	ldr	r1, [r7, #16]
 8000e3c:	3348      	adds	r3, #72	@ 0x48
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d109      	bne.n	8000e8c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d107      	bne.n	8000eb4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000eba:	f023 0201 	bic.w	r2, r3, #1
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e006      	b.n	8000ed6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ecc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
  }
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40006400 	.word	0x40006400

08000ee8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d12e      	bne.n	8000f5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fdde 	bl	8000ad4 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f1a:	e012      	b.n	8000f42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f1c:	f7ff fdda 	bl	8000ad4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e012      	b.n	8000f68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e5      	bne.n	8000f1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e006      	b.n	8000f68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
  }
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d003      	beq.n	8000f9c <HAL_CAN_AddTxMessage+0x2c>
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	f040 80ad 	bne.w	80010f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8095 	beq.w	80010e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	0e1b      	lsrs	r3, r3, #24
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe2:	68f9      	ldr	r1, [r7, #12]
 8000fe4:	6809      	ldr	r1, [r1, #0]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3318      	adds	r3, #24
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	440b      	add	r3, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e00f      	b.n	8001014 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ffe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001008:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3318      	adds	r3, #24
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	440b      	add	r3, r1
 8001012:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3318      	adds	r3, #24
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	440b      	add	r3, r1
 8001024:	3304      	adds	r3, #4
 8001026:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d111      	bne.n	8001054 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3318      	adds	r3, #24
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	3304      	adds	r3, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	6811      	ldr	r1, [r2, #0]
 8001044:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3318      	adds	r3, #24
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	440b      	add	r3, r1
 8001050:	3304      	adds	r3, #4
 8001052:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3307      	adds	r3, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	061a      	lsls	r2, r3, #24
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3306      	adds	r3, #6
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3305      	adds	r3, #5
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	4313      	orrs	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	3204      	adds	r2, #4
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	4610      	mov	r0, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	ea43 0200 	orr.w	r2, r3, r0
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	440b      	add	r3, r1
 8001086:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800108a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3303      	adds	r3, #3
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	061a      	lsls	r2, r3, #24
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3302      	adds	r3, #2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3301      	adds	r3, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	4313      	orrs	r3, r2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4610      	mov	r0, r2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	ea43 0200 	orr.w	r2, r3, r0
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80010c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3318      	adds	r3, #24
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	6811      	ldr	r1, [r2, #0]
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3318      	adds	r3, #24
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	440b      	add	r3, r1
 80010e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e00e      	b.n	8001104 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e006      	b.n	8001104 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
  }
}
 8001104:	4618      	mov	r0, r3
 8001106:	3724      	adds	r7, #36	@ 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d002      	beq.n	8001130 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d11d      	bne.n	800116c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800117a:	b480      	push	{r7}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d003      	beq.n	800119e <HAL_CAN_GetRxMessage+0x24>
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b02      	cmp	r3, #2
 800119a:	f040 8103 	bne.w	80013a4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10e      	bne.n	80011c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0f7      	b.n	80013b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0e8      	b.n	80013b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	331b      	adds	r3, #27
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0204 	and.w	r2, r3, #4
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	331b      	adds	r3, #27
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e00b      	b.n	8001230 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	331b      	adds	r3, #27
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0202 	and.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	331b      	adds	r3, #27
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2208      	movs	r2, #8
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	e00b      	b.n	800127e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	331b      	adds	r3, #27
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4413      	add	r3, r2
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 020f 	and.w	r2, r3, #15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	331b      	adds	r3, #27
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b2da      	uxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	331b      	adds	r3, #27
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0c1b      	lsrs	r3, r3, #16
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0a1a      	lsrs	r2, r3, #8
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0c1a      	lsrs	r2, r3, #16
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3302      	adds	r3, #2
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0e1a      	lsrs	r2, r3, #24
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3303      	adds	r3, #3
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	4413      	add	r3, r2
 800131c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3304      	adds	r3, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0a1a      	lsrs	r2, r3, #8
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3305      	adds	r3, #5
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0c1a      	lsrs	r2, r3, #16
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3306      	adds	r3, #6
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0e1a      	lsrs	r2, r3, #24
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3307      	adds	r3, #7
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e007      	b.n	80013a0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e006      	b.n	80013b2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d002      	beq.n	80013dc <HAL_CAN_ActivateNotification+0x1e>
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d109      	bne.n	80013f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6959      	ldr	r1, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e006      	b.n	80013fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
  }
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b08a      	sub	sp, #40	@ 0x28
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d07c      	beq.n	800154a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d023      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f983 	bl	8001778 <HAL_CAN_TxMailbox0CompleteCallback>
 8001472:	e016      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
 8001486:	e00c      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
 800149a:	e002      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f989 	bl	80017b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d024      	beq.n	80014f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f963 	bl	800178c <HAL_CAN_TxMailbox1CompleteCallback>
 80014c6:	e016      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014da:	e00c      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ee:	e002      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f969 	bl	80017c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d024      	beq.n	800154a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001508:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f943 	bl	80017a0 <HAL_CAN_TxMailbox2CompleteCallback>
 800151a:	e016      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	e00c      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
 8001542:	e002      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f949 	bl	80017dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f930 	bl	80017f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff f911 	bl	80007d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2210      	movs	r2, #16
 80015d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f912 	bl	8001818 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8f9 	bl	8001804 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2210      	movs	r2, #16
 800162c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8fc 	bl	800182c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2208      	movs	r2, #8
 800164e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f8f5 	bl	8001840 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d07b      	beq.n	8001758 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d072      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d043      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03e      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016d8:	2b60      	cmp	r3, #96	@ 0x60
 80016da:	d02b      	beq.n	8001734 <HAL_CAN_IRQHandler+0x32a>
 80016dc:	2b60      	cmp	r3, #96	@ 0x60
 80016de:	d82e      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016e0:	2b50      	cmp	r3, #80	@ 0x50
 80016e2:	d022      	beq.n	800172a <HAL_CAN_IRQHandler+0x320>
 80016e4:	2b50      	cmp	r3, #80	@ 0x50
 80016e6:	d82a      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016e8:	2b40      	cmp	r3, #64	@ 0x40
 80016ea:	d019      	beq.n	8001720 <HAL_CAN_IRQHandler+0x316>
 80016ec:	2b40      	cmp	r3, #64	@ 0x40
 80016ee:	d826      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016f0:	2b30      	cmp	r3, #48	@ 0x30
 80016f2:	d010      	beq.n	8001716 <HAL_CAN_IRQHandler+0x30c>
 80016f4:	2b30      	cmp	r3, #48	@ 0x30
 80016f6:	d822      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d002      	beq.n	8001702 <HAL_CAN_IRQHandler+0x2f8>
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d005      	beq.n	800170c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001700:	e01d      	b.n	800173e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800170a:	e019      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001714:	e014      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800171e:	e00f      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001728:	e00a      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001732:	e005      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800173c:	e000      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            break;
 800173e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800174e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2204      	movs	r2, #4
 8001756:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f872 	bl	8001854 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af02      	add	r7, sp, #8
 8001dfc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e101      	b.n	800200c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f005 fbee 	bl	8007604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e36:	d102      	bne.n	8001e3e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 ffb1 	bl	8003daa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7c1a      	ldrb	r2, [r3, #16]
 8001e50:	f88d 2000 	strb.w	r2, [sp]
 8001e54:	3304      	adds	r3, #4
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	f001 fe90 	bl	8003b7c <USB_CoreInit>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0ce      	b.n	800200c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 ffa9 	bl	8003dcc <USB_SetCurrentMode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0bf      	b.n	800200c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e04a      	b.n	8001f28 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3315      	adds	r3, #21
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	b298      	uxth	r0, r3
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	332e      	adds	r3, #46	@ 0x2e
 8001ece:	4602      	mov	r2, r0
 8001ed0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	331c      	adds	r3, #28
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3320      	adds	r3, #32
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3324      	adds	r3, #36	@ 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	791b      	ldrb	r3, [r3, #4]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3af      	bcc.n	8001e92 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e044      	b.n	8001fc2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3b5      	bcc.n	8001f38 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7c1a      	ldrb	r2, [r3, #16]
 8001fd4:	f88d 2000 	strb.w	r2, [sp]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fdc:	f001 ff42 	bl	8003e64 <USB_DevInit>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00c      	b.n	800200c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 ff8c 	bl	8004f22 <USB_DevDisconnect>

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_PCD_Start+0x1c>
 800202c:	2302      	movs	r3, #2
 800202e:	e022      	b.n	8002076 <HAL_PCD_Start+0x62>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 fe93 	bl	8003d88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 ff3a 	bl	8004ee0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800207e:	b590      	push	{r4, r7, lr}
 8002080:	b08d      	sub	sp, #52	@ 0x34
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fff8 	bl	800508a <USB_GetMode>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 848c 	bne.w	80029ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ff5c 	bl	8004f64 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8482 	beq.w	80029b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 ff49 	bl	8004f64 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d107      	bne.n	80020ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f002 0202 	and.w	r2, r2, #2
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 ff37 	bl	8004f64 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d161      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0210 	bic.w	r2, r2, #16
 800210e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	3304      	adds	r3, #4
 800212e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800213a:	d124      	bne.n	8002186 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d035      	beq.n	80021b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	6a38      	ldr	r0, [r7, #32]
 800215c:	f002 fd6e 	bl	8004c3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216c:	441a      	add	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217e:	441a      	add	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	e016      	b.n	80021b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800218c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002190:	d110      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002198:	2208      	movs	r2, #8
 800219a:	4619      	mov	r1, r3
 800219c:	6a38      	ldr	r0, [r7, #32]
 800219e:	f002 fd4d 	bl	8004c3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ae:	441a      	add	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0210 	orr.w	r2, r2, #16
 80021c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fecb 	bl	8004f64 <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80021d8:	f040 80a7 	bne.w	800232a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fed0 	bl	8004f8a <USB_ReadDevAllOutEpInterrupt>
 80021ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80021ec:	e099      	b.n	8002322 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808e 	beq.w	8002316 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f002 fef4 	bl	8004ff2 <USB_ReadDevOutEPInterrupt>
 800220a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002222:	461a      	mov	r2, r3
 8002224:	2301      	movs	r3, #1
 8002226:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fea4 	bl	8002f78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	2308      	movs	r3, #8
 800224a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800224c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 ff7a 	bl	8003148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226a:	461a      	mov	r2, r3
 800226c:	2310      	movs	r3, #16
 800226e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d030      	beq.n	80022dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	2b80      	cmp	r3, #128	@ 0x80
 8002284:	d109      	bne.n	800229a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002294:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002298:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800229a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	78db      	ldrb	r3, [r3, #3]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2200      	movs	r2, #0
 80022bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f005 faa3 	bl	8007810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	2302      	movs	r3, #2
 80022da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2320      	movs	r3, #32
 80022f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002314:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f af62 	bne.w	80021ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fe18 	bl	8004f64 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800233a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800233e:	f040 80db 	bne.w	80024f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fe39 	bl	8004fbe <USB_ReadDevAllInEpInterrupt>
 800234c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002352:	e0cd      	b.n	80024f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80c2 	beq.w	80024e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fe5f 	bl	800502e <USB_ReadDevInEPInterrupt>
 8002370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d057      	beq.n	800242c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	2201      	movs	r2, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	69f9      	ldr	r1, [r7, #28]
 8002398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800239c:	4013      	ands	r3, r2
 800239e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ac:	461a      	mov	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	799b      	ldrb	r3, [r3, #6]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d132      	bne.n	8002420 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3320      	adds	r3, #32
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4403      	add	r3, r0
 80023da:	331c      	adds	r3, #28
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4419      	add	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4403      	add	r3, r0
 80023ee:	3320      	adds	r3, #32
 80023f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d113      	bne.n	8002420 <HAL_PCD_IRQHandler+0x3a2>
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3324      	adds	r3, #36	@ 0x24
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002418:	461a      	mov	r2, r3
 800241a:	2101      	movs	r1, #1
 800241c:	f002 fe66 	bl	80050ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f005 f96d 	bl	8007706 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002442:	461a      	mov	r2, r3
 8002444:	2308      	movs	r3, #8
 8002446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800245e:	461a      	mov	r2, r3
 8002460:	2310      	movs	r3, #16
 8002462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800247a:	461a      	mov	r2, r3
 800247c:	2340      	movs	r3, #64	@ 0x40
 800247e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d023      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800248a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800248c:	6a38      	ldr	r0, [r7, #32]
 800248e:	f001 fe4d 	bl	800412c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3310      	adds	r3, #16
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	78db      	ldrb	r3, [r3, #3]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 f9ba 	bl	8007834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024cc:	461a      	mov	r2, r3
 80024ce:	2302      	movs	r3, #2
 80024d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fcbd 	bl	8002e5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	3301      	adds	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f47f af2e 	bne.w	8002354 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fd31 	bl	8004f64 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800250c:	d122      	bne.n	8002554 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002528:	2b01      	cmp	r3, #1
 800252a:	d108      	bne.n	800253e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002534:	2100      	movs	r1, #0
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fea4 	bl	8003284 <HAL_PCDEx_LPM_Callback>
 800253c:	e002      	b.n	8002544 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 f958 	bl	80077f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fd03 	bl	8004f64 <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002568:	d112      	bne.n	8002590 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f005 f914 	bl	80077a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800258e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fce5 	bl	8004f64 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a4:	f040 80b7 	bne.w	8002716 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2110      	movs	r1, #16
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fdb2 	bl	800412c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025cc:	e046      	b.n	800265c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025da:	461a      	mov	r2, r3
 80025dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80025e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f2:	0151      	lsls	r1, r2, #5
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	440a      	add	r2, r1
 80025f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80025fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800260e:	461a      	mov	r2, r3
 8002610:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002614:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	440a      	add	r2, r1
 800262c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002630:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002634:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	440a      	add	r2, r1
 800264c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002650:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002654:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	3301      	adds	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	791b      	ldrb	r3, [r3, #4]
 8002660:	461a      	mov	r2, r3
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	4293      	cmp	r3, r2
 8002666:	d3b2      	bcc.n	80025ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002676:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800267a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7bdb      	ldrb	r3, [r3, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800268a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002694:	f043 030b 	orr.w	r3, r3, #11
 8002698:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026aa:	f043 030b 	orr.w	r3, r3, #11
 80026ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b0:	e015      	b.n	80026de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026c4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80026c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026d8:	f043 030b 	orr.w	r3, r3, #11
 80026dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80026f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002700:	461a      	mov	r2, r3
 8002702:	f002 fcf3 	bl	80050ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fc22 	bl	8004f64 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272a:	d123      	bne.n	8002774 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fcb8 	bl	80050a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f001 fd6f 	bl	800421e <USB_GetDevSpeed>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	f001 fa0a 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8002750:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002756:	461a      	mov	r2, r3
 8002758:	4620      	mov	r0, r4
 800275a:	f001 fa73 	bl	8003c44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f004 fff9 	bl	8007756 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002772:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fbf3 	bl	8004f64 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d10a      	bne.n	800279e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f004 ffd6 	bl	800773a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 0208 	and.w	r2, r2, #8
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fbde 	bl	8004f64 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b80      	cmp	r3, #128	@ 0x80
 80027b0:	d123      	bne.n	80027fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027be:	2301      	movs	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	e014      	b.n	80027ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb0a 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	3301      	adds	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	791b      	ldrb	r3, [r3, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d3e4      	bcc.n	80027c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fbb0 	bl	8004f64 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800280e:	d13c      	bne.n	800288a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002810:	2301      	movs	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
 8002814:	e02b      	b.n	800286e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3318      	adds	r3, #24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d115      	bne.n	8002868 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800283c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	da12      	bge.n	8002868 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3317      	adds	r3, #23
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 faca 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	3301      	adds	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	4293      	cmp	r3, r2
 8002878:	d3cd      	bcc.n	8002816 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fb68 	bl	8004f64 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800289a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800289e:	d156      	bne.n	800294e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a0:	2301      	movs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a4:	e045      	b.n	8002932 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12e      	bne.n	800292c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da2b      	bge.n	800292c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	0c1a      	lsrs	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80028de:	4053      	eors	r3, r2
 80028e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d121      	bne.n	800292c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002928:	6053      	str	r3, [r2, #4]
            break;
 800292a:	e008      	b.n	800293e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	3301      	adds	r3, #1
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	4293      	cmp	r3, r2
 800293c:	d3b3      	bcc.n	80028a6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fb06 	bl	8004f64 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002962:	d10a      	bne.n	800297a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f004 ff77 	bl	8007858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 faf0 	bl	8004f64 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d115      	bne.n	80029ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f004 ff67 	bl	8007874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e000      	b.n	80029ba <HAL_PCD_IRQHandler+0x93c>
      return;
 80029b8:	bf00      	nop
    }
  }
}
 80029ba:	3734      	adds	r7, #52	@ 0x34
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}

080029c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_PCD_SetAddress+0x1a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e012      	b.n	8002a00 <HAL_PCD_SetAddress+0x40>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fa4f 	bl	8004e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	70fb      	strb	r3, [r7, #3]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	803b      	strh	r3, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0f      	bge.n	8002a4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3310      	adds	r3, #16
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
 8002a4c:	e00f      	b.n	8002a6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002a7a:	883b      	ldrh	r3, [r7, #0]
 8002a7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	78ba      	ldrb	r2, [r7, #2]
 8002a88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	785b      	ldrb	r3, [r3, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a9c:	78bb      	ldrb	r3, [r7, #2]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_EP_Open+0xae>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e00e      	b.n	8002ad4 <HAL_PCD_EP_Open+0xcc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fbcf 	bl	8004268 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da0f      	bge.n	8002b10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	3310      	adds	r3, #16
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	705a      	strb	r2, [r3, #1]
 8002b0e:	e00f      	b.n	8002b30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_PCD_EP_Close+0x6e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e00e      	b.n	8002b68 <HAL_PCD_EP_Close+0x8c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 fc0d 	bl	8004378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	7afb      	ldrb	r3, [r7, #11]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	799b      	ldrb	r3, [r3, #6]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	f001 fcaa 	bl	8004530 <USB_EPStartXfer>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c08:	681b      	ldr	r3, [r3, #0]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	460b      	mov	r3, r1
 8002c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3310      	adds	r3, #16
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2201      	movs	r2, #1
 8002c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c56:	7afb      	ldrb	r3, [r7, #11]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	799b      	ldrb	r3, [r3, #6]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	f001 fc58 	bl	8004530 <USB_EPStartXfer>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	7912      	ldrb	r2, [r2, #4]
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e04f      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0f      	bge.n	8002cd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3310      	adds	r3, #16
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00d      	b.n	8002cec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_SetStall+0x82>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e01d      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xbe>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 ffe6 	bl	8004cec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7999      	ldrb	r1, [r3, #6]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f002 f9d7 	bl	80050ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	7912      	ldrb	r2, [r2, #4]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0f      	bge.n	8002d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3310      	adds	r3, #16
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e00f      	b.n	8002db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_ClrStall+0x86>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 ffef 	bl	8004dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da0c      	bge.n	8002e2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3310      	adds	r3, #16
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e00c      	b.n	8002e44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fe0e 	bl	8004a6c <USB_EPStopXfer>
 8002e50:	4603      	mov	r3, r0
 8002e52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08a      	sub	sp, #40	@ 0x28
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d901      	bls.n	8002e96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d902      	bls.n	8002eb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eba:	e02a      	b.n	8002f12 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d902      	bls.n	8002ed8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3303      	adds	r3, #3
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f001 fe63 	bl	8004bc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	441a      	add	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d809      	bhi.n	8002f3c <PCD_WriteEmptyTxFifo+0xde>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d203      	bcs.n	8002f3c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1bf      	bne.n	8002ebc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d811      	bhi.n	8002f6c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	2201      	movs	r2, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	6939      	ldr	r1, [r7, #16]
 8002f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f68:	4013      	ands	r3, r2
 8002f6a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	333c      	adds	r3, #60	@ 0x3c
 8002f90:	3304      	adds	r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d17b      	bne.n	80030a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	4a61      	ldr	r2, [pc, #388]	@ (8003140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f240 80b9 	bls.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80b3 	beq.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe0:	6093      	str	r3, [r2, #8]
 8002fe2:	e0a7      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e098      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8093 	bne.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d90f      	bls.n	8003036 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e07e      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	0159      	lsls	r1, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	440b      	add	r3, r1
 8003058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	1ad2      	subs	r2, r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003080:	461a      	mov	r2, r3
 8003082:	2101      	movs	r1, #1
 8003084:	f002 f832 	bl	80050ec <USB_EP0_OutStart>
 8003088:	e006      	b.n	8003098 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	441a      	add	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f004 fb16 	bl	80076d0 <HAL_PCD_DataOutStageCallback>
 80030a4:	e046      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4a26      	ldr	r2, [pc, #152]	@ (8003144 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d124      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	e032      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	2320      	movs	r3, #32
 80030e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f004 faed 	bl	80076d0 <HAL_PCD_DataOutStageCallback>
 80030f6:	e01d      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d114      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003120:	461a      	mov	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f001 ffe2 	bl	80050ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f004 face 	bl	80076d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	4f54300a 	.word	0x4f54300a
 8003144:	4f54310a 	.word	0x4f54310a

08003148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	333c      	adds	r3, #60	@ 0x3c
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d90e      	bls.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f004 fa85 	bl	80076ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d90c      	bls.n	80031c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031bc:	461a      	mov	r2, r3
 80031be:	2101      	movs	r1, #1
 80031c0:	f001 ff94 	bl	80050ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	4f54300a 	.word	0x4f54300a

080031d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	4613      	mov	r3, r2
 80031e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031f2:	883b      	ldrh	r3, [r7, #0]
 80031f4:	0419      	lsls	r1, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003200:	e028      	b.n	8003254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4413      	add	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e00d      	b.n	8003232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	3340      	adds	r3, #64	@ 0x40
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	3301      	adds	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	3b01      	subs	r3, #1
 8003238:	429a      	cmp	r2, r3
 800323a:	d3ec      	bcc.n	8003216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800323c:	883b      	ldrh	r3, [r7, #0]
 800323e:	0418      	lsls	r0, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	3b01      	subs	r3, #1
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4302      	orrs	r2, r0
 800324c:	3340      	adds	r3, #64	@ 0x40
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ba:	4b88      	ldr	r3, [pc, #544]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd fbbe 	bl	8000ad4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fd fbba 	bl	8000ad4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fbaa 	bl	8000ad4 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fd fba6 	bl	8000ad4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033b2:	4b4a      	ldr	r3, [pc, #296]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fd fb5f 	bl	8000ad4 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341a:	f7fd fb5b 	bl	8000ad4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd fb3e 	bl	8000ad4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345c:	f7fd fb3a 	bl	8000ad4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fd fb1e 	bl	8000ad4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fd fb1a 	bl	8000ad4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fb07 	bl	8000ad4 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fd fb03 	bl	8000ad4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	@ 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fd fac3 	bl	8000ad4 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fd fabf 	bl	8000ad4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd fa84 	bl	8000ad4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fd fa80 	bl	8000ad4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fd fa6e 	bl	8000ad4 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fd fa6a 	bl	8000ad4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fd fa3e 	bl	8000ad4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd fa3a 	bl	8000ad4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fd fa13 	bl	8000ad4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fa0f 	bl	8000ad4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd f9fc 	bl	8000ad4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd f9f8 	bl	8000ad4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fd f92a 	bl	8000ad4 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd f926 	bl	8000ad4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	@ (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f88a 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	08007ce4 	.word	0x08007ce4
 8003950:	20000024 	.word	0x20000024
 8003954:	20000028 	.word	0x20000028

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b094      	sub	sp, #80	@ 0x50
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b79      	ldr	r3, [pc, #484]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80e1 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e0db      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b73      	ldr	r3, [pc, #460]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003990:	e0db      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003994:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003996:	e0d8      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b6f      	ldr	r3, [pc, #444]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c2:	2300      	movs	r3, #0
 80039c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ca:	4622      	mov	r2, r4
 80039cc:	462b      	mov	r3, r5
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	0159      	lsls	r1, r3, #5
 80039d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039dc:	0150      	lsls	r0, r2, #5
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4621      	mov	r1, r4
 80039e4:	1a51      	subs	r1, r2, r1
 80039e6:	6139      	str	r1, [r7, #16]
 80039e8:	4629      	mov	r1, r5
 80039ea:	eb63 0301 	sbc.w	r3, r3, r1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039fc:	4659      	mov	r1, fp
 80039fe:	018b      	lsls	r3, r1, #6
 8003a00:	4651      	mov	r1, sl
 8003a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a06:	4651      	mov	r1, sl
 8003a08:	018a      	lsls	r2, r1, #6
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a10:	4659      	mov	r1, fp
 8003a12:	eb63 0901 	sbc.w	r9, r3, r1
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	eb18 0303 	adds.w	r3, r8, r3
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	462b      	mov	r3, r5
 8003a38:	eb49 0303 	adc.w	r3, r9, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	024b      	lsls	r3, r1, #9
 8003a4e:	4621      	mov	r1, r4
 8003a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a54:	4621      	mov	r1, r4
 8003a56:	024a      	lsls	r2, r1, #9
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a68:	f7fc fbae 	bl	80001c8 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a74:	e058      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b38      	ldr	r3, [pc, #224]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4611      	mov	r1, r2
 8003a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa2:	0150      	lsls	r0, r2, #5
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8003acc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	61fa      	str	r2, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	f7fc fb54 	bl	80001c8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3750      	adds	r7, #80	@ 0x50
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000024 	.word	0x20000024

08003b7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	f107 001c 	add.w	r0, r7, #28
 8003b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d123      	bne.n	8003bde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 fae8 	bl	80051a8 <USB_CoreReset>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e01b      	b.n	8003c16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 fadc 	bl	80051a8 <USB_CoreReset>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c08:	e005      	b.n	8003c16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c16:	7fbb      	ldrb	r3, [r7, #30]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10b      	bne.n	8003c34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f043 0206 	orr.w	r2, r3, #6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c40:	b004      	add	sp, #16
 8003c42:	4770      	bx	lr

08003c44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d165      	bne.n	8003d24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4a41      	ldr	r2, [pc, #260]	@ (8003d60 <USB_SetTurnaroundTime+0x11c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d906      	bls.n	8003c6e <USB_SetTurnaroundTime+0x2a>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a40      	ldr	r2, [pc, #256]	@ (8003d64 <USB_SetTurnaroundTime+0x120>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d202      	bcs.n	8003c6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c68:	230f      	movs	r3, #15
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e062      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4a3c      	ldr	r2, [pc, #240]	@ (8003d64 <USB_SetTurnaroundTime+0x120>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d306      	bcc.n	8003c84 <USB_SetTurnaroundTime+0x40>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4a3b      	ldr	r2, [pc, #236]	@ (8003d68 <USB_SetTurnaroundTime+0x124>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d202      	bcs.n	8003c84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c7e:	230e      	movs	r3, #14
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e057      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <USB_SetTurnaroundTime+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d306      	bcc.n	8003c9a <USB_SetTurnaroundTime+0x56>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4a37      	ldr	r2, [pc, #220]	@ (8003d6c <USB_SetTurnaroundTime+0x128>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d202      	bcs.n	8003c9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c94:	230d      	movs	r3, #13
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e04c      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4a33      	ldr	r2, [pc, #204]	@ (8003d6c <USB_SetTurnaroundTime+0x128>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d306      	bcc.n	8003cb0 <USB_SetTurnaroundTime+0x6c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4a32      	ldr	r2, [pc, #200]	@ (8003d70 <USB_SetTurnaroundTime+0x12c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d802      	bhi.n	8003cb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003caa:	230c      	movs	r3, #12
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e041      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d70 <USB_SetTurnaroundTime+0x12c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d906      	bls.n	8003cc6 <USB_SetTurnaroundTime+0x82>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <USB_SetTurnaroundTime+0x130>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d802      	bhi.n	8003cc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cc0:	230b      	movs	r3, #11
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e036      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <USB_SetTurnaroundTime+0x130>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d906      	bls.n	8003cdc <USB_SetTurnaroundTime+0x98>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <USB_SetTurnaroundTime+0x134>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d802      	bhi.n	8003cdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cd6:	230a      	movs	r3, #10
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e02b      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a26      	ldr	r2, [pc, #152]	@ (8003d78 <USB_SetTurnaroundTime+0x134>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d906      	bls.n	8003cf2 <USB_SetTurnaroundTime+0xae>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a25      	ldr	r2, [pc, #148]	@ (8003d7c <USB_SetTurnaroundTime+0x138>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d202      	bcs.n	8003cf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cec:	2309      	movs	r3, #9
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e020      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	@ (8003d7c <USB_SetTurnaroundTime+0x138>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d306      	bcc.n	8003d08 <USB_SetTurnaroundTime+0xc4>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <USB_SetTurnaroundTime+0x13c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d02:	2308      	movs	r3, #8
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e015      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <USB_SetTurnaroundTime+0x13c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d906      	bls.n	8003d1e <USB_SetTurnaroundTime+0xda>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <USB_SetTurnaroundTime+0x140>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d202      	bcs.n	8003d1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d18:	2307      	movs	r3, #7
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e00a      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d1e:	2306      	movs	r3, #6
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e007      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d2a:	2309      	movs	r3, #9
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e001      	b.n	8003d34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d30:	2309      	movs	r3, #9
 8003d32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	029b      	lsls	r3, r3, #10
 8003d48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	00d8acbf 	.word	0x00d8acbf
 8003d64:	00e4e1c0 	.word	0x00e4e1c0
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	01067380 	.word	0x01067380
 8003d70:	011a499f 	.word	0x011a499f
 8003d74:	01312cff 	.word	0x01312cff
 8003d78:	014ca43f 	.word	0x014ca43f
 8003d7c:	016e3600 	.word	0x016e3600
 8003d80:	01a6ab1f 	.word	0x01a6ab1f
 8003d84:	01e84800 	.word	0x01e84800

08003d88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0201 	bic.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d115      	bne.n	8003e1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dfa:	200a      	movs	r0, #10
 8003dfc:	f7fc fe76 	bl	8000aec <HAL_Delay>
      ms += 10U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	330a      	adds	r3, #10
 8003e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 f93f 	bl	800508a <USB_GetMode>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d01e      	beq.n	8003e50 <USB_SetCurrentMode+0x84>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e16:	d9f0      	bls.n	8003dfa <USB_SetCurrentMode+0x2e>
 8003e18:	e01a      	b.n	8003e50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d115      	bne.n	8003e4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e2c:	200a      	movs	r0, #10
 8003e2e:	f7fc fe5d 	bl	8000aec <HAL_Delay>
      ms += 10U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	330a      	adds	r3, #10
 8003e36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f926 	bl	800508a <USB_GetMode>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <USB_SetCurrentMode+0x84>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e48:	d9f0      	bls.n	8003e2c <USB_SetCurrentMode+0x60>
 8003e4a:	e001      	b.n	8003e50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e005      	b.n	8003e5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2bc8      	cmp	r3, #200	@ 0xc8
 8003e54:	d101      	bne.n	8003e5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e64:	b084      	sub	sp, #16
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e009      	b.n	8003e98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3340      	adds	r3, #64	@ 0x40
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0e      	cmp	r3, #14
 8003e9c:	d9f2      	bls.n	8003e84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11c      	bne.n	8003ee0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ede:	e00b      	b.n	8003ef8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10d      	bne.n	8003f28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f14:	2100      	movs	r1, #0
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f968 	bl	80041ec <USB_SetDevSpeed>
 8003f1c:	e008      	b.n	8003f30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f1e:	2101      	movs	r1, #1
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f963 	bl	80041ec <USB_SetDevSpeed>
 8003f26:	e003      	b.n	8003f30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f28:	2103      	movs	r1, #3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f95e 	bl	80041ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f30:	2110      	movs	r1, #16
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8fa 	bl	800412c <USB_FlushTxFifo>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f924 	bl	8004190 <USB_FlushRxFifo>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f64:	461a      	mov	r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f70:	461a      	mov	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e043      	b.n	8004004 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f92:	d118      	bne.n	8003fc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e013      	b.n	8003fd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e008      	b.n	8003fd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3301      	adds	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004008:	461a      	mov	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4293      	cmp	r3, r2
 800400e:	d3b5      	bcc.n	8003f7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e043      	b.n	800409e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800402c:	d118      	bne.n	8004060 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e013      	b.n	8004072 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004056:	461a      	mov	r2, r3
 8004058:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e008      	b.n	8004072 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3301      	adds	r3, #1
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040a2:	461a      	mov	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d3b5      	bcc.n	8004016 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80040ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f043 0210 	orr.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <USB_DevInit+0x2c4>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f043 0208 	orr.w	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004100:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004124:	b004      	add	sp, #16
 8004126:	4770      	bx	lr
 8004128:	803c3800 	.word	0x803c3800

0800412c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004146:	d901      	bls.n	800414c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e01b      	b.n	8004184 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	daf2      	bge.n	800413a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	019b      	lsls	r3, r3, #6
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004170:	d901      	bls.n	8004176 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e006      	b.n	8004184 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d0f0      	beq.n	8004164 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041a8:	d901      	bls.n	80041ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e018      	b.n	80041e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	daf2      	bge.n	800419c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2210      	movs	r2, #16
 80041be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041cc:	d901      	bls.n	80041d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d0f0      	beq.n	80041c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
 8004242:	e00a      	b.n	800425a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d002      	beq.n	8004250 <USB_GetDevSpeed+0x32>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d102      	bne.n	8004256 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004250:	2302      	movs	r3, #2
 8004252:	75fb      	strb	r3, [r7, #23]
 8004254:	e001      	b.n	800425a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004256:	230f      	movs	r3, #15
 8004258:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d13a      	bne.n	80042fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d155      	bne.n	8004368 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	059b      	lsls	r3, r3, #22
 80042de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042e0:	4313      	orrs	r3, r2
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e036      	b.n	8004368 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d11a      	bne.n	8004368 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	791b      	ldrb	r3, [r3, #4]
 800434c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800434e:	430b      	orrs	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004366:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d161      	bne.n	8004458 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043aa:	d11f      	bne.n	80043ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	b29b      	uxth	r3, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800440c:	4013      	ands	r3, r2
 800440e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	b29b      	uxth	r3, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004430:	4013      	ands	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0159      	lsls	r1, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	440b      	add	r3, r1
 800444a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444e:	4619      	mov	r1, r3
 8004450:	4b35      	ldr	r3, [pc, #212]	@ (8004528 <USB_DeactivateEndpoint+0x1b0>)
 8004452:	4013      	ands	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	e060      	b.n	800451a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800446a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800446e:	d11f      	bne.n	80044b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800448a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800448e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	43db      	mvns	r3, r3
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044d0:	4013      	ands	r3, r2
 80044d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	43db      	mvns	r3, r3
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044f4:	4013      	ands	r3, r2
 80044f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	440b      	add	r3, r1
 800450e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004512:	4619      	mov	r1, r3
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <USB_DeactivateEndpoint+0x1b4>)
 8004516:	4013      	ands	r3, r2
 8004518:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	ec337800 	.word	0xec337800
 800452c:	eff37800 	.word	0xeff37800

08004530 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	@ 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2b01      	cmp	r3, #1
 800454e:	f040 817f 	bne.w	8004850 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d132      	bne.n	80045c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004574:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004578:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800457c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800459c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b8:	0cdb      	lsrs	r3, r3, #19
 80045ba:	04db      	lsls	r3, r3, #19
 80045bc:	6113      	str	r3, [r2, #16]
 80045be:	e097      	b.n	80046f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	0151      	lsls	r1, r2, #5
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	440a      	add	r2, r1
 80045d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045da:	0cdb      	lsrs	r3, r3, #19
 80045dc:	04db      	lsls	r3, r3, #19
 80045de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004602:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11a      	bne.n	8004640 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800463c:	6113      	str	r3, [r2, #16]
 800463e:	e044      	b.n	80046ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4413      	add	r3, r2
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	8afb      	ldrh	r3, [r7, #22]
 8004666:	04d9      	lsls	r1, r3, #19
 8004668:	4ba4      	ldr	r3, [pc, #656]	@ (80048fc <USB_EPStartXfer+0x3cc>)
 800466a:	400b      	ands	r3, r1
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	0148      	lsls	r0, r1, #5
 8004670:	69f9      	ldr	r1, [r7, #28]
 8004672:	4401      	add	r1, r0
 8004674:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004678:	4313      	orrs	r3, r2
 800467a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	791b      	ldrb	r3, [r3, #4]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d122      	bne.n	80046ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800469e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80046a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	8afb      	ldrh	r3, [r7, #22]
 80046b4:	075b      	lsls	r3, r3, #29
 80046b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	0148      	lsls	r0, r1, #5
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	4401      	add	r1, r0
 80046c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046c6:	4313      	orrs	r3, r2
 80046c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	0148      	lsls	r0, r1, #5
 80046e4:	69f9      	ldr	r1, [r7, #28]
 80046e6:	4401      	add	r1, r0
 80046e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046ec:	4313      	orrs	r3, r2
 80046ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d14b      	bne.n	800478e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d128      	bne.n	800476c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d110      	bne.n	800474c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004744:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00f      	b.n	800476c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004786:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e166      	b.n	8004a5c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	791b      	ldrb	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d015      	beq.n	80047e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 814e 	beq.w	8004a5c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	69f9      	ldr	r1, [r7, #28]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	634b      	str	r3, [r1, #52]	@ 0x34
 80047e0:	e13c      	b.n	8004a5c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d110      	bne.n	8004814 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800480c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e00f      	b.n	8004834 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	68d9      	ldr	r1, [r3, #12]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	b298      	uxth	r0, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4603      	mov	r3, r0
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f9b9 	bl	8004bc0 <USB_WritePacket>
 800484e:	e105      	b.n	8004a5c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800486a:	0cdb      	lsrs	r3, r3, #19
 800486c:	04db      	lsls	r3, r3, #19
 800486e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800488a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800488e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004892:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d132      	bne.n	8004900 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	0148      	lsls	r0, r1, #5
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	4401      	add	r1, r0
 80048d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048f6:	6113      	str	r3, [r2, #16]
 80048f8:	e062      	b.n	80049c0 <USB_EPStartXfer+0x490>
 80048fa:	bf00      	nop
 80048fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d123      	bne.n	8004950 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491e:	69b9      	ldr	r1, [r7, #24]
 8004920:	0148      	lsls	r0, r1, #5
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	4401      	add	r1, r0
 8004926:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800492a:	4313      	orrs	r3, r2
 800492c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800494c:	6113      	str	r3, [r2, #16]
 800494e:	e037      	b.n	80049c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4413      	add	r3, r2
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	8afa      	ldrh	r2, [r7, #22]
 800496c:	fb03 f202 	mul.w	r2, r3, r2
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	04d9      	lsls	r1, r3, #19
 8004986:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <USB_EPStartXfer+0x538>)
 8004988:	400b      	ands	r3, r1
 800498a:	69b9      	ldr	r1, [r7, #24]
 800498c:	0148      	lsls	r0, r1, #5
 800498e:	69f9      	ldr	r1, [r7, #28]
 8004990:	4401      	add	r1, r0
 8004992:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	0148      	lsls	r0, r1, #5
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	4401      	add	r1, r0
 80049b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10d      	bne.n	80049e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	68d9      	ldr	r1, [r3, #12]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049de:	460a      	mov	r2, r1
 80049e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d128      	bne.n	8004a3c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00f      	b.n	8004a3c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	1ff80000 	.word	0x1ff80000

08004a6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d14a      	bne.n	8004b20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa2:	f040 8086 	bne.w	8004bb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	7812      	ldrb	r2, [r2, #0]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ac8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d902      	bls.n	8004b04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
          break;
 8004b02:	e056      	b.n	8004bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b1c:	d0e7      	beq.n	8004aee <USB_EPStopXfer+0x82>
 8004b1e:	e048      	b.n	8004bb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b38:	d13b      	bne.n	8004bb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d902      	bls.n	8004b98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
          break;
 8004b96:	e00c      	b.n	8004bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb0:	d0e7      	beq.n	8004b82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	71fb      	strb	r3, [r7, #7]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d123      	bne.n	8004c2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004be6:	88bb      	ldrh	r3, [r7, #4]
 8004be8:	3303      	adds	r3, #3
 8004bea:	089b      	lsrs	r3, r3, #2
 8004bec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e018      	b.n	8004c26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	031a      	lsls	r2, r3, #12
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c00:	461a      	mov	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	3301      	adds	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	3301      	adds	r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3e2      	bcc.n	8004bf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3724      	adds	r7, #36	@ 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b08b      	sub	sp, #44	@ 0x2c
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	e014      	b.n	8004c92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	3301      	adds	r3, #1
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	3301      	adds	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	3301      	adds	r3, #1
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3e6      	bcc.n	8004c68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c9a:	8bfb      	ldrh	r3, [r7, #30]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01e      	beq.n	8004cde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004caa:	461a      	mov	r2, r3
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	701a      	strb	r2, [r3, #0]
      i++;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	3301      	adds	r3, #1
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004cd2:	8bfb      	ldrh	r3, [r7, #30]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cd8:	8bfb      	ldrh	r3, [r7, #30]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ea      	bne.n	8004cb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	372c      	adds	r7, #44	@ 0x2c
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d12c      	bne.n	8004d62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	db12      	blt.n	8004d40 <USB_EPSetStall+0x54>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00f      	beq.n	8004d40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e02b      	b.n	8004dba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	db12      	blt.n	8004d9a <USB_EPSetStall+0xae>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00f      	beq.n	8004d9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004db4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004db8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d128      	bne.n	8004e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	791b      	ldrb	r3, [r3, #4]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d003      	beq.n	8004e14 <USB_EPClearStall+0x4c>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	791b      	ldrb	r3, [r3, #4]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d138      	bne.n	8004e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e027      	b.n	8004e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	791b      	ldrb	r3, [r3, #4]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d003      	beq.n	8004e66 <USB_EPClearStall+0x9e>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	791b      	ldrb	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d10f      	bne.n	8004e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004eb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f0e:	f023 0302 	bic.w	r3, r3, #2
 8004f12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	b29b      	uxth	r3, r3
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005020:	68bb      	ldr	r3, [r7, #8]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005050:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	b2db      	uxtb	r3, r3
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800507c:	68bb      	ldr	r3, [r7, #8]
}
 800507e:	4618      	mov	r0, r3
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80050c4:	f023 0307 	bic.w	r3, r3, #7
 80050c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	460b      	mov	r3, r1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	333c      	adds	r3, #60	@ 0x3c
 8005102:	3304      	adds	r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <USB_EP0_OutStart+0xb8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d90a      	bls.n	8005126 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800511c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005120:	d101      	bne.n	8005126 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e037      	b.n	8005196 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005140:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005154:	f043 0318 	orr.w	r3, r3, #24
 8005158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005168:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800516c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800516e:	7afb      	ldrb	r3, [r7, #11]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10f      	bne.n	8005194 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800518e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	4f54300a 	.word	0x4f54300a

080051a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051c0:	d901      	bls.n	80051c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e022      	b.n	800520c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	daf2      	bge.n	80051b4 <USB_CoreReset+0xc>

  count = 10U;
 80051ce:	230a      	movs	r3, #10
 80051d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80051d2:	e002      	b.n	80051da <USB_CoreReset+0x32>
  {
    count--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f9      	bne.n	80051d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f043 0201 	orr.w	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f8:	d901      	bls.n	80051fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e006      	b.n	800520c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d0f0      	beq.n	80051ec <USB_CoreReset+0x44>

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005224:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005228:	f002 fcbc 	bl	8007ba4 <USBD_static_malloc>
 800522c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	32b0      	adds	r2, #176	@ 0xb0
 800523e:	2100      	movs	r1, #0
 8005240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005244:	2302      	movs	r3, #2
 8005246:	e0d4      	b.n	80053f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005248:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800524c:	2100      	movs	r1, #0
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f002 fcec 	bl	8007c2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	32b0      	adds	r2, #176	@ 0xb0
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	32b0      	adds	r2, #176	@ 0xb0
 800526e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7c1b      	ldrb	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d138      	bne.n	80052f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005280:	4b5e      	ldr	r3, [pc, #376]	@ (80053fc <USBD_CDC_Init+0x1e4>)
 8005282:	7819      	ldrb	r1, [r3, #0]
 8005284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005288:	2202      	movs	r2, #2
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f002 fb67 	bl	800795e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005290:	4b5a      	ldr	r3, [pc, #360]	@ (80053fc <USBD_CDC_Init+0x1e4>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3323      	adds	r3, #35	@ 0x23
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052aa:	4b55      	ldr	r3, [pc, #340]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 80052ac:	7819      	ldrb	r1, [r3, #0]
 80052ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052b2:	2202      	movs	r2, #2
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f002 fb52 	bl	800795e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052ba:	4b51      	ldr	r3, [pc, #324]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <USBD_CDC_Init+0x1ec>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	331c      	adds	r3, #28
 80052ec:	2210      	movs	r2, #16
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e035      	b.n	800535e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052f2:	4b42      	ldr	r3, [pc, #264]	@ (80053fc <USBD_CDC_Init+0x1e4>)
 80052f4:	7819      	ldrb	r1, [r3, #0]
 80052f6:	2340      	movs	r3, #64	@ 0x40
 80052f8:	2202      	movs	r2, #2
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fb2f 	bl	800795e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005300:	4b3e      	ldr	r3, [pc, #248]	@ (80053fc <USBD_CDC_Init+0x1e4>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3323      	adds	r3, #35	@ 0x23
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 800531c:	7819      	ldrb	r1, [r3, #0]
 800531e:	2340      	movs	r3, #64	@ 0x40
 8005320:	2202      	movs	r2, #2
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 fb1b 	bl	800795e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005328:	4b35      	ldr	r3, [pc, #212]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005344:	4b2f      	ldr	r3, [pc, #188]	@ (8005404 <USBD_CDC_Init+0x1ec>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	331c      	adds	r3, #28
 800535a:	2210      	movs	r2, #16
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800535e:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <USBD_CDC_Init+0x1ec>)
 8005360:	7819      	ldrb	r1, [r3, #0]
 8005362:	2308      	movs	r3, #8
 8005364:	2203      	movs	r2, #3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f002 faf9 	bl	800795e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <USBD_CDC_Init+0x1ec>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3323      	adds	r3, #35	@ 0x23
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	33b0      	adds	r3, #176	@ 0xb0
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053bc:	2302      	movs	r3, #2
 80053be:	e018      	b.n	80053f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7c1b      	ldrb	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 80053ca:	7819      	ldrb	r1, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f002 fbb0 	bl	8007b3c <USBD_LL_PrepareReceive>
 80053dc:	e008      	b.n	80053f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <USBD_CDC_Init+0x1e8>)
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053e8:	2340      	movs	r3, #64	@ 0x40
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f002 fba6 	bl	8007b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200000b7 	.word	0x200000b7
 8005400:	200000b8 	.word	0x200000b8
 8005404:	200000b9 	.word	0x200000b9

08005408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005414:	4b3a      	ldr	r3, [pc, #232]	@ (8005500 <USBD_CDC_DeInit+0xf8>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f002 fac5 	bl	80079aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005420:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <USBD_CDC_DeInit+0xf8>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 020f 	and.w	r2, r3, #15
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3323      	adds	r3, #35	@ 0x23
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800543a:	4b32      	ldr	r3, [pc, #200]	@ (8005504 <USBD_CDC_DeInit+0xfc>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f002 fab2 	bl	80079aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005446:	4b2f      	ldr	r3, [pc, #188]	@ (8005504 <USBD_CDC_DeInit+0xfc>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f003 020f 	and.w	r2, r3, #15
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005462:	4b29      	ldr	r3, [pc, #164]	@ (8005508 <USBD_CDC_DeInit+0x100>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 fa9e 	bl	80079aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800546e:	4b26      	ldr	r3, [pc, #152]	@ (8005508 <USBD_CDC_DeInit+0x100>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	3323      	adds	r3, #35	@ 0x23
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005488:	4b1f      	ldr	r3, [pc, #124]	@ (8005508 <USBD_CDC_DeInit+0x100>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	331c      	adds	r3, #28
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	32b0      	adds	r2, #176	@ 0xb0
 80054ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01f      	beq.n	80054f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	33b0      	adds	r3, #176	@ 0xb0
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	32b0      	adds	r2, #176	@ 0xb0
 80054d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f002 fb72 	bl	8007bc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	32b0      	adds	r2, #176	@ 0xb0
 80054e6:	2100      	movs	r1, #0
 80054e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	200000b7 	.word	0x200000b7
 8005504:	200000b8 	.word	0x200000b8
 8005508:	200000b9 	.word	0x200000b9

0800550c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	32b0      	adds	r2, #176	@ 0xb0
 8005520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005524:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	e0bf      	b.n	80056bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005544:	2b00      	cmp	r3, #0
 8005546:	d050      	beq.n	80055ea <USBD_CDC_Setup+0xde>
 8005548:	2b20      	cmp	r3, #32
 800554a:	f040 80af 	bne.w	80056ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	88db      	ldrh	r3, [r3, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d03a      	beq.n	80055cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	b25b      	sxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	da1b      	bge.n	8005598 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	33b0      	adds	r3, #176	@ 0xb0
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	88d2      	ldrh	r2, [r2, #6]
 800557c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	88db      	ldrh	r3, [r3, #6]
 8005582:	2b07      	cmp	r3, #7
 8005584:	bf28      	it	cs
 8005586:	2307      	movcs	r3, #7
 8005588:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	89fa      	ldrh	r2, [r7, #14]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fda9 	bl	80070e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005596:	e090      	b.n	80056ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785a      	ldrb	r2, [r3, #1]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	88db      	ldrh	r3, [r3, #6]
 80055a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80055a8:	d803      	bhi.n	80055b2 <USBD_CDC_Setup+0xa6>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88db      	ldrh	r3, [r3, #6]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	e000      	b.n	80055b4 <USBD_CDC_Setup+0xa8>
 80055b2:	2240      	movs	r2, #64	@ 0x40
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80055c2:	461a      	mov	r2, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fdbe 	bl	8007146 <USBD_CtlPrepareRx>
      break;
 80055ca:	e076      	b.n	80056ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	33b0      	adds	r3, #176	@ 0xb0
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	7850      	ldrb	r0, [r2, #1]
 80055e2:	2200      	movs	r2, #0
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	4798      	blx	r3
      break;
 80055e8:	e067      	b.n	80056ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b0b      	cmp	r3, #11
 80055f0:	d851      	bhi.n	8005696 <USBD_CDC_Setup+0x18a>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <USBD_CDC_Setup+0xec>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005629 	.word	0x08005629
 80055fc:	080056a5 	.word	0x080056a5
 8005600:	08005697 	.word	0x08005697
 8005604:	08005697 	.word	0x08005697
 8005608:	08005697 	.word	0x08005697
 800560c:	08005697 	.word	0x08005697
 8005610:	08005697 	.word	0x08005697
 8005614:	08005697 	.word	0x08005697
 8005618:	08005697 	.word	0x08005697
 800561c:	08005697 	.word	0x08005697
 8005620:	08005653 	.word	0x08005653
 8005624:	0800567d 	.word	0x0800567d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b03      	cmp	r3, #3
 8005632:	d107      	bne.n	8005644 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005634:	f107 030a 	add.w	r3, r7, #10
 8005638:	2202      	movs	r2, #2
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fd53 	bl	80070e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005642:	e032      	b.n	80056aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fcd1 	bl	8006fee <USBD_CtlError>
            ret = USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	75fb      	strb	r3, [r7, #23]
          break;
 8005650:	e02b      	b.n	80056aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d107      	bne.n	800566e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800565e:	f107 030d 	add.w	r3, r7, #13
 8005662:	2201      	movs	r2, #1
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fd3e 	bl	80070e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800566c:	e01d      	b.n	80056aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fcbc 	bl	8006fee <USBD_CtlError>
            ret = USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	75fb      	strb	r3, [r7, #23]
          break;
 800567a:	e016      	b.n	80056aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d00f      	beq.n	80056a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fcaf 	bl	8006fee <USBD_CtlError>
            ret = USBD_FAIL;
 8005690:	2303      	movs	r3, #3
 8005692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005694:	e008      	b.n	80056a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fca8 	bl	8006fee <USBD_CtlError>
          ret = USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	75fb      	strb	r3, [r7, #23]
          break;
 80056a2:	e002      	b.n	80056aa <USBD_CDC_Setup+0x19e>
          break;
 80056a4:	bf00      	nop
 80056a6:	e008      	b.n	80056ba <USBD_CDC_Setup+0x1ae>
          break;
 80056a8:	bf00      	nop
      }
      break;
 80056aa:	e006      	b.n	80056ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 fc9d 	bl	8006fee <USBD_CtlError>
      ret = USBD_FAIL;
 80056b4:	2303      	movs	r3, #3
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80056d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	32b0      	adds	r2, #176	@ 0xb0
 80056e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e065      	b.n	80057ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	32b0      	adds	r2, #176	@ 0xb0
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	f003 020f 	and.w	r2, r3, #15
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	3314      	adds	r3, #20
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02f      	beq.n	8005778 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	f003 020f 	and.w	r2, r3, #15
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	3314      	adds	r3, #20
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 010f 	and.w	r1, r3, #15
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	460b      	mov	r3, r1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	440b      	add	r3, r1
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4403      	add	r3, r0
 8005740:	331c      	adds	r3, #28
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	fbb2 f1f3 	udiv	r1, r2, r3
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800574e:	2b00      	cmp	r3, #0
 8005750:	d112      	bne.n	8005778 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3314      	adds	r3, #20
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800576a:	78f9      	ldrb	r1, [r7, #3]
 800576c:	2300      	movs	r3, #0
 800576e:	2200      	movs	r2, #0
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f002 f9c2 	bl	8007afa <USBD_LL_Transmit>
 8005776:	e01f      	b.n	80057b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	33b0      	adds	r3, #176	@ 0xb0
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	33b0      	adds	r3, #176	@ 0xb0
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	32b0      	adds	r2, #176	@ 0xb0
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	32b0      	adds	r2, #176	@ 0xb0
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01a      	b.n	800582a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f002 f9c0 	bl	8007b7e <USBD_LL_GetRxDataSize>
 80057fe:	4602      	mov	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	33b0      	adds	r3, #176	@ 0xb0
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005824:	4611      	mov	r1, r2
 8005826:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	32b0      	adds	r2, #176	@ 0xb0
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e024      	b.n	800589e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	33b0      	adds	r3, #176	@ 0xb0
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d019      	beq.n	800589c <USBD_CDC_EP0_RxReady+0x6a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800586e:	2bff      	cmp	r3, #255	@ 0xff
 8005870:	d014      	beq.n	800589c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	33b0      	adds	r3, #176	@ 0xb0
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800588a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005892:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	22ff      	movs	r2, #255	@ 0xff
 8005898:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058b0:	2182      	movs	r1, #130	@ 0x82
 80058b2:	4818      	ldr	r0, [pc, #96]	@ (8005914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058b4:	f000 fd62 	bl	800637c <USBD_GetEpDesc>
 80058b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058ba:	2101      	movs	r1, #1
 80058bc:	4815      	ldr	r0, [pc, #84]	@ (8005914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058be:	f000 fd5d 	bl	800637c <USBD_GetEpDesc>
 80058c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058c4:	2181      	movs	r1, #129	@ 0x81
 80058c6:	4813      	ldr	r0, [pc, #76]	@ (8005914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058c8:	f000 fd58 	bl	800637c <USBD_GetEpDesc>
 80058cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2210      	movs	r2, #16
 80058d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058e8:	711a      	strb	r2, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fc:	711a      	strb	r2, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2243      	movs	r2, #67	@ 0x43
 8005906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005908:	4b02      	ldr	r3, [pc, #8]	@ (8005914 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000074 	.word	0x20000074

08005918 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005920:	2182      	movs	r1, #130	@ 0x82
 8005922:	4818      	ldr	r0, [pc, #96]	@ (8005984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005924:	f000 fd2a 	bl	800637c <USBD_GetEpDesc>
 8005928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800592a:	2101      	movs	r1, #1
 800592c:	4815      	ldr	r0, [pc, #84]	@ (8005984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800592e:	f000 fd25 	bl	800637c <USBD_GetEpDesc>
 8005932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005934:	2181      	movs	r1, #129	@ 0x81
 8005936:	4813      	ldr	r0, [pc, #76]	@ (8005984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005938:	f000 fd20 	bl	800637c <USBD_GetEpDesc>
 800593c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2210      	movs	r2, #16
 8005948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d006      	beq.n	800595e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2200      	movs	r2, #0
 8005954:	711a      	strb	r2, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f042 0202 	orr.w	r2, r2, #2
 800595c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d006      	beq.n	8005972 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	711a      	strb	r2, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f042 0202 	orr.w	r2, r2, #2
 8005970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2243      	movs	r2, #67	@ 0x43
 8005976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005978:	4b02      	ldr	r3, [pc, #8]	@ (8005984 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000074 	.word	0x20000074

08005988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005990:	2182      	movs	r1, #130	@ 0x82
 8005992:	4818      	ldr	r0, [pc, #96]	@ (80059f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005994:	f000 fcf2 	bl	800637c <USBD_GetEpDesc>
 8005998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800599a:	2101      	movs	r1, #1
 800599c:	4815      	ldr	r0, [pc, #84]	@ (80059f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800599e:	f000 fced 	bl	800637c <USBD_GetEpDesc>
 80059a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059a4:	2181      	movs	r1, #129	@ 0x81
 80059a6:	4813      	ldr	r0, [pc, #76]	@ (80059f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059a8:	f000 fce8 	bl	800637c <USBD_GetEpDesc>
 80059ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2210      	movs	r2, #16
 80059b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d006      	beq.n	80059ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c8:	711a      	strb	r2, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059dc:	711a      	strb	r2, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2243      	movs	r2, #67	@ 0x43
 80059e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059e8:	4b02      	ldr	r3, [pc, #8]	@ (80059f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000074 	.word	0x20000074

080059f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	220a      	movs	r2, #10
 8005a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a06:	4b03      	ldr	r3, [pc, #12]	@ (8005a14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000030 	.word	0x20000030

08005a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e009      	b.n	8005a40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	33b0      	adds	r3, #176	@ 0xb0
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	32b0      	adds	r2, #176	@ 0xb0
 8005a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e008      	b.n	8005a84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32b0      	adds	r2, #176	@ 0xb0
 8005aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e004      	b.n	8005abe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32b0      	adds	r2, #176	@ 0xb0
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e025      	b.n	8005b3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11f      	bne.n	8005b3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b04:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <USBD_CDC_TransmitPacket+0x7c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4403      	add	r3, r0
 8005b1e:	3314      	adds	r3, #20
 8005b20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b22:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <USBD_CDC_TransmitPacket+0x7c>)
 8005b24:	7819      	ldrb	r1, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 ffe1 	bl	8007afa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200000b7 	.word	0x200000b7

08005b4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32b0      	adds	r2, #176	@ 0xb0
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	32b0      	adds	r2, #176	@ 0xb0
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e018      	b.n	8005bac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	7c1b      	ldrb	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <USBD_CDC_ReceivePacket+0x68>)
 8005b84:	7819      	ldrb	r1, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 ffd3 	bl	8007b3c <USBD_LL_PrepareReceive>
 8005b96:	e008      	b.n	8005baa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b98:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <USBD_CDC_ReceivePacket+0x68>)
 8005b9a:	7819      	ldrb	r1, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ba2:	2340      	movs	r3, #64	@ 0x40
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 ffc9 	bl	8007b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200000b8 	.word	0x200000b8

08005bb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e01f      	b.n	8005c10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	79fa      	ldrb	r2, [r7, #7]
 8005c02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f001 fe43 	bl	8007890 <USBD_LL_Init>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e025      	b.n	8005c7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32ae      	adds	r2, #174	@ 0xae
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00f      	beq.n	8005c6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	32ae      	adds	r2, #174	@ 0xae
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	f107 020e 	add.w	r2, r7, #14
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 fe4b 	bl	8007928 <USBD_LL_Start>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
 8005cdc:	4603      	mov	r3, r0
 8005cde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	4611      	mov	r1, r2
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f922 	bl	8006f7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d44:	461a      	mov	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d01a      	beq.n	8005d90 <USBD_LL_SetupStage+0x72>
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d822      	bhi.n	8005da4 <USBD_LL_SetupStage+0x86>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <USBD_LL_SetupStage+0x4a>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00a      	beq.n	8005d7c <USBD_LL_SetupStage+0x5e>
 8005d66:	e01d      	b.n	8005da4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb77 	bl	8006464 <USBD_StdDevReq>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7a:	e020      	b.n	8005dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbdf 	bl	8006548 <USBD_StdItfReq>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8e:	e016      	b.n	8005dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fc41 	bl	8006620 <USBD_StdEPReq>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
      break;
 8005da2:	e00c      	b.n	8005dbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005daa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 fe18 	bl	80079e8 <USBD_LL_StallEP>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	bf00      	nop
  }

  return ret;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d177      	bne.n	8005ed0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	f040 80a1 	bne.w	8005f36 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	8992      	ldrh	r2, [r2, #12]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d91c      	bls.n	8005e3a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	8992      	ldrh	r2, [r2, #12]
 8005e08:	1a9a      	subs	r2, r3, r2
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	8992      	ldrh	r2, [r2, #12]
 8005e16:	441a      	add	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6919      	ldr	r1, [r3, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	899b      	ldrh	r3, [r3, #12]
 8005e24:	461a      	mov	r2, r3
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bf38      	it	cc
 8005e2e:	4613      	movcc	r3, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f001 f9a8 	bl	8007188 <USBD_CtlContinueRx>
 8005e38:	e07d      	b.n	8005f36 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d014      	beq.n	8005e72 <USBD_LL_DataOutStage+0xaa>
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d81d      	bhi.n	8005e88 <USBD_LL_DataOutStage+0xc0>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <USBD_LL_DataOutStage+0x8e>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d003      	beq.n	8005e5c <USBD_LL_DataOutStage+0x94>
 8005e54:	e018      	b.n	8005e88 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	75bb      	strb	r3, [r7, #22]
            break;
 8005e5a:	e018      	b.n	8005e8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fa6e 	bl	8006348 <USBD_CoreFindIF>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e70:	e00d      	b.n	8005e8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa70 	bl	8006362 <USBD_CoreFindEP>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75bb      	strb	r3, [r7, #22]
            break;
 8005e86:	e002      	b.n	8005e8e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e8c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e8e:	7dbb      	ldrb	r3, [r7, #22]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d119      	bne.n	8005ec8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d113      	bne.n	8005ec8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ea0:	7dba      	ldrb	r2, [r7, #22]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	32ae      	adds	r2, #174	@ 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005eb0:	7dba      	ldrb	r2, [r7, #22]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005eb8:	7dba      	ldrb	r2, [r7, #22]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	32ae      	adds	r2, #174	@ 0xae
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f001 f96e 	bl	80071aa <USBD_CtlSendStatus>
 8005ece:	e032      	b.n	8005f36 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa41 	bl	8006362 <USBD_CoreFindEP>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ee4:	7dbb      	ldrb	r3, [r7, #22]
 8005ee6:	2bff      	cmp	r3, #255	@ 0xff
 8005ee8:	d025      	beq.n	8005f36 <USBD_LL_DataOutStage+0x16e>
 8005eea:	7dbb      	ldrb	r3, [r7, #22]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d122      	bne.n	8005f36 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d117      	bne.n	8005f2c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005efc:	7dba      	ldrb	r2, [r7, #22]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	32ae      	adds	r2, #174	@ 0xae
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005f0c:	7dba      	ldrb	r2, [r7, #22]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f14:	7dba      	ldrb	r2, [r7, #22]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	32ae      	adds	r2, #174	@ 0xae
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	7afa      	ldrb	r2, [r7, #11]
 8005f22:	4611      	mov	r1, r2
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	4798      	blx	r3
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	e000      	b.n	8005f38 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d178      	bne.n	8006046 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3314      	adds	r3, #20
 8005f58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d163      	bne.n	800602c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	8992      	ldrh	r2, [r2, #12]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d91c      	bls.n	8005faa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	8992      	ldrh	r2, [r2, #12]
 8005f78:	1a9a      	subs	r2, r3, r2
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	8992      	ldrh	r2, [r2, #12]
 8005f86:	441a      	add	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6919      	ldr	r1, [r3, #16]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	461a      	mov	r2, r3
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f001 f8c4 	bl	8007124 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 fdca 	bl	8007b3c <USBD_LL_PrepareReceive>
 8005fa8:	e040      	b.n	800602c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	899b      	ldrh	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d11c      	bne.n	8005ff2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d316      	bcc.n	8005ff2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d20f      	bcs.n	8005ff2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f001 f8a4 	bl	8007124 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fda6 	bl	8007b3c <USBD_LL_PrepareReceive>
 8005ff0:	e01c      	b.n	800602c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d10f      	bne.n	800601e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800601e:	2180      	movs	r1, #128	@ 0x80
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f001 fce1 	bl	80079e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f001 f8d2 	bl	80071d0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d03a      	beq.n	80060ac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fe30 	bl	8005c9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006044:	e032      	b.n	80060ac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800604c:	b2db      	uxtb	r3, r3
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f986 	bl	8006362 <USBD_CoreFindEP>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2bff      	cmp	r3, #255	@ 0xff
 800605e:	d025      	beq.n	80060ac <USBD_LL_DataInStage+0x16c>
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d122      	bne.n	80060ac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d11c      	bne.n	80060ac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006072:	7dfa      	ldrb	r2, [r7, #23]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	32ae      	adds	r2, #174	@ 0xae
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d014      	beq.n	80060ac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006082:	7dfa      	ldrb	r2, [r7, #23]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800608a:	7dfa      	ldrb	r2, [r7, #23]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	32ae      	adds	r2, #174	@ 0xae
 8006090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	7afa      	ldrb	r2, [r7, #11]
 8006098:	4611      	mov	r1, r2
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	4798      	blx	r3
 800609e:	4603      	mov	r3, r0
 80060a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060a2:	7dbb      	ldrb	r3, [r7, #22]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80060a8:	7dbb      	ldrb	r3, [r7, #22]
 80060aa:	e000      	b.n	80060ae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d014      	beq.n	800611c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6852      	ldr	r2, [r2, #4]
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	4611      	mov	r1, r2
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006118:	2303      	movs	r3, #3
 800611a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800611c:	2340      	movs	r3, #64	@ 0x40
 800611e:	2200      	movs	r2, #0
 8006120:	2100      	movs	r1, #0
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fc1b 	bl	800795e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2240      	movs	r2, #64	@ 0x40
 8006134:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006138:	2340      	movs	r3, #64	@ 0x40
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	@ 0x80
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fc0d 	bl	800795e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2240      	movs	r2, #64	@ 0x40
 8006150:	841a      	strh	r2, [r3, #32]

  return ret;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b04      	cmp	r3, #4
 800618e:	d006      	beq.n	800619e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006196:	b2da      	uxtb	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d106      	bne.n	80061d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d110      	bne.n	800621a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	@ 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	e01c      	b.n	8006280 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b03      	cmp	r3, #3
 8006250:	d115      	bne.n	800627e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32ae      	adds	r2, #174	@ 0xae
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	32ae      	adds	r2, #174	@ 0xae
 8006270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	78fa      	ldrb	r2, [r7, #3]
 8006278:	4611      	mov	r1, r2
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32ae      	adds	r2, #174	@ 0xae
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01c      	b.n	80062e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d115      	bne.n	80062e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	32ae      	adds	r2, #174	@ 0xae
 80062c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	32ae      	adds	r2, #174	@ 0xae
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	4611      	mov	r1, r2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6852      	ldr	r2, [r2, #4]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	4611      	mov	r1, r2
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006354:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800636e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	885b      	ldrh	r3, [r3, #2]
 8006398:	b29b      	uxth	r3, r3
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d91f      	bls.n	80063e2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063a8:	e013      	b.n	80063d2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063aa:	f107 030a 	add.w	r3, r7, #10
 80063ae:	4619      	mov	r1, r3
 80063b0:	6978      	ldr	r0, [r7, #20]
 80063b2:	f000 f81b 	bl	80063ec <USBD_GetNextDesc>
 80063b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d108      	bne.n	80063d2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	789b      	ldrb	r3, [r3, #2]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d008      	beq.n	80063e0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	885b      	ldrh	r3, [r3, #2]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d8e5      	bhi.n	80063aa <USBD_GetEpDesc+0x2e>
 80063de:	e000      	b.n	80063e2 <USBD_GetEpDesc+0x66>
          break;
 80063e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063e2:	693b      	ldr	r3, [r7, #16]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	4413      	add	r3, r2
 8006404:	b29a      	uxth	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006416:	68fb      	ldr	r3, [r7, #12]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	3301      	adds	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006442:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	b21a      	sxth	r2, r3
 800644a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800644e:	4313      	orrs	r3, r2
 8006450:	b21b      	sxth	r3, r3
 8006452:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006454:	89fb      	ldrh	r3, [r7, #14]
}
 8006456:	4618      	mov	r0, r3
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d005      	beq.n	800648a <USBD_StdDevReq+0x26>
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d857      	bhi.n	8006532 <USBD_StdDevReq+0xce>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <USBD_StdDevReq+0x42>
 8006486:	2b20      	cmp	r3, #32
 8006488:	d153      	bne.n	8006532 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32ae      	adds	r2, #174	@ 0xae
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e04a      	b.n	800653c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b09      	cmp	r3, #9
 80064ac:	d83b      	bhi.n	8006526 <USBD_StdDevReq+0xc2>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <USBD_StdDevReq+0x50>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006509 	.word	0x08006509
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	08006527 	.word	0x08006527
 80064c0:	08006513 	.word	0x08006513
 80064c4:	08006527 	.word	0x08006527
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006527 	.word	0x08006527
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	080064f1 	.word	0x080064f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa3e 	bl	8006960 <USBD_GetDescriptor>
          break;
 80064e4:	e024      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fba3 	bl	8006c34 <USBD_SetAddress>
          break;
 80064ee:	e01f      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fbe2 	bl	8006cbc <USBD_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
          break;
 80064fc:	e018      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc85 	bl	8006e10 <USBD_GetConfig>
          break;
 8006506:	e013      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fcb6 	bl	8006e7c <USBD_GetStatus>
          break;
 8006510:	e00e      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fce5 	bl	8006ee4 <USBD_SetFeature>
          break;
 800651a:	e009      	b.n	8006530 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fd09 	bl	8006f36 <USBD_ClrFeature>
          break;
 8006524:	e004      	b.n	8006530 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fd60 	bl	8006fee <USBD_CtlError>
          break;
 800652e:	bf00      	nop
      }
      break;
 8006530:	e004      	b.n	800653c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd5a 	bl	8006fee <USBD_CtlError>
      break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	d005      	beq.n	800656e <USBD_StdItfReq+0x26>
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d852      	bhi.n	800660c <USBD_StdItfReq+0xc4>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <USBD_StdItfReq+0x26>
 800656a:	2b20      	cmp	r3, #32
 800656c:	d14e      	bne.n	800660c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	2b02      	cmp	r3, #2
 800657a:	d840      	bhi.n	80065fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	889b      	ldrh	r3, [r3, #4]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d836      	bhi.n	80065f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	889b      	ldrh	r3, [r3, #4]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff feda 	bl	8006348 <USBD_CoreFindIF>
 8006594:	4603      	mov	r3, r0
 8006596:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	2bff      	cmp	r3, #255	@ 0xff
 800659c:	d01d      	beq.n	80065da <USBD_StdItfReq+0x92>
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065a4:	7bba      	ldrb	r2, [r7, #14]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	32ae      	adds	r2, #174	@ 0xae
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00f      	beq.n	80065d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065b4:	7bba      	ldrb	r2, [r7, #14]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065bc:	7bba      	ldrb	r2, [r7, #14]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32ae      	adds	r2, #174	@ 0xae
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065d2:	e004      	b.n	80065de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065d8:	e001      	b.n	80065de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065da:	2303      	movs	r3, #3
 80065dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	88db      	ldrh	r3, [r3, #6]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d110      	bne.n	8006608 <USBD_StdItfReq+0xc0>
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10d      	bne.n	8006608 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fddc 	bl	80071aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065f2:	e009      	b.n	8006608 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fcf9 	bl	8006fee <USBD_CtlError>
          break;
 80065fc:	e004      	b.n	8006608 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fcf4 	bl	8006fee <USBD_CtlError>
          break;
 8006606:	e000      	b.n	800660a <USBD_StdItfReq+0xc2>
          break;
 8006608:	bf00      	nop
      }
      break;
 800660a:	e004      	b.n	8006616 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fced 	bl	8006fee <USBD_CtlError>
      break;
 8006614:	bf00      	nop
  }

  return ret;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	889b      	ldrh	r3, [r3, #4]
 8006632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d007      	beq.n	8006650 <USBD_StdEPReq+0x30>
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	f200 8181 	bhi.w	8006948 <USBD_StdEPReq+0x328>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d02a      	beq.n	80066a0 <USBD_StdEPReq+0x80>
 800664a:	2b20      	cmp	r3, #32
 800664c:	f040 817c 	bne.w	8006948 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff fe84 	bl	8006362 <USBD_CoreFindEP>
 800665a:	4603      	mov	r3, r0
 800665c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800665e:	7b7b      	ldrb	r3, [r7, #13]
 8006660:	2bff      	cmp	r3, #255	@ 0xff
 8006662:	f000 8176 	beq.w	8006952 <USBD_StdEPReq+0x332>
 8006666:	7b7b      	ldrb	r3, [r7, #13]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8172 	bne.w	8006952 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800666e:	7b7a      	ldrb	r2, [r7, #13]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006676:	7b7a      	ldrb	r2, [r7, #13]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	32ae      	adds	r2, #174	@ 0xae
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8165 	beq.w	8006952 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006688:	7b7a      	ldrb	r2, [r7, #13]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32ae      	adds	r2, #174	@ 0xae
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800669e:	e158      	b.n	8006952 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d008      	beq.n	80066ba <USBD_StdEPReq+0x9a>
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	f300 8147 	bgt.w	800693c <USBD_StdEPReq+0x31c>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 809b 	beq.w	80067ea <USBD_StdEPReq+0x1ca>
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d03c      	beq.n	8006732 <USBD_StdEPReq+0x112>
 80066b8:	e140      	b.n	800693c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d002      	beq.n	80066cc <USBD_StdEPReq+0xac>
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d016      	beq.n	80066f8 <USBD_StdEPReq+0xd8>
 80066ca:	e02c      	b.n	8006726 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <USBD_StdEPReq+0xce>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b80      	cmp	r3, #128	@ 0x80
 80066d6:	d00a      	beq.n	80066ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f983 	bl	80079e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f97f 	bl	80079e8 <USBD_LL_StallEP>
 80066ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066ec:	e020      	b.n	8006730 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fc7c 	bl	8006fee <USBD_CtlError>
              break;
 80066f6:	e01b      	b.n	8006730 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	885b      	ldrh	r3, [r3, #2]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10e      	bne.n	800671e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <USBD_StdEPReq+0xfe>
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	2b80      	cmp	r3, #128	@ 0x80
 800670a:	d008      	beq.n	800671e <USBD_StdEPReq+0xfe>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f965 	bl	80079e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fd43 	bl	80071aa <USBD_CtlSendStatus>

              break;
 8006724:	e004      	b.n	8006730 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc60 	bl	8006fee <USBD_CtlError>
              break;
 800672e:	bf00      	nop
          }
          break;
 8006730:	e109      	b.n	8006946 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d002      	beq.n	8006744 <USBD_StdEPReq+0x124>
 800673e:	2b03      	cmp	r3, #3
 8006740:	d016      	beq.n	8006770 <USBD_StdEPReq+0x150>
 8006742:	e04b      	b.n	80067dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <USBD_StdEPReq+0x146>
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b80      	cmp	r3, #128	@ 0x80
 800674e:	d00a      	beq.n	8006766 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f947 	bl	80079e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800675a:	2180      	movs	r1, #128	@ 0x80
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f943 	bl	80079e8 <USBD_LL_StallEP>
 8006762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006764:	e040      	b.n	80067e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fc40 	bl	8006fee <USBD_CtlError>
              break;
 800676e:	e03b      	b.n	80067e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	885b      	ldrh	r3, [r3, #2]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d136      	bne.n	80067e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f94d 	bl	8007a26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fd0c 	bl	80071aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fde3 	bl	8006362 <USBD_CoreFindEP>
 800679c:	4603      	mov	r3, r0
 800679e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067a0:	7b7b      	ldrb	r3, [r7, #13]
 80067a2:	2bff      	cmp	r3, #255	@ 0xff
 80067a4:	d01f      	beq.n	80067e6 <USBD_StdEPReq+0x1c6>
 80067a6:	7b7b      	ldrb	r3, [r7, #13]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d11c      	bne.n	80067e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067ac:	7b7a      	ldrb	r2, [r7, #13]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067b4:	7b7a      	ldrb	r2, [r7, #13]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	32ae      	adds	r2, #174	@ 0xae
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067c4:	7b7a      	ldrb	r2, [r7, #13]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	@ 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
 80067d6:	4603      	mov	r3, r0
 80067d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067da:	e004      	b.n	80067e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fc05 	bl	8006fee <USBD_CtlError>
              break;
 80067e4:	e000      	b.n	80067e8 <USBD_StdEPReq+0x1c8>
              break;
 80067e6:	bf00      	nop
          }
          break;
 80067e8:	e0ad      	b.n	8006946 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d002      	beq.n	80067fc <USBD_StdEPReq+0x1dc>
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d033      	beq.n	8006862 <USBD_StdEPReq+0x242>
 80067fa:	e099      	b.n	8006930 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <USBD_StdEPReq+0x1f2>
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b80      	cmp	r3, #128	@ 0x80
 8006806:	d004      	beq.n	8006812 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fbef 	bl	8006fee <USBD_CtlError>
                break;
 8006810:	e093      	b.n	800693a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da0b      	bge.n	8006832 <USBD_StdEPReq+0x212>
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	3310      	adds	r3, #16
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	e00b      	b.n	800684a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	3304      	adds	r3, #4
 800684a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	330e      	adds	r3, #14
 8006856:	2202      	movs	r2, #2
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fc44 	bl	80070e8 <USBD_CtlSendData>
              break;
 8006860:	e06b      	b.n	800693a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	da11      	bge.n	800688e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3323      	adds	r3, #35	@ 0x23
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d117      	bne.n	80068b4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fbb1 	bl	8006fee <USBD_CtlError>
                  break;
 800688c:	e055      	b.n	800693a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb9e 	bl	8006fee <USBD_CtlError>
                  break;
 80068b2:	e042      	b.n	800693a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da0b      	bge.n	80068d4 <USBD_StdEPReq+0x2b4>
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	3310      	adds	r3, #16
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	3304      	adds	r3, #4
 80068d2:	e00b      	b.n	80068ec <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	3304      	adds	r3, #4
 80068ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <USBD_StdEPReq+0x2da>
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b80      	cmp	r3, #128	@ 0x80
 80068f8:	d103      	bne.n	8006902 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2200      	movs	r2, #0
 80068fe:	739a      	strb	r2, [r3, #14]
 8006900:	e00e      	b.n	8006920 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 f8ac 	bl	8007a64 <USBD_LL_IsStallEP>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2201      	movs	r2, #1
 8006916:	739a      	strb	r2, [r3, #14]
 8006918:	e002      	b.n	8006920 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2200      	movs	r2, #0
 800691e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	330e      	adds	r3, #14
 8006924:	2202      	movs	r2, #2
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fbdd 	bl	80070e8 <USBD_CtlSendData>
              break;
 800692e:	e004      	b.n	800693a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb5b 	bl	8006fee <USBD_CtlError>
              break;
 8006938:	bf00      	nop
          }
          break;
 800693a:	e004      	b.n	8006946 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fb55 	bl	8006fee <USBD_CtlError>
          break;
 8006944:	bf00      	nop
      }
      break;
 8006946:	e005      	b.n	8006954 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb4f 	bl	8006fee <USBD_CtlError>
      break;
 8006950:	e000      	b.n	8006954 <USBD_StdEPReq+0x334>
      break;
 8006952:	bf00      	nop
  }

  return ret;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	0a1b      	lsrs	r3, r3, #8
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	2b06      	cmp	r3, #6
 8006982:	f200 8128 	bhi.w	8006bd6 <USBD_GetDescriptor+0x276>
 8006986:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <USBD_GetDescriptor+0x2c>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069a9 	.word	0x080069a9
 8006990:	080069c1 	.word	0x080069c1
 8006994:	08006a01 	.word	0x08006a01
 8006998:	08006bd7 	.word	0x08006bd7
 800699c:	08006bd7 	.word	0x08006bd7
 80069a0:	08006b77 	.word	0x08006b77
 80069a4:	08006ba3 	.word	0x08006ba3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
      break;
 80069be:	e112      	b.n	8006be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7c1b      	ldrb	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f107 0208 	add.w	r2, r7, #8
 80069d4:	4610      	mov	r0, r2
 80069d6:	4798      	blx	r3
 80069d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	2202      	movs	r2, #2
 80069e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069e2:	e100      	b.n	8006be6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	f107 0208 	add.w	r2, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	2202      	movs	r2, #2
 80069fc:	701a      	strb	r2, [r3, #0]
      break;
 80069fe:	e0f2      	b.n	8006be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	f200 80ac 	bhi.w	8006b64 <USBD_GetDescriptor+0x204>
 8006a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a14 <USBD_GetDescriptor+0xb4>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a2d 	.word	0x08006a2d
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006ac9 	.word	0x08006ac9
 8006a24:	08006afd 	.word	0x08006afd
 8006a28:	08006b31 	.word	0x08006b31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4e:	e091      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 facb 	bl	8006fee <USBD_CtlError>
            err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5e:	e089      	b.n	8006b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7c12      	ldrb	r2, [r2, #16]
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a82:	e077      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fab1 	bl	8006fee <USBD_CtlError>
            err++;
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	72fb      	strb	r3, [r7, #11]
          break;
 8006a92:	e06f      	b.n	8006b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	7c12      	ldrb	r2, [r2, #16]
 8006aac:	f107 0108 	add.w	r1, r7, #8
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ab6:	e05d      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa97 	bl	8006fee <USBD_CtlError>
            err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ac6:	e055      	b.n	8006b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	7c12      	ldrb	r2, [r2, #16]
 8006ae0:	f107 0108 	add.w	r1, r7, #8
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aea:	e043      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa7d 	bl	8006fee <USBD_CtlError>
            err++;
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	3301      	adds	r3, #1
 8006af8:	72fb      	strb	r3, [r7, #11]
          break;
 8006afa:	e03b      	b.n	8006b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7c12      	ldrb	r2, [r2, #16]
 8006b14:	f107 0108 	add.w	r1, r7, #8
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
 8006b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b1e:	e029      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa63 	bl	8006fee <USBD_CtlError>
            err++;
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b2e:	e021      	b.n	8006b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	7c12      	ldrb	r2, [r2, #16]
 8006b48:	f107 0108 	add.w	r1, r7, #8
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b52:	e00f      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa49 	bl	8006fee <USBD_CtlError>
            err++;
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	72fb      	strb	r3, [r7, #11]
          break;
 8006b62:	e007      	b.n	8006b74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa41 	bl	8006fee <USBD_CtlError>
          err++;
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b72:	bf00      	nop
      }
      break;
 8006b74:	e037      	b.n	8006be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b86:	f107 0208 	add.w	r2, r7, #8
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4798      	blx	r3
 8006b8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b90:	e029      	b.n	8006be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa2a 	bl	8006fee <USBD_CtlError>
        err++;
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba0:	e021      	b.n	8006be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7c1b      	ldrb	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	f107 0208 	add.w	r2, r7, #8
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4798      	blx	r3
 8006bba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bc4:	e00f      	b.n	8006be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa10 	bl	8006fee <USBD_CtlError>
        err++;
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006bd4:	e007      	b.n	8006be6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa08 	bl	8006fee <USBD_CtlError>
      err++;
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	3301      	adds	r3, #1
 8006be2:	72fb      	strb	r3, [r7, #11]
      break;
 8006be4:	bf00      	nop
  }

  if (err != 0U)
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11e      	bne.n	8006c2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	88db      	ldrh	r3, [r3, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d016      	beq.n	8006c22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	88da      	ldrh	r2, [r3, #6]
 8006bfe:	893b      	ldrh	r3, [r7, #8]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	bf28      	it	cs
 8006c04:	4613      	movcs	r3, r2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa69 	bl	80070e8 <USBD_CtlSendData>
 8006c16:	e009      	b.n	8006c2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9e7 	bl	8006fee <USBD_CtlError>
 8006c20:	e004      	b.n	8006c2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fac1 	bl	80071aa <USBD_CtlSendStatus>
 8006c28:	e000      	b.n	8006c2c <USBD_GetDescriptor+0x2cc>
    return;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop

08006c34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	889b      	ldrh	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d131      	bne.n	8006caa <USBD_SetAddress+0x76>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d12d      	bne.n	8006caa <USBD_SetAddress+0x76>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	885b      	ldrh	r3, [r3, #2]
 8006c52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c54:	d829      	bhi.n	8006caa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d104      	bne.n	8006c78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f9bc 	bl	8006fee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	e01d      	b.n	8006cb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7bfa      	ldrb	r2, [r7, #15]
 8006c7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 ff19 	bl	8007abc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa8d 	bl	80071aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9e:	e009      	b.n	8006cb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca8:	e004      	b.n	8006cb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f99e 	bl	8006fee <USBD_CtlError>
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006cd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d905      	bls.n	8006ce8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f985 	bl	8006fee <USBD_CtlError>
    return USBD_FAIL;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e08c      	b.n	8006e02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d002      	beq.n	8006cfa <USBD_SetConfig+0x3e>
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d029      	beq.n	8006d4c <USBD_SetConfig+0x90>
 8006cf8:	e075      	b.n	8006de6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cfa:	4b44      	ldr	r3, [pc, #272]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d020      	beq.n	8006d44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d02:	4b42      	ldr	r3, [pc, #264]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe ffcd 	bl	8005cb2 <USBD_SetClassConfig>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f962 	bl	8006fee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d32:	e065      	b.n	8006e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa38 	bl	80071aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d42:	e05d      	b.n	8006e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fa30 	bl	80071aa <USBD_CtlSendStatus>
      break;
 8006d4a:	e059      	b.n	8006e00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d112      	bne.n	8006d7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d66:	4b29      	ldr	r3, [pc, #164]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fe ffbc 	bl	8005cea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa19 	bl	80071aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d78:	e042      	b.n	8006e00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d02a      	beq.n	8006dde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fe ffaa 	bl	8005cea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d96:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006da0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fe ff83 	bl	8005cb2 <USBD_SetClassConfig>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00f      	beq.n	8006dd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f918 	bl	8006fee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe ff8f 	bl	8005cea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006dd4:	e014      	b.n	8006e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9e7 	bl	80071aa <USBD_CtlSendStatus>
      break;
 8006ddc:	e010      	b.n	8006e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9e3 	bl	80071aa <USBD_CtlSendStatus>
      break;
 8006de4:	e00c      	b.n	8006e00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f900 	bl	8006fee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dee:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <USBD_SetConfig+0x150>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fe ff78 	bl	8005cea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfe:	bf00      	nop
  }

  return ret;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200001a4 	.word	0x200001a4

08006e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d004      	beq.n	8006e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f8e2 	bl	8006fee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e2a:	e023      	b.n	8006e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	dc02      	bgt.n	8006e3e <USBD_GetConfig+0x2e>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc03      	bgt.n	8006e44 <USBD_GetConfig+0x34>
 8006e3c:	e015      	b.n	8006e6a <USBD_GetConfig+0x5a>
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d00b      	beq.n	8006e5a <USBD_GetConfig+0x4a>
 8006e42:	e012      	b.n	8006e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f948 	bl	80070e8 <USBD_CtlSendData>
        break;
 8006e58:	e00c      	b.n	8006e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f940 	bl	80070e8 <USBD_CtlSendData>
        break;
 8006e68:	e004      	b.n	8006e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f8be 	bl	8006fee <USBD_CtlError>
        break;
 8006e72:	bf00      	nop
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d81e      	bhi.n	8006ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d004      	beq.n	8006ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8a5 	bl	8006fee <USBD_CtlError>
        break;
 8006ea4:	e01a      	b.n	8006edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f90c 	bl	80070e8 <USBD_CtlSendData>
      break;
 8006ed0:	e004      	b.n	8006edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f88a 	bl	8006fee <USBD_CtlError>
      break;
 8006eda:	bf00      	nop
  }
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d107      	bne.n	8006f06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f953 	bl	80071aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f04:	e013      	b.n	8006f2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d10b      	bne.n	8006f26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f943 	bl	80071aa <USBD_CtlSendStatus>
}
 8006f24:	e003      	b.n	8006f2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f860 	bl	8006fee <USBD_CtlError>
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d80b      	bhi.n	8006f66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d10c      	bne.n	8006f70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f923 	bl	80071aa <USBD_CtlSendStatus>
      }
      break;
 8006f64:	e004      	b.n	8006f70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f840 	bl	8006fee <USBD_CtlError>
      break;
 8006f6e:	e000      	b.n	8006f72 <USBD_ClrFeature+0x3c>
      break;
 8006f70:	bf00      	nop
  }
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f7ff fa3d 	bl	8006424 <SWAPBYTE>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fa30 	bl	8006424 <SWAPBYTE>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff fa23 	bl	8006424 <SWAPBYTE>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	80da      	strh	r2, [r3, #6]
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ff8:	2180      	movs	r1, #128	@ 0x80
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fcf4 	bl	80079e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fcf0 	bl	80079e8 <USBD_LL_StallEP>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d042      	beq.n	80070ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f000 f842 	bl	80070b4 <USBD_GetLen>
 8007030:	4603      	mov	r3, r0
 8007032:	3301      	adds	r3, #1
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800703a:	d808      	bhi.n	800704e <USBD_GetString+0x3e>
 800703c:	6938      	ldr	r0, [r7, #16]
 800703e:	f000 f839 	bl	80070b4 <USBD_GetLen>
 8007042:	4603      	mov	r3, r0
 8007044:	3301      	adds	r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	e001      	b.n	8007052 <USBD_GetString+0x42>
 800704e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4413      	add	r3, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
  idx++;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	3301      	adds	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	2203      	movs	r2, #3
 8007070:	701a      	strb	r2, [r3, #0]
  idx++;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	3301      	adds	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007078:	e013      	b.n	80070a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	4413      	add	r3, r2
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	7812      	ldrb	r2, [r2, #0]
 8007084:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
    idx++;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	3301      	adds	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	4413      	add	r3, r2
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
    idx++;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	3301      	adds	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e7      	bne.n	800707a <USBD_GetString+0x6a>
 80070aa:	e000      	b.n	80070ae <USBD_GetString+0x9e>
    return;
 80070ac:	bf00      	nop
  }
}
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070c4:	e005      	b.n	80070d2 <USBD_GetLen+0x1e>
  {
    len++;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	3301      	adds	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f5      	bne.n	80070c6 <USBD_GetLen+0x12>
  }

  return len;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	2100      	movs	r1, #0
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fcf0 	bl	8007afa <USBD_LL_Transmit>

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	2100      	movs	r1, #0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fcdf 	bl	8007afa <USBD_LL_Transmit>

  return USBD_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2203      	movs	r2, #3
 8007156:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	2100      	movs	r1, #0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fcdf 	bl	8007b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	2100      	movs	r1, #0
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fcce 	bl	8007b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2204      	movs	r2, #4
 80071b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071ba:	2300      	movs	r3, #0
 80071bc:	2200      	movs	r2, #0
 80071be:	2100      	movs	r1, #0
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc9a 	bl	8007afa <USBD_LL_Transmit>

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2205      	movs	r2, #5
 80071dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fca8 	bl	8007b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071fc:	2200      	movs	r2, #0
 80071fe:	4912      	ldr	r1, [pc, #72]	@ (8007248 <MX_USB_DEVICE_Init+0x50>)
 8007200:	4812      	ldr	r0, [pc, #72]	@ (800724c <MX_USB_DEVICE_Init+0x54>)
 8007202:	f7fe fcd9 	bl	8005bb8 <USBD_Init>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800720c:	f7f9 fafe 	bl	800080c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007210:	490f      	ldr	r1, [pc, #60]	@ (8007250 <MX_USB_DEVICE_Init+0x58>)
 8007212:	480e      	ldr	r0, [pc, #56]	@ (800724c <MX_USB_DEVICE_Init+0x54>)
 8007214:	f7fe fd00 	bl	8005c18 <USBD_RegisterClass>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800721e:	f7f9 faf5 	bl	800080c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007222:	490c      	ldr	r1, [pc, #48]	@ (8007254 <MX_USB_DEVICE_Init+0x5c>)
 8007224:	4809      	ldr	r0, [pc, #36]	@ (800724c <MX_USB_DEVICE_Init+0x54>)
 8007226:	f7fe fbf7 	bl	8005a18 <USBD_CDC_RegisterInterface>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007230:	f7f9 faec 	bl	800080c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007234:	4805      	ldr	r0, [pc, #20]	@ (800724c <MX_USB_DEVICE_Init+0x54>)
 8007236:	f7fe fd25 	bl	8005c84 <USBD_Start>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007240:	f7f9 fae4 	bl	800080c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007244:	bf00      	nop
 8007246:	bd80      	pop	{r7, pc}
 8007248:	200000d0 	.word	0x200000d0
 800724c:	200001a8 	.word	0x200001a8
 8007250:	2000003c 	.word	0x2000003c
 8007254:	200000bc 	.word	0x200000bc

08007258 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800725c:	2200      	movs	r2, #0
 800725e:	4905      	ldr	r1, [pc, #20]	@ (8007274 <CDC_Init_FS+0x1c>)
 8007260:	4805      	ldr	r0, [pc, #20]	@ (8007278 <CDC_Init_FS+0x20>)
 8007262:	f7fe fbf3 	bl	8005a4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007266:	4905      	ldr	r1, [pc, #20]	@ (800727c <CDC_Init_FS+0x24>)
 8007268:	4803      	ldr	r0, [pc, #12]	@ (8007278 <CDC_Init_FS+0x20>)
 800726a:	f7fe fc11 	bl	8005a90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800726e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000c84 	.word	0x20000c84
 8007278:	200001a8 	.word	0x200001a8
 800727c:	20000484 	.word	0x20000484

08007280 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007286:	4618      	mov	r0, r3
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	71fb      	strb	r3, [r7, #7]
 800729c:	4613      	mov	r3, r2
 800729e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b23      	cmp	r3, #35	@ 0x23
 80072a4:	d84a      	bhi.n	800733c <CDC_Control_FS+0xac>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <CDC_Control_FS+0x1c>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	0800733d 	.word	0x0800733d
 80072b0:	0800733d 	.word	0x0800733d
 80072b4:	0800733d 	.word	0x0800733d
 80072b8:	0800733d 	.word	0x0800733d
 80072bc:	0800733d 	.word	0x0800733d
 80072c0:	0800733d 	.word	0x0800733d
 80072c4:	0800733d 	.word	0x0800733d
 80072c8:	0800733d 	.word	0x0800733d
 80072cc:	0800733d 	.word	0x0800733d
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	0800733d 	.word	0x0800733d
 80072dc:	0800733d 	.word	0x0800733d
 80072e0:	0800733d 	.word	0x0800733d
 80072e4:	0800733d 	.word	0x0800733d
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	0800733d 	.word	0x0800733d
 80072f0:	0800733d 	.word	0x0800733d
 80072f4:	0800733d 	.word	0x0800733d
 80072f8:	0800733d 	.word	0x0800733d
 80072fc:	0800733d 	.word	0x0800733d
 8007300:	0800733d 	.word	0x0800733d
 8007304:	0800733d 	.word	0x0800733d
 8007308:	0800733d 	.word	0x0800733d
 800730c:	0800733d 	.word	0x0800733d
 8007310:	0800733d 	.word	0x0800733d
 8007314:	0800733d 	.word	0x0800733d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800733d 	.word	0x0800733d
 8007320:	0800733d 	.word	0x0800733d
 8007324:	0800733d 	.word	0x0800733d
 8007328:	0800733d 	.word	0x0800733d
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800733d 	.word	0x0800733d
 8007334:	0800733d 	.word	0x0800733d
 8007338:	0800733d 	.word	0x0800733d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800733c:	bf00      	nop
  }

  return (USBD_OK);
 800733e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4805      	ldr	r0, [pc, #20]	@ (8007370 <CDC_Receive_FS+0x24>)
 800735a:	f7fe fb99 	bl	8005a90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800735e:	4804      	ldr	r0, [pc, #16]	@ (8007370 <CDC_Receive_FS+0x24>)
 8007360:	f7fe fbf4 	bl	8005b4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007364:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200001a8 	.word	0x200001a8

08007374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007384:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <CDC_Transmit_FS+0x48>)
 8007386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800738a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007396:	2301      	movs	r3, #1
 8007398:	e00b      	b.n	80073b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800739a:	887b      	ldrh	r3, [r7, #2]
 800739c:	461a      	mov	r2, r3
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4806      	ldr	r0, [pc, #24]	@ (80073bc <CDC_Transmit_FS+0x48>)
 80073a2:	f7fe fb53 	bl	8005a4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073a6:	4805      	ldr	r0, [pc, #20]	@ (80073bc <CDC_Transmit_FS+0x48>)
 80073a8:	f7fe fb90 	bl	8005acc <USBD_CDC_TransmitPacket>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200001a8 	.word	0x200001a8

080073c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2212      	movs	r2, #18
 80073f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073f6:	4b03      	ldr	r3, [pc, #12]	@ (8007404 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	200000ec 	.word	0x200000ec

08007408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2204      	movs	r2, #4
 8007418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800741a:	4b03      	ldr	r3, [pc, #12]	@ (8007428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20000100 	.word	0x20000100

0800742c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	6039      	str	r1, [r7, #0]
 8007436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d105      	bne.n	800744a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4907      	ldr	r1, [pc, #28]	@ (8007460 <USBD_FS_ProductStrDescriptor+0x34>)
 8007442:	4808      	ldr	r0, [pc, #32]	@ (8007464 <USBD_FS_ProductStrDescriptor+0x38>)
 8007444:	f7ff fde4 	bl	8007010 <USBD_GetString>
 8007448:	e004      	b.n	8007454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	4904      	ldr	r1, [pc, #16]	@ (8007460 <USBD_FS_ProductStrDescriptor+0x34>)
 800744e:	4805      	ldr	r0, [pc, #20]	@ (8007464 <USBD_FS_ProductStrDescriptor+0x38>)
 8007450:	f7ff fdde 	bl	8007010 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007454:	4b02      	ldr	r3, [pc, #8]	@ (8007460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20001484 	.word	0x20001484
 8007464:	08007c9c 	.word	0x08007c9c

08007468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	4904      	ldr	r1, [pc, #16]	@ (8007488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007478:	4804      	ldr	r0, [pc, #16]	@ (800748c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800747a:	f7ff fdc9 	bl	8007010 <USBD_GetString>
  return USBD_StrDesc;
 800747e:	4b02      	ldr	r3, [pc, #8]	@ (8007488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20001484 	.word	0x20001484
 800748c:	08007cb4 	.word	0x08007cb4

08007490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	6039      	str	r1, [r7, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	221a      	movs	r2, #26
 80074a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074a2:	f000 f843 	bl	800752c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074a6:	4b02      	ldr	r3, [pc, #8]	@ (80074b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000104 	.word	0x20000104

080074b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	6039      	str	r1, [r7, #0]
 80074be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4907      	ldr	r1, [pc, #28]	@ (80074e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ca:	4808      	ldr	r0, [pc, #32]	@ (80074ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80074cc:	f7ff fda0 	bl	8007010 <USBD_GetString>
 80074d0:	e004      	b.n	80074dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4904      	ldr	r1, [pc, #16]	@ (80074e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074d6:	4805      	ldr	r0, [pc, #20]	@ (80074ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80074d8:	f7ff fd9a 	bl	8007010 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074dc:	4b02      	ldr	r3, [pc, #8]	@ (80074e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20001484 	.word	0x20001484
 80074ec:	08007cc8 	.word	0x08007cc8

080074f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d105      	bne.n	800750e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	4907      	ldr	r1, [pc, #28]	@ (8007524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007506:	4808      	ldr	r0, [pc, #32]	@ (8007528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007508:	f7ff fd82 	bl	8007010 <USBD_GetString>
 800750c:	e004      	b.n	8007518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	4904      	ldr	r1, [pc, #16]	@ (8007524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007512:	4805      	ldr	r0, [pc, #20]	@ (8007528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007514:	f7ff fd7c 	bl	8007010 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007518:	4b02      	ldr	r3, [pc, #8]	@ (8007524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20001484 	.word	0x20001484
 8007528:	08007cd4 	.word	0x08007cd4

0800752c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007532:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <Get_SerialNum+0x44>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007538:	4b0e      	ldr	r3, [pc, #56]	@ (8007574 <Get_SerialNum+0x48>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800753e:	4b0e      	ldr	r3, [pc, #56]	@ (8007578 <Get_SerialNum+0x4c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007552:	2208      	movs	r2, #8
 8007554:	4909      	ldr	r1, [pc, #36]	@ (800757c <Get_SerialNum+0x50>)
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f814 	bl	8007584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800755c:	2204      	movs	r2, #4
 800755e:	4908      	ldr	r1, [pc, #32]	@ (8007580 <Get_SerialNum+0x54>)
 8007560:	68b8      	ldr	r0, [r7, #8]
 8007562:	f000 f80f 	bl	8007584 <IntToUnicode>
  }
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	1fff7a10 	.word	0x1fff7a10
 8007574:	1fff7a14 	.word	0x1fff7a14
 8007578:	1fff7a18 	.word	0x1fff7a18
 800757c:	20000106 	.word	0x20000106
 8007580:	20000116 	.word	0x20000116

08007584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]
 800759a:	e027      	b.n	80075ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	0f1b      	lsrs	r3, r3, #28
 80075a0:	2b09      	cmp	r3, #9
 80075a2:	d80b      	bhi.n	80075bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	0f1b      	lsrs	r3, r3, #28
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4619      	mov	r1, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	440b      	add	r3, r1
 80075b4:	3230      	adds	r2, #48	@ 0x30
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e00a      	b.n	80075d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0f1b      	lsrs	r3, r3, #28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	440b      	add	r3, r1
 80075cc:	3237      	adds	r2, #55	@ 0x37
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	3301      	adds	r3, #1
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	3301      	adds	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	7dfa      	ldrb	r2, [r7, #23]
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3d3      	bcc.n	800759c <IntToUnicode+0x18>
  }
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	@ 0x28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007624:	d13a      	bne.n	800769c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	4b1e      	ldr	r3, [pc, #120]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762e:	4a1d      	ldr	r2, [pc, #116]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	6313      	str	r3, [r2, #48]	@ 0x30
 8007636:	4b1b      	ldr	r3, [pc, #108]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007642:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007648:	2302      	movs	r3, #2
 800764a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007650:	2303      	movs	r3, #3
 8007652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007654:	230a      	movs	r3, #10
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4619      	mov	r1, r3
 800765e:	4812      	ldr	r0, [pc, #72]	@ (80076a8 <HAL_PCD_MspInit+0xa4>)
 8007660:	f7fa fa14 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007664:	4b0f      	ldr	r3, [pc, #60]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 8007666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007668:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 800766a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 8007676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007678:	4a0a      	ldr	r2, [pc, #40]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 800767a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800767e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007680:	4b08      	ldr	r3, [pc, #32]	@ (80076a4 <HAL_PCD_MspInit+0xa0>)
 8007682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	2043      	movs	r0, #67	@ 0x43
 8007692:	f7fa f9c4 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007696:	2043      	movs	r0, #67	@ 0x43
 8007698:	f7fa f9dd 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800769c:	bf00      	nop
 800769e:	3728      	adds	r7, #40	@ 0x28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40020000 	.word	0x40020000

080076ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe fb2b 	bl	8005d1e <USBD_LL_SetupStage>
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	4619      	mov	r1, r3
 80076fa:	f7fe fb65 	bl	8005dc8 <USBD_LL_DataOutStage>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	3320      	adds	r3, #32
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	4619      	mov	r1, r3
 800772e:	f7fe fc07 	bl	8005f40 <USBD_LL_DataInStage>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fd4b 	bl	80061e4 <USBD_LL_SOF>
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	79db      	ldrb	r3, [r3, #7]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
 800776e:	e008      	b.n	8007782 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	79db      	ldrb	r3, [r3, #7]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d102      	bne.n	800777e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
 800777c:	e001      	b.n	8007782 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800777e:	f7f9 f845 	bl	800080c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007788:	7bfa      	ldrb	r2, [r7, #15]
 800778a:	4611      	mov	r1, r2
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fce5 	bl	800615c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fc8c 	bl	80060b6 <USBD_LL_Reset>
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fce0 	bl	800617c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7adb      	ldrb	r3, [r3, #11]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <HAL_PCD_SuspendCallback+0x48>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	4a03      	ldr	r2, [pc, #12]	@ (80077f0 <HAL_PCD_SuspendCallback+0x48>)
 80077e2:	f043 0306 	orr.w	r3, r3, #6
 80077e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fcd6 	bl	80061b4 <USBD_LL_Resume>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fd2e 	bl	8006288 <USBD_LL_IsoOUTIncomplete>
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fcea 	bl	8006224 <USBD_LL_IsoINIncomplete>
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fd40 	bl	80062ec <USBD_LL_DevConnected>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fd3d 	bl	8006302 <USBD_LL_DevDisconnected>
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d13c      	bne.n	800791a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078a0:	4a20      	ldr	r2, [pc, #128]	@ (8007924 <USBD_LL_Init+0x94>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007924 <USBD_LL_Init+0x94>)
 80078ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007924 <USBD_LL_Init+0x94>)
 80078b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80078b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <USBD_LL_Init+0x94>)
 80078ba:	2204      	movs	r2, #4
 80078bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078be:	4b19      	ldr	r3, [pc, #100]	@ (8007924 <USBD_LL_Init+0x94>)
 80078c0:	2202      	movs	r2, #2
 80078c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <USBD_LL_Init+0x94>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078ca:	4b16      	ldr	r3, [pc, #88]	@ (8007924 <USBD_LL_Init+0x94>)
 80078cc:	2202      	movs	r2, #2
 80078ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078d0:	4b14      	ldr	r3, [pc, #80]	@ (8007924 <USBD_LL_Init+0x94>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <USBD_LL_Init+0x94>)
 80078d8:	2200      	movs	r2, #0
 80078da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078dc:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <USBD_LL_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078e2:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <USBD_LL_Init+0x94>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <USBD_LL_Init+0x94>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078ee:	480d      	ldr	r0, [pc, #52]	@ (8007924 <USBD_LL_Init+0x94>)
 80078f0:	f7fa fa81 	bl	8001df6 <HAL_PCD_Init>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078fa:	f7f8 ff87 	bl	800080c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	4808      	ldr	r0, [pc, #32]	@ (8007924 <USBD_LL_Init+0x94>)
 8007902:	f7fb fcae 	bl	8003262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007906:	2240      	movs	r2, #64	@ 0x40
 8007908:	2100      	movs	r1, #0
 800790a:	4806      	ldr	r0, [pc, #24]	@ (8007924 <USBD_LL_Init+0x94>)
 800790c:	f7fb fc62 	bl	80031d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007910:	2280      	movs	r2, #128	@ 0x80
 8007912:	2101      	movs	r1, #1
 8007914:	4803      	ldr	r0, [pc, #12]	@ (8007924 <USBD_LL_Init+0x94>)
 8007916:	f7fb fc5d 	bl	80031d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20001684 	.word	0x20001684

08007928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800793e:	4618      	mov	r0, r3
 8007940:	f7fa fb68 	bl	8002014 <HAL_PCD_Start>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 f942 	bl	8007bd4 <USBD_Get_USB_Status>
 8007950:	4603      	mov	r3, r0
 8007952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007954:	7bbb      	ldrb	r3, [r7, #14]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	4608      	mov	r0, r1
 8007968:	4611      	mov	r1, r2
 800796a:	461a      	mov	r2, r3
 800796c:	4603      	mov	r3, r0
 800796e:	70fb      	strb	r3, [r7, #3]
 8007970:	460b      	mov	r3, r1
 8007972:	70bb      	strb	r3, [r7, #2]
 8007974:	4613      	mov	r3, r2
 8007976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007986:	78bb      	ldrb	r3, [r7, #2]
 8007988:	883a      	ldrh	r2, [r7, #0]
 800798a:	78f9      	ldrb	r1, [r7, #3]
 800798c:	f7fb f83c 	bl	8002a08 <HAL_PCD_EP_Open>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f91c 	bl	8007bd4 <USBD_Get_USB_Status>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	4611      	mov	r1, r2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fb f887 	bl	8002adc <HAL_PCD_EP_Close>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 f8fd 	bl	8007bd4 <USBD_Get_USB_Status>
 80079da:	4603      	mov	r3, r0
 80079dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079de:	7bbb      	ldrb	r3, [r7, #14]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fb f93f 	bl	8002c8a <HAL_PCD_EP_SetStall>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f8de 	bl	8007bd4 <USBD_Get_USB_Status>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fb f983 	bl	8002d50 <HAL_PCD_EP_ClrStall>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f8bf 	bl	8007bd4 <USBD_Get_USB_Status>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	da0b      	bge.n	8007a98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3316      	adds	r3, #22
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	e00b      	b.n	8007ab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fa ff70 	bl	80029c0 <HAL_PCD_SetAddress>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f874 	bl	8007bd4 <USBD_Get_USB_Status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	460b      	mov	r3, r1
 8007b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b18:	7af9      	ldrb	r1, [r7, #11]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	f7fb f87a 	bl	8002c16 <HAL_PCD_EP_Transmit>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f853 	bl	8007bd4 <USBD_Get_USB_Status>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b5a:	7af9      	ldrb	r1, [r7, #11]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	f7fb f806 	bl	8002b70 <HAL_PCD_EP_Receive>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f832 	bl	8007bd4 <USBD_Get_USB_Status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b74:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fb f826 	bl	8002be6 <HAL_PCD_EP_GetRxCount>
 8007b9a:	4603      	mov	r3, r0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bac:	4b03      	ldr	r3, [pc, #12]	@ (8007bbc <USBD_static_malloc+0x18>)
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20001b68 	.word	0x20001b68

08007bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d817      	bhi.n	8007c18 <USBD_Get_USB_Status+0x44>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <USBD_Get_USB_Status+0x1c>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c07 	.word	0x08007c07
 8007bf8:	08007c0d 	.word	0x08007c0d
 8007bfc:	08007c13 	.word	0x08007c13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
    break;
 8007c04:	e00b      	b.n	8007c1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0a:	e008      	b.n	8007c1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c10:	e005      	b.n	8007c1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	73fb      	strb	r3, [r7, #15]
    break;
 8007c16:	e002      	b.n	8007c1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	bf00      	nop
  }
  return usb_status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <__libc_init_array>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c74 <__libc_init_array+0x38>)
 8007c40:	4c0d      	ldr	r4, [pc, #52]	@ (8007c78 <__libc_init_array+0x3c>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	2600      	movs	r6, #0
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	d109      	bne.n	8007c60 <__libc_init_array+0x24>
 8007c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c7c <__libc_init_array+0x40>)
 8007c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c80 <__libc_init_array+0x44>)
 8007c50:	f000 f818 	bl	8007c84 <_init>
 8007c54:	1b64      	subs	r4, r4, r5
 8007c56:	10a4      	asrs	r4, r4, #2
 8007c58:	2600      	movs	r6, #0
 8007c5a:	42a6      	cmp	r6, r4
 8007c5c:	d105      	bne.n	8007c6a <__libc_init_array+0x2e>
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c64:	4798      	blx	r3
 8007c66:	3601      	adds	r6, #1
 8007c68:	e7ee      	b.n	8007c48 <__libc_init_array+0xc>
 8007c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6e:	4798      	blx	r3
 8007c70:	3601      	adds	r6, #1
 8007c72:	e7f2      	b.n	8007c5a <__libc_init_array+0x1e>
 8007c74:	08007cfc 	.word	0x08007cfc
 8007c78:	08007cfc 	.word	0x08007cfc
 8007c7c:	08007cfc 	.word	0x08007cfc
 8007c80:	08007d00 	.word	0x08007d00

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
